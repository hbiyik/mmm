from libmmm.devices.sun8i_dram import DRAM_COM, DRAM_CTL
from libmmm.devices.allwinner_a33_ndfc import NDFC
from libmmm.model import Device, Reg32, Datapoint, VirtualDatapoint


class ClockPoint_NKMP(VirtualDatapoint):
    def __init__(self, register, N=0, K=0, M=0, P=0, exp=False, factor=1, name="virtual_clock"):
        VirtualDatapoint.__init__(self, name, register, unit="Mhz")
        self.N = N
        self.K = K
        self.M = M
        self.P = P
        self.exp = exp
        self.factor = factor

    def get(self):
        values = []
        points = self.register.read()
        for pname in [self.N, self.K, self.M, self.P]:
            if pname == 0:
                values.append(0)
            for point in points:
                if pname == point.name:
                    values.append(point.value)
                    break
        n, k, m, p = values
        if self.exp:
            pval = 2 ** p
        else:
            pval = p + 1
        return int(24 * (n + 1) * (k + 1) / ((m + 1) * pval) * self.factor)
    
    def set(self, value):
        # TODO: Bounds check, and refactror for all variants, this does not work all the time
        value = int(value / 24)  # 24mhz step
        self.register.write(self.M, 0)
        self.register.write(self.P, 0)
        self.register.write(self.K, 1)
        self.register.write(self.K, value - 1)
    

class CCU(Device):
    def __init__(self, start=0x01C20000):
        super(CCU, self).__init__("CCU" , start)
        PLL_CPUX_CTRL_REG = Reg32("PLL_CPUX_CTRL_REG", 0x0000)
        self.block(PLL_CPUX_CTRL_REG)
        PLL_CPUX_CTRL_REG.register(31, 1, Datapoint("PLL_ENABLE", default=0))
        PLL_CPUX_CTRL_REG.register(28, 1, Datapoint("LOCK", default=0))
        PLL_CPUX_CTRL_REG.register(24, 1, Datapoint("CPUX_SDM_EN", default=0))
        PLL_CPUX_CTRL_REG.register(16, 2, Datapoint("PLL_OUT_EXT_DIV_P", default=0))
        PLL_CPUX_CTRL_REG.register(8, 5, Datapoint("PLL_FACTOR_N", default=16))
        PLL_CPUX_CTRL_REG.register(4, 2, Datapoint("PLL_FACTOR_K", default=0))
        PLL_CPUX_CTRL_REG.register(0, 2, Datapoint("PLL_FACTOR_M", default=0))
        PLL_AUDIO_CTRL_REG = Reg32("PLL_AUDIO_CTRL_REG", 0x0008)
        self.block(PLL_AUDIO_CTRL_REG)
        PLL_AUDIO_CTRL_REG.register(31, 1, Datapoint("PLL_ENABLE", default=0))
        PLL_AUDIO_CTRL_REG.register(28, 1, Datapoint("LOCK", default=0))
        PLL_AUDIO_CTRL_REG.register(24, 1, Datapoint("PLL_SDM_EN", default=0))
        PLL_AUDIO_CTRL_REG.register(16, 4, Datapoint("PLL_POSTDIV_P", default=3))
        PLL_AUDIO_CTRL_REG.register(8, 7, Datapoint("PLL_FACTOR_N", default=85))
        PLL_AUDIO_CTRL_REG.register(0, 5, Datapoint("PLL_PREDIV_M", default=20))
        PLL_VIDEO_CTRL_REG = Reg32("PLL_VIDEO_CTRL_REG", 0x0010)
        self.block(PLL_VIDEO_CTRL_REG)
        PLL_VIDEO_CTRL_REG.register(31, 1, Datapoint("PLL_ENABLE", default=0))
        PLL_VIDEO_CTRL_REG.register(30, 1, Datapoint("PLL_MODE", default=0))
        PLL_VIDEO_CTRL_REG.register(28, 1, Datapoint("LOCK", default=0))
        PLL_VIDEO_CTRL_REG.register(25, 1, Datapoint("FRAC_CLK_OUT", default=1))
        PLL_VIDEO_CTRL_REG.register(24, 1, Datapoint("PLL_MODE_SEL", default=1))
        PLL_VIDEO_CTRL_REG.register(20, 1, Datapoint("PLL_SDM_EN", default=0))
        PLL_VIDEO_CTRL_REG.register(8, 7, Datapoint("PLL_FACTOR_N", default=98))
        PLL_VIDEO_CTRL_REG.register(0, 4, Datapoint("PLL_PREDIV_M", default=7))
        PLL_VE_CTRL_REG = Reg32("PLL_VE_CTRL_REG", 0x0018)
        self.block(PLL_VE_CTRL_REG)
        PLL_VE_CTRL_REG.register(31, 1, Datapoint("PLL_ENABLE", default=0))
        PLL_VE_CTRL_REG.register(28, 1, Datapoint("LOCK", default=0))
        PLL_VE_CTRL_REG.register(25, 1, Datapoint("FRAC_CLK_OUT", default=1))
        PLL_VE_CTRL_REG.register(24, 1, Datapoint("PLL_MODE_SEL", default=1))
        PLL_VE_CTRL_REG.register(20, 1, Datapoint("PLL_SDM_EN", default=0))
        PLL_VE_CTRL_REG.register(8, 7, Datapoint("PLL_FACTOR_N", default=98))
        PLL_VE_CTRL_REG.register(0, 4, Datapoint("PLL_PREDIV_M", default=7))
        PLL_DDR0_CTRL_REG = Reg32("PLL_DDR0_CTRL_REG", 0x0020)
        self.block(PLL_DDR0_CTRL_REG)
        PLL_DDR0_CTRL_REG.register(31, 1, Datapoint("PLL_ENABLE", default=0))
        PLL_DDR0_CTRL_REG.register(28, 1, Datapoint("LOCK", default=0))
        PLL_DDR0_CTRL_REG.register(24, 1, Datapoint("PLL_SDM_EN", default=0))
        PLL_DDR0_CTRL_REG.register(20, 1, Datapoint("PLL_DDR0_CFG_UPDATE", default=0))
        PLL_DDR0_CTRL_REG.register(8, 5, Datapoint("PLL_FACTOR_N", default=16))
        PLL_DDR0_CTRL_REG.register(4, 2, Datapoint("PLL_FACTOR_K", default=0))
        PLL_DDR0_CTRL_REG.register(0, 2, Datapoint("PLL_FACTOR_M", default=0))
        PLL_PERIPH_CTRL_REG = Reg32("PLL_PERIPH_CTRL_REG", 0x0028)
        self.block(PLL_PERIPH_CTRL_REG)
        PLL_PERIPH_CTRL_REG.register(31, 1, Datapoint("PLL_ENABLE", default=0))
        PLL_PERIPH_CTRL_REG.register(28, 1, Datapoint("LOCK", default=0))
        PLL_PERIPH_CTRL_REG.register(25, 1, Datapoint("PLL_BYPASS_EN", default=0))
        PLL_PERIPH_CTRL_REG.register(24, 1, Datapoint("PLL_CLK_OUT_EN", default=0))
        PLL_PERIPH_CTRL_REG.register(18, 1, Datapoint("PLL_24M_OUT_EN", default=1))
        PLL_PERIPH_CTRL_REG.register(16, 2, Datapoint("PLL_24M_POST_DIV", default=0))
        PLL_PERIPH_CTRL_REG.register(8, 5, Datapoint("PLL_FACTOR_N", default=24))
        PLL_PERIPH_CTRL_REG.register(4, 2, Datapoint("PLL_FACTOR_K", default=1))
        PLL_PERIPH_CTRL_REG.register(0, 2, Datapoint("PLL_FACTOR_M", default=1))
        PLL_GPU_CTRL_REG = Reg32("PLL_GPU_CTRL_REG", 0x0038)
        self.block(PLL_GPU_CTRL_REG)
        PLL_GPU_CTRL_REG.register(31, 1, Datapoint("PLL_ENABLE", default=0))
        PLL_GPU_CTRL_REG.register(28, 1, Datapoint("LOCK", default=0))
        PLL_GPU_CTRL_REG.register(25, 1, Datapoint("FRAC_CLK_OUT", default=1))
        PLL_GPU_CTRL_REG.register(24, 1, Datapoint("PLL_MODE_SEL", default=1))
        PLL_GPU_CTRL_REG.register(20, 1, Datapoint("PLL_SDM_EN", default=0))
        PLL_GPU_CTRL_REG.register(8, 7, Datapoint("PLL_FACTOR_N", default=98))
        PLL_GPU_CTRL_REG.register(0, 4, Datapoint("PLL_PRE_DIV_M", default=7))
        PLL_MIPI_CTRL_REG = Reg32("PLL_MIPI_CTRL_REG", 0x0040)
        self.block(PLL_MIPI_CTRL_REG)
        PLL_MIPI_CTRL_REG.register(31, 1, Datapoint("PLL_ENABLE", default=0))
        PLL_MIPI_CTRL_REG.register(28, 1, Datapoint("LOCK", default=0))
        PLL_MIPI_CTRL_REG.register(26, 1, Datapoint("SDIV2", default=0))
        PLL_MIPI_CTRL_REG.register(25, 1, Datapoint("S6P25_7P5", default=0))
        PLL_MIPI_CTRL_REG.register(20, 1, Datapoint("PLL_SDM_EN", default=0))
        PLL_MIPI_CTRL_REG.register(17, 1, Datapoint("PLL_FEEDBACK_DIV", default=0))
        PLL_MIPI_CTRL_REG.register(16, 1, Datapoint("VFB_SEL", default=0))
        PLL_MIPI_CTRL_REG.register(8, 4, Datapoint("PLL_FACTOR_N", default=5))
        PLL_MIPI_CTRL_REG.register(4, 2, Datapoint("PLL_FACTOR_K", default=0))
        PLL_MIPI_CTRL_REG.register(0, 4, Datapoint("PLL_PRE_DIV_M", default=2))
        PLL_HSIC_CTRL_REG = Reg32("PLL_HSIC_CTRL_REG", 0x0044)
        self.block(PLL_HSIC_CTRL_REG)
        PLL_HSIC_CTRL_REG.register(31, 1, Datapoint("PLL_ENABLE", default=0))
        PLL_HSIC_CTRL_REG.register(28, 1, Datapoint("LOCK", default=0))
        PLL_HSIC_CTRL_REG.register(25, 1, Datapoint("FRAC_CLK_OUT", default=1))
        PLL_HSIC_CTRL_REG.register(24, 1, Datapoint("PLL_MODE_SEL", default=1))
        PLL_HSIC_CTRL_REG.register(20, 1, Datapoint("PLL_SDM_EN", default=0))
        PLL_HSIC_CTRL_REG.register(8, 7, Datapoint("PLL_FACTOR_N", default=19))
        PLL_HSIC_CTRL_REG.register(0, 4, Datapoint("PLL_PRE_DIV_M", default=0))
        PLL_DE_CTRL_REG = Reg32("PLL_DE_CTRL_REG", 0x0048)
        self.block(PLL_DE_CTRL_REG)
        PLL_DE_CTRL_REG.register(31, 1, Datapoint("PLL_ENABLE", default=0))
        PLL_DE_CTRL_REG.register(28, 1, Datapoint("LOCK", default=0))
        PLL_DE_CTRL_REG.register(25, 1, Datapoint("FRAC_CLK_OUT", default=1))
        PLL_DE_CTRL_REG.register(24, 1, Datapoint("PLL_MODE_SEL", default=1))
        PLL_DE_CTRL_REG.register(20, 1, Datapoint("PLL_SDM_EN", default=0))
        PLL_DE_CTRL_REG.register(8, 7, Datapoint("PLL_FACTOR_N", default=98))
        PLL_DE_CTRL_REG.register(0, 4, Datapoint("PLL_PRE_DIV_M", default=7))
        PLL_DDR1_CTRL_REG = Reg32("PLL_DDR1_CTRL_REG", 0x004C)
        self.block(PLL_DDR1_CTRL_REG)
        PLL_DDR1_CTRL_REG.register(31, 1, Datapoint("PLL_ENABLE", default=0))
        PLL_DDR1_CTRL_REG.register(30, 1, Datapoint("SDRPLL_UPD", default=0))
        PLL_DDR1_CTRL_REG.register(28, 1, Datapoint("LOCK", default=0))
        PLL_DDR1_CTRL_REG.register(24, 1, Datapoint("PLL_SDM_EN", default=0))
        PLL_DDR1_CTRL_REG.register(8, 6, Datapoint("PLL_FACTOR_N", default=24))
        CPU_AXI_CFG_REG = Reg32("CPU_AXI_CFG_REG", 0x0050)
        self.block(CPU_AXI_CFG_REG)
        CPU_AXI_CFG_REG.register(16, 2, Datapoint("CPUX_CLK_SRC_SEL", default=1))
        CPU_AXI_CFG_REG.register(8, 2, Datapoint("CPU_APB_CLK_DIV", default=0))
        CPU_AXI_CFG_REG.register(0, 2, Datapoint("AXI_CLK_DIV_RATIO", default=0))
        AHB1_APB1_CFG_REG = Reg32("AHB1_APB1_CFG_REG", 0x0054)
        self.block(AHB1_APB1_CFG_REG)
        AHB1_APB1_CFG_REG.register(12, 2, Datapoint("AHB1_CLK_SRC_SEL", default=1))
        AHB1_APB1_CFG_REG.register(8, 2, Datapoint("APB1_CLK_RATIO", default=0))
        AHB1_APB1_CFG_REG.register(6, 2, Datapoint("AHB1_PRE_DIV", default=0))
        AHB1_APB1_CFG_REG.register(4, 2, Datapoint("AHB1_CLK_DIV_RATIO", default=1))
        AHB1_APB1_CFG_REG.register(24, 2, Datapoint("APB2_CLK_SRC_SEL", default=1))
        AHB1_APB1_CFG_REG.register(16, 2, Datapoint("CLK_RAT_N", default=0))
        AHB1_APB1_CFG_REG.register(0, 5, Datapoint("CLK_RAT_M", default=0))
        BUS_CLK_GATING_REG0 = Reg32("BUS_CLK_GATING_REG0", 0x0060)
        self.block(BUS_CLK_GATING_REG0)
        BUS_CLK_GATING_REG0.register(29, 1, Datapoint("USBOHCI_GATING", default=0))
        BUS_CLK_GATING_REG0.register(26, 1, Datapoint("USBEHCI_GATING", default=0))
        BUS_CLK_GATING_REG0.register(24, 1, Datapoint("USBDRD_GATING", default=0))
        BUS_CLK_GATING_REG0.register(21, 1, Datapoint("SPI1_GATING", default=0))
        BUS_CLK_GATING_REG0.register(20, 1, Datapoint("SPI0_GATING", default=0))
        BUS_CLK_GATING_REG0.register(19, 1, Datapoint("HSTMR_GATING", default=0))
        BUS_CLK_GATING_REG0.register(14, 1, Datapoint("DRAM_GATING", default=0))
        BUS_CLK_GATING_REG0.register(13, 1, Datapoint("NAND_GATING", default=0))
        BUS_CLK_GATING_REG0.register(10, 1, Datapoint("MMC2_GATING", default=0))
        BUS_CLK_GATING_REG0.register(9, 1, Datapoint("MMC1_GATING", default=0))
        BUS_CLK_GATING_REG0.register(8, 1, Datapoint("MMC0_GATING", default=0))
        BUS_CLK_GATING_REG0.register(6, 1, Datapoint("DMA_GATING", default=0))
        BUS_CLK_GATING_REG0.register(5, 1, Datapoint("SS_GATING", default=0))
        BUS_CLK_GATING_REG0.register(1, 1, Datapoint("MIPIDSI_GATING", default=0))
        BUS_CLK_GATING_REG1 = Reg32("BUS_CLK_GATING_REG1", 0x0064)
        self.block(BUS_CLK_GATING_REG1)
        BUS_CLK_GATING_REG1.register(26, 1, Datapoint("SAT_GATING", default=0))
        BUS_CLK_GATING_REG1.register(25, 1, Datapoint("DRC_GATING", default=0))
        BUS_CLK_GATING_REG1.register(22, 1, Datapoint("SPINLOCK_GATING", default=0))
        BUS_CLK_GATING_REG1.register(21, 1, Datapoint("MSGBOX_GATING", default=0))
        BUS_CLK_GATING_REG1.register(20, 1, Datapoint("GPU_GATING", default=0))
        BUS_CLK_GATING_REG1.register(14, 1, Datapoint("FE_GATING", default=0))
        BUS_CLK_GATING_REG1.register(12, 1, Datapoint("BE_GATING", default=0))
        BUS_CLK_GATING_REG1.register(8, 1, Datapoint("CSI_GATING", default=0))
        BUS_CLK_GATING_REG1.register(4, 1, Datapoint("LCD_GATING", default=0))
        BUS_CLK_GATING_REG1.register(0, 1, Datapoint("VE_GATING", default=0))
        BUS_CLK_GATING_REG2 = Reg32("BUS_CLK_GATING_REG2", 0x0068)
        self.block(BUS_CLK_GATING_REG2)
        BUS_CLK_GATING_REG2.register(13, 1, Datapoint("DAUDIO1_GATING", default=0))
        BUS_CLK_GATING_REG2.register(12, 1, Datapoint("DAUDIO0_GATING", default=0))
        BUS_CLK_GATING_REG2.register(5, 1, Datapoint("PIO_GATING", default=0))
        BUS_CLK_GATING_REG2.register(0, 1, Datapoint("ADDA_GATING", default=0))
        BUS_CLK_GATING_REG3 = Reg32("BUS_CLK_GATING_REG3", 0x006C)
        self.block(BUS_CLK_GATING_REG3)
        BUS_CLK_GATING_REG3.register(20, 1, Datapoint("UART4_GATING", default=0))
        BUS_CLK_GATING_REG3.register(19, 1, Datapoint("UART3_GATING", default=0))
        BUS_CLK_GATING_REG3.register(18, 1, Datapoint("UART2_GATING", default=0))
        BUS_CLK_GATING_REG3.register(17, 1, Datapoint("UART1_GATING", default=0))
        BUS_CLK_GATING_REG3.register(16, 1, Datapoint("UART0_GATING", default=0))
        BUS_CLK_GATING_REG3.register(2, 1, Datapoint("TWI2_GATING", default=0))
        BUS_CLK_GATING_REG3.register(1, 1, Datapoint("TWI1_GATING", default=0))
        BUS_CLK_GATING_REG3.register(0, 1, Datapoint("TWI0_GATING", default=0))
        BUS_CLK_GATING_REG3.register(31, 1, Datapoint("SCLK_GATING", default=0))
        BUS_CLK_GATING_REG3.register(24, 2, Datapoint("CLK_SRC_SEL", default=0))
        BUS_CLK_GATING_REG3.register(16, 2, Datapoint("CLK_DIV_RATIO_N", default=0))
        BUS_CLK_GATING_REG3.register(0, 4, Datapoint("CLK_DIV_RATIO_M", default=0))
        NAND_CLK_REG = Reg32("NAND_CLK_REG", 0x0080)
        self.block(NAND_CLK_REG)
        NAND_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=0))
        NAND_CLK_REG.register(24, 2, Datapoint("CLK_SRC_SEL", default=0))
        NAND_CLK_REG.register(16, 2, Datapoint("CLK_DIV_RATIO_N", default=0))
        NAND_CLK_REG.register(0, 4, Datapoint("CLK_DIV_RATIO_M", default=0))
        SDMMC0_CLK_REG = Reg32("SDMMC0_CLK_REG", 0x0088)
        self.block(SDMMC0_CLK_REG)
        SDMMC0_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=0))
        SDMMC0_CLK_REG.register(24, 2, Datapoint("CLK_SRC_SEL", default=0))
        SDMMC0_CLK_REG.register(20, 3, Datapoint("SAMPLE_CLK_PHASE_CTR", default=0))
        SDMMC0_CLK_REG.register(16, 2, Datapoint("CLK_DIV_RATIO_N", default=0))
        SDMMC0_CLK_REG.register(8, 3, Datapoint("OUTPUT_CLK_PHASE_CTR", default=0))
        SDMMC0_CLK_REG.register(0, 4, Datapoint("CLK_DIV_RATIO_M", default=0))
        SDMMC1_CLK_REG = Reg32("SDMMC1_CLK_REG", 0x008C)
        self.block(SDMMC1_CLK_REG)
        SDMMC1_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=0))
        SDMMC1_CLK_REG.register(24, 2, Datapoint("CLK_SRC_SEL", default=0))
        SDMMC1_CLK_REG.register(20, 3, Datapoint("SAMPLE_CLK_PHASE_CTR", default=0))
        SDMMC1_CLK_REG.register(16, 2, Datapoint("CLK_DIV_RATIO_N", default=0))
        SDMMC1_CLK_REG.register(8, 3, Datapoint("OUTPUT_CLK_PHASE_CTR", default=0))
        SDMMC1_CLK_REG.register(0, 4, Datapoint("CLK_DIV_RATIO_M", default=0))
        SDMMC2_CLK_REG = Reg32("SDMMC2_CLK_REG", 0x0090)
        self.block(SDMMC2_CLK_REG)
        SDMMC2_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=0))
        SDMMC2_CLK_REG.register(30, 1, Datapoint("MMC2_MODE_SELECT", default=0))
        SDMMC2_CLK_REG.register(24, 2, Datapoint("CLK_SRC_SEL", default=0))
        SDMMC2_CLK_REG.register(20, 3, Datapoint("CLK_PHASE_CTR", default=0))
        SDMMC2_CLK_REG.register(16, 2, Datapoint("CLK_DIV_RATIO_N", default=0))
        SDMMC2_CLK_REG.register(8, 3, Datapoint("OUTPUT_CLK_PHASE_CTR", default=0))
        SDMMC2_CLK_REG.register(0, 4, Datapoint("CLK_DIV_RATIO_M", default=0))
        SS_CLK_REG = Reg32("SS_CLK_REG", 0x009C)
        self.block(SS_CLK_REG)
        SS_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=0))
        SS_CLK_REG.register(24, 2, Datapoint("CLK_SRC_SEL", default=0))
        SS_CLK_REG.register(16, 2, Datapoint("CLK_DIV_RATIO_N", default=0))
        SS_CLK_REG.register(0, 4, Datapoint("CLK_DIV_RATIO_M", default=0))
        SPI0_CLK_REG = Reg32("SPI0_CLK_REG", 0x00A0)
        self.block(SPI0_CLK_REG)
        SPI0_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=0))
        SPI0_CLK_REG.register(24, 2, Datapoint("CLK_SRC_SEL", default=0))
        SPI0_CLK_REG.register(16, 2, Datapoint("CLK_DIV_RATIO_N", default=0))
        SPI0_CLK_REG.register(0, 4, Datapoint("CLK_DIV_RATIO_M", default=0))
        SPI1_CLK_REG = Reg32("SPI1_CLK_REG", 0x00A4)
        self.block(SPI1_CLK_REG)
        SPI1_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=0))
        SPI1_CLK_REG.register(24, 2, Datapoint("CLK_SRC_SEL", default=0))
        SPI1_CLK_REG.register(16, 2, Datapoint("CLK_DIV_RATIO_N", default=0))
        SPI1_CLK_REG.register(0, 4, Datapoint("CLK_DIV_RATIO_M", default=0))
        DAUDIO0_CLK_REG = Reg32("DAUDIO0_CLK_REG", 0x00B0)
        self.block(DAUDIO0_CLK_REG)
        DAUDIO0_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=0))
        DAUDIO0_CLK_REG.register(16, 2, Datapoint("CLK_SRC_SEL", default=0))
        DAUDIO1_CLK_REG = Reg32("DAUDIO1_CLK_REG", 0x00B4)
        self.block(DAUDIO1_CLK_REG)
        DAUDIO1_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=0))
        DAUDIO1_CLK_REG.register(16, 2, Datapoint("CLK_SRC_SEL", default=0))
        USBPHY_CFG_REG = Reg32("USBPHY_CFG_REG", 0x00CC)
        self.block(USBPHY_CFG_REG)
        USBPHY_CFG_REG.register(16, 1, Datapoint("SCLK_GATING_OHCI", default=0))
        USBPHY_CFG_REG.register(9, 1, Datapoint("SCLK_GATING_USBPHY1", default=0))
        USBPHY_CFG_REG.register(8, 1, Datapoint("SCLK_GATING_USBPHY0", default=0))
        USBPHY_CFG_REG.register(1, 1, Datapoint("USBPHY1_RST", default=0))
        USBPHY_CFG_REG.register(0, 1, Datapoint("USBPHY0_RST", default=0))
        USBPHY_CFG_REG.register(31, 1, Datapoint("DRAM_CTR_RST", default=0))
        USBPHY_CFG_REG.register(16, 1, Datapoint("SDRCLK_UPD", default=0))
        USBPHY_CFG_REG.register(0, 4, Datapoint("DRAM_DIV_M", default=1))
        USBPHY_CFG_REG.register(16, 1, Datapoint("PLL_DDR_SRC_SELECT", default=0))
        USBPHY_CFG_REG.register(12, 1, Datapoint("PLL_DDR1_MODE", default=0))
        USBPHY_CFG_REG.register(4, 3, Datapoint("PLL_DDR1_PHASE_COMPENSATE", default=3))
        USBPHY_CFG_REG.register(0, 4, Datapoint("PLL_DDR1_STEP", default=0))
        USBPHY_CFG_REG.register(31, 1, Datapoint("MBUS_RESET", default=1))
        DRAM_CFG_REG = Reg32("DRAM_CFG_REG", 0X00F4)
        self.block(DRAM_CFG_REG)
        DRAM_CFG_REG.register(31, 1, Datapoint("DRAM_CTR_RST", default=0))
        DRAM_CFG_REG.register(16, 1, Datapoint("SDRCLK_UPD", default=0))
        DRAM_CFG_REG.register(0, 4, Datapoint("DRAM_DIV_M", default=1))
        PLL_DDR_CFG_REG = Reg32("PLL_DDR_CFG_REG", 0X00F8)
        self.block(PLL_DDR_CFG_REG)
        PLL_DDR_CFG_REG.register(16, 1, Datapoint("PLL_DDR_SRC_SELECT", default=0))
        PLL_DDR_CFG_REG.register(12, 1, Datapoint("PLL_DDR1_MODE", default=0))
        PLL_DDR_CFG_REG.register(4, 3, Datapoint("PLL_DDR1_PHASE_COMPENSATE", default=3))
        PLL_DDR_CFG_REG.register(0, 4, Datapoint("PLL_DDR1_STEP", default=0))
        MBUS_RST_REG = Reg32("MBUS_RST_REG", 0X00FC)
        self.block(MBUS_RST_REG)
        MBUS_RST_REG.register(31, 1, Datapoint("MBUS_RESET", default=1))
        DRAM_CLK_GATING_REG = Reg32("DRAM_CLK_GATING_REG", 0x0100)
        self.block(DRAM_CLK_GATING_REG)
        DRAM_CLK_GATING_REG.register(26, 1, Datapoint("BE_DCLK_GATING", default=0))
        DRAM_CLK_GATING_REG.register(24, 1, Datapoint("FE_DCLK_GATING", default=0))
        DRAM_CLK_GATING_REG.register(16, 1, Datapoint("DRC_DCLK_GATING", default=0))
        DRAM_CLK_GATING_REG.register(1, 1, Datapoint("CSI_DCLK_GATING", default=0))
        DRAM_CLK_GATING_REG.register(0, 1, Datapoint("VE_DCLK_GATING", default=0))
        BE_CLK_REG = Reg32("BE_CLK_REG", 0X0104)
        self.block(BE_CLK_REG)
        BE_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=0))
        BE_CLK_REG.register(24, 3, Datapoint("CLK_SRC_SEL", default=0))
        BE_CLK_REG.register(0, 4, Datapoint("CLK_DIV_RATIO_M", default=0))
        FE_CLK_REG = Reg32("FE_CLK_REG", 0X010C)
        self.block(FE_CLK_REG)
        FE_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=0))
        FE_CLK_REG.register(24, 3, Datapoint("CLK_SRC_SEL", default=0))
        FE_CLK_REG.register(0, 4, Datapoint("CLK_DIV_RATIO_M", default=0))
        LCD_CH0_CLK_REG = Reg32("LCD_CH0_CLK_REG", 0X0118)
        self.block(LCD_CH0_CLK_REG)
        LCD_CH0_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=0))
        LCD_CH0_CLK_REG.register(24, 3, Datapoint("CLK_SRC_SEL", default=0))
        LCD_CH1_CLK_REG = Reg32("LCD_CH1_CLK_REG", 0X012C)
        self.block(LCD_CH1_CLK_REG)
        LCD_CH1_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=0))
        LCD_CH1_CLK_REG.register(24, 2, Datapoint("SCLK_SEL", default=0))
        LCD_CH1_CLK_REG.register(0, 4, Datapoint("CLK_DIV_RATIO_M", default=0))
        CSI_CLK_REG = Reg32("CSI_CLK_REG", 0x0134)
        self.block(CSI_CLK_REG)
        CSI_CLK_REG.register(31, 1, Datapoint("CSI_SCLK_GATING", default=0))
        CSI_CLK_REG.register(24, 3, Datapoint("SCLK_SRC_SEL", default=0))
        CSI_CLK_REG.register(16, 4, Datapoint("CSI_SCLK_DIV_M", default=0))
        CSI_CLK_REG.register(15, 1, Datapoint("CSI_MCLK_GATING", default=0))
        CSI_CLK_REG.register(8, 3, Datapoint("MCLK_SRC_SEL", default=0))
        CSI_CLK_REG.register(0, 5, Datapoint("CSI_MCLK_DIV_M", default=0))
        VE_CLK_REG = Reg32("VE_CLK_REG", 0X013C)
        self.block(VE_CLK_REG)
        VE_CLK_REG.register(31, 1, Datapoint("VE_SCLK_GATING", default=0))
        VE_CLK_REG.register(16, 3, Datapoint("CLK_DIV_RATIO_N", default=0))
        ADDA_DIG_CLK_REG = Reg32("ADDA_DIG_CLK_REG", 0X0140)
        self.block(ADDA_DIG_CLK_REG)
        ADDA_DIG_CLK_REG.register(31, 1, Datapoint("SCLK_1X_GATING", default=0))
        ADDA_DIG_CLK_REG.register(30, 1, Datapoint("SCLK_4X_GATING", default=0))
        AVS_CLK_REG = Reg32("AVS_CLK_REG", 0X0144)
        self.block(AVS_CLK_REG)
        AVS_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=0))
        MBUS_CLK_REG = Reg32("MBUS_CLK_REG", 0X015C)
        self.block(MBUS_CLK_REG)
        MBUS_CLK_REG.register(31, 1, Datapoint("MBUS_SCLK_GATING", default=0))
        MBUS_CLK_REG.register(24, 2, Datapoint("MBUS_SCLK_SRC", default=0))
        MBUS_CLK_REG.register(0, 3, Datapoint("MBUS_SCLK_RATIO_M", default=0))
        MIPI_DSI_CLK_REG = Reg32("MIPI_DSI_CLK_REG", 0x0168)
        self.block(MIPI_DSI_CLK_REG)
        MIPI_DSI_CLK_REG.register(31, 1, Datapoint("DSI_SCLK_GATING", default=0))
        MIPI_DSI_CLK_REG.register(24, 2, Datapoint("DSI_SCLK_SRC_SEL", default=0))
        MIPI_DSI_CLK_REG.register(16, 4, Datapoint("DSI_SCLK_DIV_M", default=0))
        MIPI_DSI_CLK_REG.register(15, 1, Datapoint("DSI_DPHY_GATING", default=0))
        MIPI_DSI_CLK_REG.register(8, 2, Datapoint("DSI_DPHY_SRC_SEL", default=0))
        MIPI_DSI_CLK_REG.register(0, 4, Datapoint("DPHY_CLK_DIV_M", default=0))
        DRC_CLK_REG = Reg32("DRC_CLK_REG", 0X0180)
        self.block(DRC_CLK_REG)
        DRC_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=0))
        DRC_CLK_REG.register(24, 3, Datapoint("CLK_SRC_SEL", default=0))
        DRC_CLK_REG.register(0, 4, Datapoint("CLK_DIV_RATIO_M", default=0))
        GPU_CLK_REG = Reg32("GPU_CLK_REG", 0x01A0)
        self.block(GPU_CLK_REG)
        GPU_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=0))
        GPU_CLK_REG.register(0, 3, Datapoint("CLK_DIV_RATIO_N", default=0))
        ATS_CLK_REG = Reg32("ATS_CLK_REG", 0X01B0)
        self.block(ATS_CLK_REG)
        ATS_CLK_REG.register(31, 1, Datapoint("SCLK_GATING", default=1))
        ATS_CLK_REG.register(24, 2, Datapoint("CLK_SRC_SEL", default=0))
        ATS_CLK_REG.register(0, 3, Datapoint("CLK_DIV_RATIO_M", default=0))
        PLL_STABLE_TIME_REG0 = Reg32("PLL_STABLE_TIME_REG0", 0x0200)
        self.block(PLL_STABLE_TIME_REG0)
        PLL_STABLE_TIME_REG0.register(31, 1, Datapoint("VCO_RST", default=0))
        PLL_STABLE_TIME_REG0.register(28, 1, Datapoint("EXG_MODE", default=0))
        PLL_STABLE_TIME_REG0.register(24, 4, Datapoint("PLL_VCO_BIAS_CTRL", default=8))
        PLL_STABLE_TIME_REG0.register(16, 5, Datapoint("PLL_BIAS_CUR_CTRL", default=16))
        PLL_STABLE_TIME_REG0.register(8, 3, Datapoint("PLL_LOCK_CTRL", default=2))
        PLL_STABLE_TIME_REG0.register(0, 4, Datapoint("PLL_DAMP_FACT_CTRL", default=0))
        PLL_AUDIO_BIAS_REG = Reg32("PLL_AUDIO_BIAS_REG", 0x0224)
        self.block(PLL_AUDIO_BIAS_REG)
        PLL_AUDIO_BIAS_REG.register(24, 5, Datapoint("PLL_VCO_BIAS", default=16))
        PLL_AUDIO_BIAS_REG.register(16, 5, Datapoint("PLL_BIAS_CUR", default=16))
        PLL_VIDEO_BIAS_REG = Reg32("PLL_VIDEO_BIAS_REG", 0x0228)
        self.block(PLL_VIDEO_BIAS_REG)
        PLL_VIDEO_BIAS_REG.register(24, 5, Datapoint("PLL_VCO_BIAS_CTRL", default=16))
        PLL_VIDEO_BIAS_REG.register(16, 5, Datapoint("PLL_BIAS_CTRL", default=16))
        PLL_VIDEO_BIAS_REG.register(0, 3, Datapoint("PLL_DAMP_FACTOR_CTRL", default=0))
        PLL_VE_BIAS_REG = Reg32("PLL_VE_BIAS_REG", 0x022C)
        self.block(PLL_VE_BIAS_REG)
        PLL_VE_BIAS_REG.register(24, 5, Datapoint("PLL_VCO_BIAS_CTRL", default=16))
        PLL_VE_BIAS_REG.register(16, 5, Datapoint("PLL_BIAS_CTRL", default=16))
        PLL_VE_BIAS_REG.register(0, 3, Datapoint("PLL_DAMP_FACTOR_CTRL", default=0))
        PLL_DDR0_BIAS_REG = Reg32("PLL_DDR0_BIAS_REG", 0x0230)
        self.block(PLL_DDR0_BIAS_REG)
        PLL_DDR0_BIAS_REG.register(28, 4, Datapoint("PLL_VCO_BIAS", default=8))
        PLL_DDR0_BIAS_REG.register(25, 1, Datapoint("PLL_VCO_GAIN_CTRL_EN", default=0))
        PLL_DDR0_BIAS_REG.register(24, 1, Datapoint("PLL_BANDW_CTRL", default=1))
        PLL_DDR0_BIAS_REG.register(16, 5, Datapoint("PLL_BIAS_CUR_CTRL", default=16))
        PLL_DDR0_BIAS_REG.register(12, 3, Datapoint("PLL_VCO_GAIN_CTRL", default=4))
        PLL_DDR0_BIAS_REG.register(0, 4, Datapoint("PLL_DAMP_FACTOR_CTRL", default=0))
        PLL_PERIPH_BIAS_REG = Reg32("PLL_PERIPH_BIAS_REG", 0x0234)
        self.block(PLL_PERIPH_BIAS_REG)
        PLL_PERIPH_BIAS_REG.register(24, 5, Datapoint("PLL_VCO_BIAS", default=16))
        PLL_PERIPH_BIAS_REG.register(16, 5, Datapoint("PLL_BIAS_CUR_CTRL", default=16))
        PLL_PERIPH_BIAS_REG.register(4, 1, Datapoint("PLL_BANDW_CTRL", default=1))
        PLL_PERIPH_BIAS_REG.register(0, 2, Datapoint("PLL_DAMP_FACTOR_CTRL", default=0))
        PLL_GPU_BIAS_REG = Reg32("PLL_GPU_BIAS_REG", 0x023C)
        self.block(PLL_GPU_BIAS_REG)
        PLL_GPU_BIAS_REG.register(24, 5, Datapoint("PLL_VCO_BIAS_CTRL", default=16))
        PLL_GPU_BIAS_REG.register(16, 5, Datapoint("PLL_BIAS_CTRL", default=16))
        PLL_GPU_BIAS_REG.register(0, 3, Datapoint("PLL_DAMP_FACTOR_CTRL", default=0))
        PLL_MIPI_BIAS_REG = Reg32("PLL_MIPI_BIAS_REG", 0x0240)
        self.block(PLL_MIPI_BIAS_REG)
        PLL_MIPI_BIAS_REG.register(31, 1, Datapoint("VCO_RST", default=1))
        PLL_MIPI_BIAS_REG.register(28, 3, Datapoint("PLLVDD_LDO_OUT_CTRL", default=2))
        PLL_MIPI_BIAS_REG.register(24, 4, Datapoint("PLL_VCO_BIAS_CTRL", default=8))
        PLL_MIPI_BIAS_REG.register(16, 5, Datapoint("PLL_BIAS_CUR_CTRL", default=16))
        PLL_MIPI_BIAS_REG.register(8, 3, Datapoint("PLL_LOCK_CTRL", default=4))
        PLL_MIPI_BIAS_REG.register(0, 1, Datapoint("PLL_DAMP_FACT_CTRL", default=0))
        PLL_HSIC_BIAS_REG = Reg32("PLL_HSIC_BIAS_REG", 0x0244)
        self.block(PLL_HSIC_BIAS_REG)
        PLL_HSIC_BIAS_REG.register(24, 5, Datapoint("PLL_VCO_BIAS_CTRL", default=16))
        PLL_HSIC_BIAS_REG.register(16, 5, Datapoint("PLL_BIAS_CTRL", default=16))
        PLL_HSIC_BIAS_REG.register(0, 3, Datapoint("PLL_DAMP_FACTOR_CTRL", default=0))
        PLL_DE_BIAS_REG = Reg32("PLL_DE_BIAS_REG", 0x0248)
        self.block(PLL_DE_BIAS_REG)
        PLL_DE_BIAS_REG.register(24, 5, Datapoint("PLL_VCO_BIAS_CTRL", default=16))
        PLL_DE_BIAS_REG.register(16, 5, Datapoint("PLL_BIAS_CTRL", default=16))
        PLL_DE_BIAS_REG.register(0, 3, Datapoint("PLL_DAMP_FACTOR_CTRL", default=0))
        PLL_DDR1_BIAS_REG = Reg32("PLL_DDR1_BIAS_REG", 0x024C)
        self.block(PLL_DDR1_BIAS_REG)
        PLL_DDR1_BIAS_REG.register(24, 5, Datapoint("PLL_VCO_BIAS_CTRL", default=16))
        PLL_DDR1_BIAS_REG.register(16, 5, Datapoint("PLL_BIAS_CUR_CTRL", default=1))
        PLL_CPUX_TUN_REG = Reg32("PLL_CPUX_TUN_REG", 0x0250)
        self.block(PLL_CPUX_TUN_REG)
        PLL_CPUX_TUN_REG.register(27, 1, Datapoint("PLL_BAND_WID_CTRL", default=1))
        PLL_CPUX_TUN_REG.register(26, 1, Datapoint("VCO_GAIN_CTRL_EN", default=0))
        PLL_CPUX_TUN_REG.register(23, 3, Datapoint("VCO_GAIN_CTRL", default=4))
        PLL_CPUX_TUN_REG.register(16, 7, Datapoint("PLL_INIT_FREQ_CTRL", default=16))
        PLL_CPUX_TUN_REG.register(15, 1, Datapoint("C_OD", default=0))
        PLL_CPUX_TUN_REG.register(8, 7, Datapoint("C_B_IN", default=16))
        PLL_CPUX_TUN_REG.register(7, 1, Datapoint("C_OD1", default=0))
        PLL_CPUX_TUN_REG.register(0, 7, Datapoint("C_B_OUT", default=0))
        PLL_DDR0_TUN_REG = Reg32("PLL_DDR0_TUN_REG", 0x0260)
        self.block(PLL_DDR0_TUN_REG)
        PLL_DDR0_TUN_REG.register(28, 1, Datapoint("VREG1_OUT_EN", default=1))
        PLL_DDR0_TUN_REG.register(24, 3, Datapoint("PLL_LTIME_CTRL", default=4))
        PLL_DDR0_TUN_REG.register(23, 1, Datapoint("VCO_RST", default=0))
        PLL_DDR0_TUN_REG.register(16, 7, Datapoint("PLL_INIT_FREQ_CTRL", default=16))
        PLL_DDR0_TUN_REG.register(15, 1, Datapoint("OD1", default=0))
        PLL_DDR0_TUN_REG.register(8, 7, Datapoint("B_IN", default=16))
        PLL_DDR0_TUN_REG.register(7, 1, Datapoint("OD", default=0))
        PLL_DDR0_TUN_REG.register(0, 7, Datapoint("B_OUT", default=0))
        PLL_MIPI_TUN_REG = Reg32("PLL_MIPI_TUN_REG", 0x0270)
        self.block(PLL_MIPI_TUN_REG)
        PLL_MIPI_TUN_REG.register(31, 1, Datapoint("PLL_INPUT_POWER_SEL", default=1))
        PLL_MIPI_TUN_REG.register(28, 2, Datapoint("VREG_OUT_EN", default=0))
        PLL_MIPI_TUN_REG.register(27, 1, Datapoint("PLL_BAND_WID_CTRL", default=1))
        PLL_MIPI_TUN_REG.register(26, 1, Datapoint("VCO_GAIN_CTRL_EN", default=0))
        PLL_MIPI_TUN_REG.register(23, 3, Datapoint("VCO_GAIN_CTRL", default=4))
        PLL_MIPI_TUN_REG.register(16, 6, Datapoint("CNT_INT", default=0))
        PLL_MIPI_TUN_REG.register(15, 1, Datapoint("C_OD", default=0))
        PLL_MIPI_TUN_REG.register(8, 6, Datapoint("C_B_IN", default=32))
        PLL_MIPI_TUN_REG.register(7, 1, Datapoint("C_OD1", default=0))
        PLL_MIPI_TUN_REG.register(0, 6, Datapoint("C_B_OUT", default=0))
        PLL_CPUX_PAT_CTRL_REG = Reg32("PLL_CPUX_PAT_CTRL_REG", 0x0280)
        self.block(PLL_CPUX_PAT_CTRL_REG)
        PLL_CPUX_PAT_CTRL_REG.register(31, 1, Datapoint("SIG_DELT_PAT_EN", default=0))
        PLL_CPUX_PAT_CTRL_REG.register(29, 2, Datapoint("SPR_FREQ_MODE", default=0))
        PLL_CPUX_PAT_CTRL_REG.register(20, 9, Datapoint("WAVE_STEP", default=0))
        PLL_CPUX_PAT_CTRL_REG.register(17, 2, Datapoint("FREQ", default=0))
        PLL_CPUX_PAT_CTRL_REG.register(0, 17, Datapoint("WAVE_BOT", default=0))
        PLL_AUDIO_PAT_CTRL_REG = Reg32("PLL_AUDIO_PAT_CTRL_REG", 0x0284)
        self.block(PLL_AUDIO_PAT_CTRL_REG)
        PLL_AUDIO_PAT_CTRL_REG.register(31, 1, Datapoint("SIG_DELT_PAT_EN", default=0))
        PLL_AUDIO_PAT_CTRL_REG.register(29, 2, Datapoint("SPR_FREQ_MODE", default=0))
        PLL_AUDIO_PAT_CTRL_REG.register(20, 9, Datapoint("WAVE_STEP", default=0))
        PLL_AUDIO_PAT_CTRL_REG.register(17, 2, Datapoint("FREQ", default=0))
        PLL_AUDIO_PAT_CTRL_REG.register(0, 17, Datapoint("WAVE_BOT", default=0))
        PLL_VIDEO_PAT_CTRL_REG = Reg32("PLL_VIDEO_PAT_CTRL_REG", 0x0288)
        self.block(PLL_VIDEO_PAT_CTRL_REG)
        PLL_VIDEO_PAT_CTRL_REG.register(31, 1, Datapoint("SIG_DELT_PAT_EN", default=0))
        PLL_VIDEO_PAT_CTRL_REG.register(29, 2, Datapoint("SPR_FREQ_MODE", default=0))
        PLL_VIDEO_PAT_CTRL_REG.register(20, 9, Datapoint("WAVE_STEP", default=0))
        PLL_VIDEO_PAT_CTRL_REG.register(17, 2, Datapoint("FREQ", default=0))
        PLL_VIDEO_PAT_CTRL_REG.register(0, 17, Datapoint("WAVE_BOT", default=0))
        PLL_VE_PAT_CTRL_REG = Reg32("PLL_VE_PAT_CTRL_REG", 0x028C)
        self.block(PLL_VE_PAT_CTRL_REG)
        PLL_VE_PAT_CTRL_REG.register(31, 1, Datapoint("SIG_DELT_PAT_EN", default=0))
        PLL_VE_PAT_CTRL_REG.register(29, 2, Datapoint("SPR_FREQ_MODE", default=0))
        PLL_VE_PAT_CTRL_REG.register(20, 9, Datapoint("WAVE_STEP", default=0))
        PLL_VE_PAT_CTRL_REG.register(17, 2, Datapoint("FREQ", default=0))
        PLL_VE_PAT_CTRL_REG.register(0, 17, Datapoint("WAVE_BOT", default=0))
        PLL_DDR0_PAT_CTRL_REG = Reg32("PLL_DDR0_PAT_CTRL_REG", 0x0290)
        self.block(PLL_DDR0_PAT_CTRL_REG)
        PLL_DDR0_PAT_CTRL_REG.register(31, 1, Datapoint("SIG_DELT_PAT_EN", default=0))
        PLL_DDR0_PAT_CTRL_REG.register(29, 2, Datapoint("SPR_FREQ_MODE", default=0))
        PLL_DDR0_PAT_CTRL_REG.register(20, 9, Datapoint("WAVE_STEP", default=0))
        PLL_DDR0_PAT_CTRL_REG.register(17, 2, Datapoint("FREQ", default=0))
        PLL_DDR0_PAT_CTRL_REG.register(0, 17, Datapoint("WAVE_BOT", default=0))
        PLL_GPU_PAT_CTRL_REG = Reg32("PLL_GPU_PAT_CTRL_REG", 0x029C)
        self.block(PLL_GPU_PAT_CTRL_REG)
        PLL_GPU_PAT_CTRL_REG.register(31, 1, Datapoint("SIG_DELT_PAT_EN", default=0))
        PLL_GPU_PAT_CTRL_REG.register(29, 2, Datapoint("SPR_FREQ_MODE", default=0))
        PLL_GPU_PAT_CTRL_REG.register(20, 9, Datapoint("WAVE_STEP", default=0))
        PLL_GPU_PAT_CTRL_REG.register(17, 2, Datapoint("FREQ", default=0))
        PLL_GPU_PAT_CTRL_REG.register(0, 17, Datapoint("WAVE_BOT", default=0))
        PLL_MIPI_PAT_CTRL_REG = Reg32("PLL_MIPI_PAT_CTRL_REG", 0x02A0)
        self.block(PLL_MIPI_PAT_CTRL_REG)
        PLL_MIPI_PAT_CTRL_REG.register(31, 1, Datapoint("SIG_DELT_PAT_EN", default=0))
        PLL_MIPI_PAT_CTRL_REG.register(29, 2, Datapoint("SPR_FREQ_MODE", default=0))
        PLL_MIPI_PAT_CTRL_REG.register(20, 9, Datapoint("WAVE_STEP", default=0))
        PLL_MIPI_PAT_CTRL_REG.register(17, 2, Datapoint("FREQ", default=0))
        PLL_MIPI_PAT_CTRL_REG.register(0, 17, Datapoint("WAVE_BOT", default=0))
        PLL_HSIC_PAT_CTRL_REG = Reg32("PLL_HSIC_PAT_CTRL_REG", 0x02A4)
        self.block(PLL_HSIC_PAT_CTRL_REG)
        PLL_HSIC_PAT_CTRL_REG.register(31, 1, Datapoint("SIG_DELT_PAT_EN", default=0))
        PLL_HSIC_PAT_CTRL_REG.register(29, 2, Datapoint("SPR_FREQ_MODE", default=0))
        PLL_HSIC_PAT_CTRL_REG.register(20, 9, Datapoint("WAVE_STEP", default=0))
        PLL_HSIC_PAT_CTRL_REG.register(17, 2, Datapoint("FREQ", default=0))
        PLL_HSIC_PAT_CTRL_REG.register(0, 17, Datapoint("WAVE_BOT", default=0))
        PLL_DE_PAT_CTRL_REG = Reg32("PLL_DE_PAT_CTRL_REG", 0x02A8)
        self.block(PLL_DE_PAT_CTRL_REG)
        PLL_DE_PAT_CTRL_REG.register(31, 1, Datapoint("SIG_DELT_PAT_EN", default=0))
        PLL_DE_PAT_CTRL_REG.register(29, 2, Datapoint("SPR_FREQ_MODE", default=0))
        PLL_DE_PAT_CTRL_REG.register(20, 9, Datapoint("WAVE_STEP", default=0))
        PLL_DE_PAT_CTRL_REG.register(17, 2, Datapoint("FREQ", default=0))
        PLL_DE_PAT_CTRL_REG.register(0, 17, Datapoint("WAVE_BOT", default=0))
        PLL_DDR1_PAT_CTRL_REG0 = Reg32("PLL_DDR1_PAT_CTRL_REG0", 0x02AC)
        self.block(PLL_DDR1_PAT_CTRL_REG0)
        PLL_DDR1_PAT_CTRL_REG0.register(31, 1, Datapoint("SIG_DELT_PAT_EN", default=0))
        PLL_DDR1_PAT_CTRL_REG0.register(29, 2, Datapoint("SPR_FREQ_MODE", default=0))
        PLL_DDR1_PAT_CTRL_REG0.register(20, 9, Datapoint("WAVE_STEP", default=0))
        PLL_DDR1_PAT_CTRL_REG0.register(17, 2, Datapoint("FREQ", default=0))
        PLL_DDR1_PAT_CTRL_REG0.register(0, 17, Datapoint("WAVE_BOT", default=0))
        PLL_DDR1_PAT_CTRL_REG1 = Reg32("PLL_DDR1_PAT_CTRL_REG1", 0x02B0)
        self.block(PLL_DDR1_PAT_CTRL_REG1)
        PLL_DDR1_PAT_CTRL_REG1.register(24, 1, Datapoint("DITHER_EN", default=0))
        PLL_DDR1_PAT_CTRL_REG1.register(20, 1, Datapoint("FRAC_EN", default=0))
        PLL_DDR1_PAT_CTRL_REG1.register(0, 17, Datapoint("FRAC_IN", default=0))
        BUS_SOFT_RST_REG0 = Reg32("BUS_SOFT_RST_REG0", 0x02C0)
        self.block(BUS_SOFT_RST_REG0)
        BUS_SOFT_RST_REG0.register(29, 1, Datapoint("USBOHCI_RST", default=0))
        BUS_SOFT_RST_REG0.register(26, 1, Datapoint("USBEHCI_RST", default=0))
        BUS_SOFT_RST_REG0.register(24, 1, Datapoint("USBDRD_RST", default=0))
        BUS_SOFT_RST_REG0.register(21, 1, Datapoint("SPI1_RST", default=0))
        BUS_SOFT_RST_REG0.register(20, 1, Datapoint("SPI0_RST", default=0))
        BUS_SOFT_RST_REG0.register(19, 1, Datapoint("HSTMR_RST", default=0))
        BUS_SOFT_RST_REG0.register(14, 1, Datapoint("SDRAM_RST", default=0))
        BUS_SOFT_RST_REG0.register(13, 1, Datapoint("NAND_RST", default=0))
        BUS_SOFT_RST_REG0.register(10, 1, Datapoint("SD2_RST", default=0))
        BUS_SOFT_RST_REG0.register(9, 1, Datapoint("SD1_RST", default=0))
        BUS_SOFT_RST_REG0.register(8, 1, Datapoint("SD0_RST", default=0))
        BUS_SOFT_RST_REG0.register(6, 1, Datapoint("DMA_RST", default=0))
        BUS_SOFT_RST_REG0.register(5, 1, Datapoint("SS_RST", default=0))
        BUS_SOFT_RST_REG0.register(1, 1, Datapoint("MIPI_DSI_RST", default=0))
        BUS_SOFT_RST_REG1 = Reg32("BUS_SOFT_RST_REG1", 0x02C4)
        self.block(BUS_SOFT_RST_REG1)
        BUS_SOFT_RST_REG1.register(26, 1, Datapoint("SAT_RST", default=0))
        BUS_SOFT_RST_REG1.register(25, 1, Datapoint("DRC_RST", default=0))
        BUS_SOFT_RST_REG1.register(22, 1, Datapoint("SPINLOCK_RST", default=0))
        BUS_SOFT_RST_REG1.register(21, 1, Datapoint("MSGBOX_RST", default=0))
        BUS_SOFT_RST_REG1.register(20, 1, Datapoint("GPU_RST", default=0))
        BUS_SOFT_RST_REG1.register(14, 1, Datapoint("FE_RST", default=0))
        BUS_SOFT_RST_REG1.register(12, 1, Datapoint("BE_RST", default=0))
        BUS_SOFT_RST_REG1.register(8, 1, Datapoint("CSI_RST", default=0))
        BUS_SOFT_RST_REG1.register(4, 1, Datapoint("LCD_RST", default=0))
        BUS_SOFT_RST_REG1.register(0, 1, Datapoint("VE_RST", default=0))
        BUS_SOFT_RST_REG2 = Reg32("BUS_SOFT_RST_REG2", 0x02C8)
        self.block(BUS_SOFT_RST_REG2)
        BUS_SOFT_RST_REG2.register(0, 1, Datapoint("LVDS_RST", default=0))
        BUS_SOFT_RST_REG3 = Reg32("BUS_SOFT_RST_REG3", 0x02D0)
        self.block(BUS_SOFT_RST_REG3)
        BUS_SOFT_RST_REG3.register(13, 1, Datapoint("DAUDIO1_RST", default=0))
        BUS_SOFT_RST_REG3.register(12, 1, Datapoint("DAUDIO0_RST", default=0))
        BUS_SOFT_RST_REG3.register(0, 1, Datapoint("ADDA_RST", default=0))
        BUS_SOFT_RST_REG4 = Reg32("BUS_SOFT_RST_REG4", 0x02D8)
        self.block(BUS_SOFT_RST_REG4)
        BUS_SOFT_RST_REG4.register(20, 1, Datapoint("UART4_RST", default=0))
        BUS_SOFT_RST_REG4.register(19, 1, Datapoint("UART3_RST", default=0))
        BUS_SOFT_RST_REG4.register(18, 1, Datapoint("UART2_RST", default=0))
        BUS_SOFT_RST_REG4.register(17, 1, Datapoint("UART1_RST", default=0))
        BUS_SOFT_RST_REG4.register(16, 1, Datapoint("UART0_RST", default=0))
        BUS_SOFT_RST_REG4.register(2, 1, Datapoint("TWI2_RST", default=0))
        BUS_SOFT_RST_REG4.register(1, 1, Datapoint("TWI1_RST", default=0))
        BUS_SOFT_RST_REG4.register(0, 1, Datapoint("TWI0_RST", default=0))
        # cpu clock
        PLL_CPUX_CTRL_REG.register(None, None, ClockPoint_NKMP(PLL_CPUX_CTRL_REG,
                                                               "PLL_FACTOR_N",
                                                               "PLL_FACTOR_K",
                                                               "PLL_FACTOR_M",
                                                               "PLL_OUT_EXT_DIV_P",
                                                               True))
        # audio clock
        PLL_AUDIO_CTRL_REG.register(None, None, ClockPoint_NKMP(PLL_AUDIO_CTRL_REG,
                                                                N="PLL_FACTOR_N",
                                                                M="PLL_PREDIV_M",
                                                                P="PLL_POSTDIV_P"))
        # video clock
        PLL_VIDEO_CTRL_REG.register(None, None, ClockPoint_NKMP(PLL_VIDEO_CTRL_REG,
                                                                N="PLL_FACTOR_N",
                                                                M="PLL_PREDIV_M"))
        # video engine clock
        PLL_VE_CTRL_REG.register(None, None, ClockPoint_NKMP(PLL_VE_CTRL_REG,
                                                             N="PLL_FACTOR_N",
                                                             M="PLL_PREDIV_M"))
        # ddr0 clock
        PLL_DDR0_CTRL_REG.register(None, None, ClockPoint_NKMP(PLL_DDR0_CTRL_REG,
                                                               N="PLL_FACTOR_N",
                                                               K="PLL_FACTOR_K",
                                                               M="PLL_FACTOR_M"))
        # periphreal clock
        PLL_PERIPH_CTRL_REG.register(None, None, ClockPoint_NKMP(PLL_PERIPH_CTRL_REG,
                                                               N="PLL_FACTOR_N",
                                                               K="PLL_FACTOR_K",
                                                               factor=0.5))
        # gpu clock
        PLL_GPU_CTRL_REG.register(None, None, ClockPoint_NKMP(PLL_GPU_CTRL_REG,
                                                               N="PLL_FACTOR_N",
                                                               M="PLL_PRE_DIV_M",
                                                               factor=0.5))
        # mipi clock
        PLL_MIPI_CTRL_REG.register(None, None, ClockPoint_NKMP(PLL_MIPI_CTRL_REG,
                                                               N="PLL_FACTOR_N",
                                                               K="PLL_FACTOR_K",
                                                               M="PLL_PRE_DIV_M"))
        # hsic
        PLL_HSIC_CTRL_REG.register(None, None, ClockPoint_NKMP(PLL_HSIC_CTRL_REG,
                                                               N="PLL_FACTOR_N",
                                                               M="PLL_PRE_DIV_M"))
        # ddr1 clock
        PLL_DDR1_CTRL_REG.register(None, None, ClockPoint_NKMP(PLL_DDR1_CTRL_REG,
                                                               N="PLL_FACTOR_N"))


class CPUCFG(Device):
    def __init__(self, start=0x01F01C00):
        super(CPUCFG, self).__init__("CPUCFG" , start)
        CPU0_RST_CTRL = Reg32("CPU0_RST_CTRL", 0x40)
        self.block(CPU0_RST_CTRL)
        CPU0_RST_CTRL.register(1, 1, Datapoint("CPU0_CORE_REST", default=1))
        CPU0_RST_CTRL.register(0, 1, Datapoint("CPU0_RESET", default=1))
        CPU0_CTRL_REG = Reg32("CPU0_CTRL_REG", 0x44)
        self.block(CPU0_CTRL_REG)
        CPU0_CTRL_REG.register(0, 1, Datapoint("CPU0_CP15_WRITE_DISABLE", default=0))
        CPU0_STATUS = Reg32("CPU0_STATUS", 0x48)
        self.block(CPU0_STATUS)
        CPU0_STATUS.register(2, 1, Datapoint("STANDBYWFI", default=0))
        CPU0_STATUS.register(1, 1, Datapoint("STANDBYWFE", default=0))
        CPU0_STATUS.register(0, 1, Datapoint("SMP_AMP", default=0))
        CPU1_RST_CTRL = Reg32("CPU1_RST_CTRL", 0x80)
        self.block(CPU1_RST_CTRL)
        CPU1_RST_CTRL.register(1, 1, Datapoint("CPU1_CORE_REST", default=0))
        CPU1_RST_CTRL.register(0, 1, Datapoint("CPU1_RESET", default=1))
        CPU1_CTRL_REG = Reg32("CPU1_CTRL_REG", 0x84)
        self.block(CPU1_CTRL_REG)
        CPU1_CTRL_REG.register(0, 1, Datapoint("CPU1_CP15_WRITE_DISABLE", default=0))
        CPU1_STATUS = Reg32("CPU1_STATUS", 0x88)
        self.block(CPU1_STATUS)
        CPU1_STATUS.register(2, 1, Datapoint("STANDBYWFI", default=0))
        CPU1_STATUS.register(1, 1, Datapoint("STANDBYWFE", default=0))
        CPU1_STATUS.register(0, 1, Datapoint("SMP_AMP", default=0))
        CPU2_RST_CTRL = Reg32("CPU2_RST_CTRL", 0xC0)
        self.block(CPU2_RST_CTRL)
        CPU2_RST_CTRL.register(1, 1, Datapoint("CPU2_CORE_REST", default=0))
        CPU2_RST_CTRL.register(0, 1, Datapoint("CPU2_RESET", default=1))
        CPU2_CTRL_REG = Reg32("CPU2_CTRL_REG", 0xC4)
        self.block(CPU2_CTRL_REG)
        CPU2_CTRL_REG.register(0, 1, Datapoint("CPU2_CP15_WRITE_DISABLE", default=0))
        CPU2_STATUS = Reg32("CPU2_STATUS", 0xC8)
        self.block(CPU2_STATUS)
        CPU2_STATUS.register(2, 1, Datapoint("STANDBYWFI", default=0))
        CPU2_STATUS.register(1, 1, Datapoint("STANDBYWFE", default=0))
        CPU2_STATUS.register(0, 1, Datapoint("SMP_AMP", default=0))
        CPU3_RST_CTRL = Reg32("CPU3_RST_CTRL", 0x100)
        self.block(CPU3_RST_CTRL)
        CPU3_RST_CTRL.register(1, 1, Datapoint("CPU3_CORE_REST", default=0))
        CPU3_RST_CTRL.register(0, 1, Datapoint("CPU3_RESET", default=1))
        CPU3_CTRL_REG = Reg32("CPU3_CTRL_REG", 0x104)
        self.block(CPU3_CTRL_REG)
        CPU3_CTRL_REG.register(0, 1, Datapoint("CPU3_CP15_WRITE_DISABLE", default=0))
        CPU3_STATUS = Reg32("CPU3_STATUS", 0x108)
        self.block(CPU3_STATUS)
        CPU3_STATUS.register(2, 1, Datapoint("STANDBYWFI", default=0))
        CPU3_STATUS.register(1, 1, Datapoint("STANDBYWFE", default=0))
        CPU3_STATUS.register(0, 1, Datapoint("SMP_AMP", default=0))
        CPU_SYS_RST_REG = Reg32("CPU_SYS_RST_REG", 0x140)
        self.block(CPU_SYS_RST_REG)
        CPU_SYS_RST_REG.register(0, 1, Datapoint("CPUSystemResetControl", default=1))
        GENER_CTRL_REG = Reg32("GENER_CTRL_REG", 0x184)
        self.block(GENER_CTRL_REG)
        GENER_CTRL_REG.register(8, 1, Datapoint("CFGSDISABLE", default=0))
        GENER_CTRL_REG.register(6, 1, Datapoint("ACINACTM", default=0))
        GENER_CTRL_REG.register(5, 1, Datapoint("L2_RST", default=1))
        GENER_CTRL_REG.register(4, 1, Datapoint("L2_RST_DISABLE", default=0))
        GENER_CTRL_REG.register(0, 2, Datapoint("L1_RST_DISABLE", default=0))
        EVENT_IN = Reg32("EVENT_IN", 0x190)
        self.block(EVENT_IN)
        EVENT_IN.register(0, 1, Datapoint("EVENT_IN", default=0))
        EVENT_IN.register(2, 1, Datapoint("fromWFEstandby", default=3))
        SUP_STAN_FLAG_REG = Reg32("SUP_STAN_FLAG_REG", 0x1A0)
        self.block(SUP_STAN_FLAG_REG)
        SUP_STAN_FLAG_REG.register(16, 16, Datapoint("SUP_STANDBY_FLAG", default=0))
        SUP_STAN_FLAG_REG.register(0, 16, Datapoint("SUP_STANBY_FLAG_DATA", default=0))
        PRIVATE_REG0 = Reg32("PRIVATE_REG0", 0x1A4)
        self.block(PRIVATE_REG0)
        PRIVATE_REG0.register(0, 32, Datapoint("", default=0))
        PRIVATE_REG1 = Reg32("PRIVATE_REG1", 0x1A8)
        self.block(PRIVATE_REG1)
        PRIVATE_REG1.register(0, 32, Datapoint("", default=0))
        CNT64_CTRL_REG = Reg32("CNT64_CTRL_REG", 0x280)
        self.block(CNT64_CTRL_REG)
        CNT64_CTRL_REG.register(2, 1, Datapoint("CNT64_CLK_SRC_SEL", default=0))
        CNT64_CTRL_REG.register(1, 1, Datapoint("CNT64_RL_EN", default=0))
        CNT64_CTRL_REG.register(0, 1, Datapoint("CNT64_CLR_EN", default=0))
        CNT64_LOW_REG = Reg32("CNT64_LOW_REG", 0x284)
        self.block(CNT64_LOW_REG)
        CNT64_LOW_REG.register(0, 32, Datapoint("CNT64_LO", default=0))
        CNT64_HIGH_REG = Reg32("CNT64_HIGH_REG", 0x288)
        self.block(CNT64_HIGH_REG)
        CNT64_HIGH_REG.register(0, 32, Datapoint("CNT64_HI", default=0))


class Timer(Device):
    def __init__(self, start=0x01C20C00):
        super(Timer, self).__init__("Timer" , start)
        TMR_IRQ_EN_REG = Reg32("TMR_IRQ_EN_REG", 0x0)
        self.block(TMR_IRQ_EN_REG)
        TMR_IRQ_EN_REG.register(1, 1, Datapoint("TMR1_IRQ_EN", default=0))
        TMR_IRQ_EN_REG.register(0, 1, Datapoint("TMR0_IRQ_EN", default=0))
        TMR_IRQ_STA_REG = Reg32("TMR_IRQ_STA_REG", 0x04)
        self.block(TMR_IRQ_STA_REG)
        TMR_IRQ_STA_REG.register(1, 1, Datapoint("TMR1_IRQ_PEND", default=0))
        TMR_IRQ_STA_REG.register(0, 1, Datapoint("TMR0_IRQ_PEND", default=0))
        TMR0_CTRL_REG = Reg32("TMR0_CTRL_REG", 0x10)
        self.block(TMR0_CTRL_REG)
        TMR0_CTRL_REG.register(7, 1, Datapoint("TMR0_MODE", default=0))
        TMR0_CTRL_REG.register(4, 3, Datapoint("TMR0_CLK_PRES", default=0))
        TMR0_CTRL_REG.register(1, 1, Datapoint("", default=2))
        TMR0_CTRL_REG.register(10, 1, Datapoint("", default=4))
        TMR0_CTRL_REG.register(11, 1, Datapoint("", default=8))
        TMR0_CTRL_REG.register(101, 1, Datapoint("", default=50))
        TMR0_CTRL_REG.register(110, 1, Datapoint("", default=100))
        TMR0_CTRL_REG.register(2, 2, Datapoint("TMR0_CLK_SRC", default=1))
        TMR0_CTRL_REG.register(1, 1, Datapoint("TMR0_RELOAD", default=0))
        TMR0_CTRL_REG.register(0, 1, Datapoint("TMR0_EN", default=0))
        TMR0_INTV_VALUE_REG = Reg32("TMR0_INTV_VALUE_REG", 0x14)
        self.block(TMR0_INTV_VALUE_REG)
        TMR0_INTV_VALUE_REG.register(0, 32, Datapoint("TMR0_INTV_VALUE", default=0))
        TMR0_CUR_VALUE_REG = Reg32("TMR0_CUR_VALUE_REG", 0x18)
        self.block(TMR0_CUR_VALUE_REG)
        TMR0_CUR_VALUE_REG.register(0, 32, Datapoint("TMR0_CUR_VALUE", default=0))
        TMR1_CTRL_REG = Reg32("TMR1_CTRL_REG", 0x20)
        self.block(TMR1_CTRL_REG)
        TMR1_CTRL_REG.register(7, 1, Datapoint("TMR1_MODE", default=0))
        TMR1_CTRL_REG.register(4, 3, Datapoint("TMR1_CLK_PRES", default=0))
        TMR1_CTRL_REG.register(1, 1, Datapoint("", default=2))
        TMR1_CTRL_REG.register(10, 1, Datapoint("", default=4))
        TMR1_CTRL_REG.register(11, 1, Datapoint("", default=8))
        TMR1_CTRL_REG.register(101, 1, Datapoint("", default=50))
        TMR1_CTRL_REG.register(110, 1, Datapoint("", default=100))
        TMR1_CTRL_REG.register(2, 2, Datapoint("TMR1_CLK_SRC", default=1))
        TMR1_CTRL_REG.register(1, 1, Datapoint("TMR1_RELOAD", default=0))
        TMR1_CTRL_REG.register(0, 1, Datapoint("TMR1_EN", default=0))
        TMR1_INTV_VALUE_REG = Reg32("TMR1_INTV_VALUE_REG", 0x24)
        self.block(TMR1_INTV_VALUE_REG)
        TMR1_INTV_VALUE_REG.register(0, 32, Datapoint("TMR1_INTV_VALUE", default=0))
        TMR1_CUR_VALUE_REG = Reg32("TMR1_CUR_VALUE_REG", 0x28)
        self.block(TMR1_CUR_VALUE_REG)
        TMR1_CUR_VALUE_REG.register(0, 32, Datapoint("TMR1_CUR_VALUE", default=0))
        AVS_CNT_CTL_REG = Reg32("AVS_CNT_CTL_REG", 0x80)
        self.block(AVS_CNT_CTL_REG)
        AVS_CNT_CTL_REG.register(9, 1, Datapoint("AVS_CNT1_PS", default=0))
        AVS_CNT_CTL_REG.register(8, 1, Datapoint("AVS_CNT0_PS", default=0))
        AVS_CNT_CTL_REG.register(1, 1, Datapoint("AVS_CNT1_EN", default=0))
        AVS_CNT_CTL_REG.register(0, 1, Datapoint("AVS_CNT0_EN", default=0))
        AVS_CNT0_REG = Reg32("AVS_CNT0_REG", 0x84)
        self.block(AVS_CNT0_REG)
        AVS_CNT0_REG.register(0, 32, Datapoint("AVS_CNT0", default=0))
        AVS_CNT1_REG = Reg32("AVS_CNT1_REG", 0x88)
        self.block(AVS_CNT1_REG)
        AVS_CNT1_REG.register(0, 32, Datapoint("AVS_CNT1", default=0))
        AVS_CNT_DIV_REG = Reg32("AVS_CNT_DIV_REG", 0x8C)
        self.block(AVS_CNT_DIV_REG)
        AVS_CNT_DIV_REG.register(16, 12, Datapoint("AVS_CNT1_D", default=1499))
        AVS_CNT_DIV_REG.register(0, 12, Datapoint("AVS_CNT0_D", default=1499))
        WDOG0_IRQ_EN_REG = Reg32("WDOG0_IRQ_EN_REG", 0xA0)
        self.block(WDOG0_IRQ_EN_REG)
        WDOG0_IRQ_EN_REG.register(0, 1, Datapoint("WDOG0_IRQ_EN", default=0))
        WDOG0_IRQ_STA_REG = Reg32("WDOG0_IRQ_STA_REG", 0xA4)
        self.block(WDOG0_IRQ_STA_REG)
        WDOG0_IRQ_STA_REG.register(0, 1, Datapoint("WDOG0_IRQ_PEND", default=0))
        WDOG0_CTRL_REG = Reg32("WDOG0_CTRL_REG", 0xB0)
        self.block(WDOG0_CTRL_REG)
        WDOG0_CTRL_REG.register(0, 1, Datapoint("WDOG0_RSTART", default=0))
        WDOG0_CFG_REG = Reg32("WDOG0_CFG_REG", 0xB4)
        self.block(WDOG0_CFG_REG)
        WDOG0_CFG_REG.register(0, 2, Datapoint("WDOG0_CONFIG", default=1))
        WDOG0_MODE_REG = Reg32("WDOG0_MODE_REG", 0xB8)
        self.block(WDOG0_MODE_REG)
        WDOG0_MODE_REG.register(4, 4, Datapoint("WDOG0_INTV_VALUE", default=0))
        WDOG0_MODE_REG.register(0, 1, Datapoint("WDOG0_EN", default=0))


class PWM(Device):
    def __init__(self, start=0x01C21400):
        super(PWM, self).__init__("PWM" , start)
        PWM_CTRL_REG = Reg32("PWM_CTRL_REG", 0x0)
        self.block(PWM_CTRL_REG)
        PWM_CTRL_REG.register(29, 1, Datapoint("PWM1_RDY", default=0))
        PWM_CTRL_REG.register(28, 1, Datapoint("PWM0_RDY", default=0))
        PWM_CTRL_REG.register(24, 1, Datapoint("PWM1_BYPASS", default=0))
        PWM_CTRL_REG.register(23, 1, Datapoint("PWM_CH1_PULSE_OUT_START", default=0))
        PWM_CTRL_REG.register(22, 1, Datapoint("PWM_CH1_MODE", default=0))
        PWM_CTRL_REG.register(21, 1, Datapoint("PWM_CH1_CLK_GATING", default=0))
        PWM_CTRL_REG.register(20, 1, Datapoint("PWM_CH1_ACT_STATE", default=0))
        PWM_CTRL_REG.register(19, 1, Datapoint("PWM_CH1_EN", default=0))
        PWM_CTRL_REG.register(15, 4, Datapoint("PWM_CH1_PRESCAL", default=0))
        PWM_CTRL_REG.register(10, 1, Datapoint("", default=576))
        PWM_CTRL_REG.register(11, 1, Datapoint("", default=864))
        PWM_CTRL_REG.register(100, 1, Datapoint("", default=1152))
        PWM_CTRL_REG.register(9, 1, Datapoint("PWM0_BYPASS", default=0))
        PWM_CTRL_REG.register(8, 1, Datapoint("PWM_CH0_PUL_START", default=0))
        PWM_CTRL_REG.register(7, 1, Datapoint("PWM_CHANNEL0_MODE", default=0))
        PWM_CTRL_REG.register(6, 1, Datapoint("SCLK_CH0_GATING", default=0))
        PWM_CTRL_REG.register(5, 1, Datapoint("PWM_CH0_ACT_STA", default=0))
        PWM_CTRL_REG.register(4, 1, Datapoint("PWM_CH0_EN", default=0))
        PWM_CTRL_REG.register(0, 4, Datapoint("PWM_CH0_PRESCAL", default=0))
        PWM_CTRL_REG.register(10, 1, Datapoint("", default=576))
        PWM_CTRL_REG.register(11, 1, Datapoint("", default=864))
        PWM_CTRL_REG.register(100, 1, Datapoint("", default=1152))
        PWM_CH0_PERIOD = Reg32("PWM_CH0_PERIOD", 0x4)
        self.block(PWM_CH0_PERIOD)
        PWM_CH0_PERIOD.register(16, 16, Datapoint("PWM_CH0_ENTIRE_CYS", default=None))
        PWM_CH0_PERIOD.register(0, 16, Datapoint("PWM_CH0_ENTIRE_ACT_CYS", default=None))
        PWM_CH1_PERIOD = Reg32("PWM_CH1_PERIOD", 0x8)
        self.block(PWM_CH1_PERIOD)
        PWM_CH1_PERIOD.register(16, 16, Datapoint("PWM_CH1_ENTIRE_CYS", default=None))
        PWM_CH1_PERIOD.register(0, 16, Datapoint("PWM_CH1_ENTIRE_CYS", default=None))


class HighSpeedTimer(Device):
    def __init__(self, start=0x01C60000):
        super(HighSpeedTimer, self).__init__("HighSpeedTimer" , start)
        HS_TMR_IRQ_EN_REG = Reg32("HS_TMR_IRQ_EN_REG", 0x0)
        self.block(HS_TMR_IRQ_EN_REG)
        HS_TMR_IRQ_EN_REG.register(0, 1, Datapoint("HS_TMR_INT_EN", default=0))
        HS_TMR_IRQ_STAS_REG = Reg32("HS_TMR_IRQ_STAS_REG", 0x4)
        self.block(HS_TMR_IRQ_STAS_REG)
        HS_TMR_IRQ_STAS_REG.register(0, 1, Datapoint("HS_TMR_IRQ_PEND", default=0))
        HS_TMR0_CTRL_REG = Reg32("HS_TMR0_CTRL_REG", 0x10)
        self.block(HS_TMR0_CTRL_REG)
        HS_TMR0_CTRL_REG.register(31, 1, Datapoint("HS_TMR_TEST", default=0))
        HS_TMR0_CTRL_REG.register(7, 1, Datapoint("HS_TMR_MODE", default=0))
        HS_TMR0_CTRL_REG.register(4, 3, Datapoint("HS_TMR_CLK", default=0))
        HS_TMR0_CTRL_REG.register(1, 1, Datapoint("", default=2))
        HS_TMR0_CTRL_REG.register(10, 1, Datapoint("", default=4))
        HS_TMR0_CTRL_REG.register(11, 1, Datapoint("", default=8))
        HS_TMR0_CTRL_REG.register(1, 1, Datapoint("HS_TMR_RELOAD", default=0))
        HS_TMR0_CTRL_REG.register(0, 1, Datapoint("HS_TMR_EN", default=0))
        HS_TMR_INTV_LO_REG = Reg32("HS_TMR_INTV_LO_REG", 0x14)
        self.block(HS_TMR_INTV_LO_REG)
        HS_TMR_INTV_LO_REG.register(0, 32, Datapoint("HS_TMR_INTV_VALUE_LO", default=None))
        HS_TMR_INTV_HI_REG = Reg32("HS_TMR_INTV_HI_REG", 0x18)
        self.block(HS_TMR_INTV_HI_REG)
        HS_TMR_INTV_HI_REG.register(0, 24, Datapoint("HS_TMR_INTV_VALUE_HI", default=None))
        HS_TMR_CURNT_LO_REG = Reg32("HS_TMR_CURNT_LO_REG", 0x1C)
        self.block(HS_TMR_CURNT_LO_REG)
        HS_TMR_CURNT_LO_REG.register(0, 32, Datapoint("HS_TMR_CUR_VALUE_LO", default=None))
        HS_TMR_CURNT_HI_REG = Reg32("HS_TMR_CURNT_HI_REG", 0x20)
        self.block(HS_TMR_CURNT_HI_REG)
        HS_TMR_CURNT_HI_REG.register(0, 24, Datapoint("HS_TMR_CUR_VALUE_HI", default=None))


class DMA(Device):
    def __init__(self, start=0x01C02000):
        super(DMA, self).__init__("DMA" , start)
        DMA_IRQ_EN_REG = Reg32("DMA_IRQ_EN_REG", 0x0)
        self.block(DMA_IRQ_EN_REG)
        DMA_IRQ_EN_REG.register(30, 1, Datapoint("DMA7_QUEUE_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(29, 1, Datapoint("DMA7_PKG_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(28, 1, Datapoint("DMA7_HLAF_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(26, 1, Datapoint("DMA6_QUEUE_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(25, 1, Datapoint("DMA6_PKG_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(24, 1, Datapoint("DMA6_HLAF_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(22, 1, Datapoint("DMA5_QUEUE_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(21, 1, Datapoint("DMA5_PKG_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(20, 1, Datapoint("DMA5_HLAF_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(18, 1, Datapoint("DMA4_QUEUE_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(17, 1, Datapoint("DMA4_PKG_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(16, 1, Datapoint("DMA4_HLAF_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(14, 1, Datapoint("DMA3_QUEUE_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(13, 1, Datapoint("DMA3_PKG_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(12, 1, Datapoint("DMA3_HLAF_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(10, 1, Datapoint("DMA2_QUEUE_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(9, 1, Datapoint("DMA2_PKG_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(8, 1, Datapoint("DMA2_HLAF_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(6, 1, Datapoint("DMA1_QUEUE_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(5, 1, Datapoint("DMA1_PKG_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(4, 1, Datapoint("DMA1_HLAF_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(2, 1, Datapoint("DMA0_QUEUE_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(1, 1, Datapoint("DMA0_PKG_IRQ_EN", default=0))
        DMA_IRQ_EN_REG.register(0, 1, Datapoint("DMA0_HLAF_IRQ_EN", default=0))
        DMA_IRQ_PEND_REG = Reg32("DMA_IRQ_PEND_REG", 0x10)
        self.block(DMA_IRQ_PEND_REG)
        DMA_IRQ_PEND_REG.register(30, 1, Datapoint("DMA7_QUEUE_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(29, 1, Datapoint("DMA7_PKG_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(28, 1, Datapoint("DMA7_HLAF_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(26, 1, Datapoint("DMA6_QUEUE_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(25, 1, Datapoint("DMA6_PKG_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(24, 1, Datapoint("DMA6_HLAF_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(22, 1, Datapoint("DMA5_QUEUE_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(21, 1, Datapoint("DMA5_PKG_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(20, 1, Datapoint("DMA5_HLAF_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(18, 1, Datapoint("DMA4_QUEUE_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(17, 1, Datapoint("DMA4_PKG_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(16, 1, Datapoint("DMA4_HLAF_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(14, 1, Datapoint("DMA3_QUEUE_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(13, 1, Datapoint("DMA3_PKG_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(12, 1, Datapoint("DMA3_HLAF_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(10, 1, Datapoint("DMA2_QUEUE_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(9, 1, Datapoint("DMA2_PKG_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(8, 1, Datapoint("DMA2_HLAF_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(6, 1, Datapoint("DMA1_QUEUE_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(5, 1, Datapoint("DMA1_PKG_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(4, 1, Datapoint("DMA1_HLAF_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(2, 1, Datapoint("DMA0_QUEUE_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(1, 1, Datapoint("DMA0_PKG_IRQ_PEND", default=0))
        DMA_IRQ_PEND_REG.register(0, 1, Datapoint("DMA0_HLAF_IRQ_PEND", default=0))
        DMA_AUTO_GATE_REG = Reg32("DMA_AUTO_GATE_REG", 0x020)
        self.block(DMA_AUTO_GATE_REG)
        DMA_AUTO_GATE_REG.register(2, 1, Datapoint("DMA_MCLK_CIRCUIT", default=0))
        DMA_AUTO_GATE_REG.register(1, 1, Datapoint("DMA_COMMON_CIRCUIT", default=0))
        DMA_AUTO_GATE_REG.register(0, 1, Datapoint("DMA_CHAN_CIRCUIT", default=0))
        DMA_STA_REG = Reg32("DMA_STA_REG", 0x30)
        self.block(DMA_STA_REG)
        DMA_STA_REG.register(7, 1, Datapoint("DMA7_STATUS", default=0))
        DMA_STA_REG.register(6, 1, Datapoint("DMA6_STATUS", default=0))
        DMA_STA_REG.register(5, 1, Datapoint("DMA5_STATUS", default=0))
        DMA_STA_REG.register(4, 1, Datapoint("DMA4_STATUS", default=0))
        DMA_STA_REG.register(3, 1, Datapoint("DMA3_STATUS", default=0))
        DMA_STA_REG.register(2, 1, Datapoint("DMA2_STATUS", default=0))
        DMA_STA_REG.register(1, 1, Datapoint("DMA1_STATUS", default=0))
        DMA_STA_REG.register(0, 1, Datapoint("DMA0_STATUS", default=0))
        DMA_STA_REG.register(0, 1, Datapoint("DMA_EN", default=0))
        DMA_STA_REG.register(0, 1, Datapoint("DMA_PAUSE", default=0))
        DMA_STA_REG.register(0, 32, Datapoint("DMA_DESC_ADDR", default=None))
        DMA_STA_REG.register(25, 2, Datapoint("DMA_DEST_DATA_WIDTH", default=0))
        DMA_STA_REG.register(23, 2, Datapoint("DMA_DEST_BST_LEN", default=0))
        DMA_STA_REG.register(21, 2, Datapoint("DMA_ADDR_MODE", default=0))
        DMA_STA_REG.register(16, 5, Datapoint("DMA_DEST_DRQ_TYPE", default=0))
        DMA_STA_REG.register(9, 2, Datapoint("DMA_SRC_DATA_WIDTH", default=0))
        DMA_STA_REG.register(7, 2, Datapoint("DMA_SRC_BST_LEN", default=0))
        DMA_STA_REG.register(5, 2, Datapoint("DMA_SRC_ADDR_MODE", default=0))
        DMA_STA_REG.register(0, 5, Datapoint("DMA_SRC_DRQ_TYPE", default=0))
        DMA_STA_REG.register(0, 32, Datapoint("DMA_CUR_SRC", default=0))
        DMA_STA_REG.register(0, 32, Datapoint("DMA_CUR_DEST", default=0))
        DMA_STA_REG.register(0, 25, Datapoint("DMA_BCNT_LEFT", default=0))
        DMA_STA_REG.register(8, 8, Datapoint("DATA_BLK_SIZE", default=0))
        DMA_STA_REG.register(0, 8, Datapoint("WAIT_CYC", default=0))


class RTC(Device):
    def __init__(self, start=0x01F00000):
        super(RTC, self).__init__("RTC" , start)
        LOSC_CTRL_REG = Reg32("LOSC_CTRL_REG", 0x0)
        self.block(LOSC_CTRL_REG)
        LOSC_CTRL_REG.register(14, 1, Datapoint("LOSC_AUTO_SWT_EN", default=1))
        LOSC_CTRL_REG.register(9, 1, Datapoint("ALM_DDHHMMSS_ACCE", default=0))
        LOSC_CTRL_REG.register(8, 1, Datapoint("RTC_HHMMSS_ACCE", default=0))
        LOSC_CTRL_REG.register(7, 1, Datapoint("RTC_YYMMDD_ACCE", default=0))
        LOSC_CTRL_REG.register(2, 2, Datapoint("EXT_LOSC_GSM", default=0))
        LOSC_CTRL_REG.register(0, 1, Datapoint("LOSC_SRC_SEL", default=0))
        LOSC_AUTO_SWT_STA_REG = Reg32("LOSC_AUTO_SWT_STA_REG", 0x4)
        self.block(LOSC_AUTO_SWT_STA_REG)
        LOSC_AUTO_SWT_STA_REG.register(1, 1, Datapoint("LOSC_AUTO_SWT_PEND", default=0))
        LOSC_AUTO_SWT_STA_REG.register(0, 1, Datapoint("LOSC_SRC_SEL_STA", default=0))
        INTOSC_CLK_PRESCAL_REG = Reg32("INTOSC_CLK_PRESCAL_REG", 0x8)
        self.block(INTOSC_CLK_PRESCAL_REG)
        INTOSC_CLK_PRESCAL_REG.register(0, 5, Datapoint("INTOSC_CLK_PRESCAL", default=20))
        RTC_YY_MM_DD_REG = Reg32("RTC_YY_MM_DD_REG", 0x10)
        self.block(RTC_YY_MM_DD_REG)
        RTC_YY_MM_DD_REG.register(22, 1, Datapoint("LEAP", default=0))
        RTC_YY_MM_DD_REG.register(16, 6, Datapoint("YEAR", default=None))
        RTC_YY_MM_DD_REG.register(8, 4, Datapoint("MONTH", default=None))
        RTC_YY_MM_DD_REG.register(0, 5, Datapoint("DAY", default=None))
        RTC_HH_MM_SS_REG = Reg32("RTC_HH_MM_SS_REG", 0x14)
        self.block(RTC_HH_MM_SS_REG)
        RTC_HH_MM_SS_REG.register(29, 3, Datapoint("WK_NO", default=0))
        RTC_HH_MM_SS_REG.register(16, 5, Datapoint("HOUR", default=None))
        RTC_HH_MM_SS_REG.register(8, 6, Datapoint("MINUTE", default=None))
        RTC_HH_MM_SS_REG.register(0, 6, Datapoint("SECOND", default=None))
        ALARM0_COUNTER_REG = Reg32("ALARM0_COUNTER_REG", 0x20)
        self.block(ALARM0_COUNTER_REG)
        ALARM0_COUNTER_REG.register(0, 32, Datapoint("ALARM0_COUNTER", default=0))
        ALARM0_CUR_VLU_REG = Reg32("ALARM0_CUR_VLU_REG", 0x24)
        self.block(ALARM0_CUR_VLU_REG)
        ALARM0_CUR_VLU_REG.register(0, 32, Datapoint("ALARM0_CUR_VLU", default=None))
        ALARM0_ENABLE_REG = Reg32("ALARM0_ENABLE_REG", 0x28)
        self.block(ALARM0_ENABLE_REG)
        ALARM0_ENABLE_REG.register(0, 1, Datapoint("ALM_0_EN", default=0))
        ALARM0_IRQ_EN = Reg32("ALARM0_IRQ_EN", 0x2C)
        self.block(ALARM0_IRQ_EN)
        ALARM0_IRQ_EN.register(0, 1, Datapoint("ALARM0_IRQ_EN", default=0))
        ALARM0_IRQ_STA_REG = Reg32("ALARM0_IRQ_STA_REG", 0x30)
        self.block(ALARM0_IRQ_STA_REG)
        ALARM0_IRQ_STA_REG.register(0, 1, Datapoint("ALARM0_IRQ_PEND", default=0))
        ALARM1_WK_HH_MM_SS = Reg32("ALARM1_WK_HH_MM_SS", 0x40)
        self.block(ALARM1_WK_HH_MM_SS)
        ALARM1_WK_HH_MM_SS.register(16, 5, Datapoint("HOUR", default=None))
        ALARM1_WK_HH_MM_SS.register(8, 6, Datapoint("MINUTE", default=None))
        ALARM1_WK_HH_MM_SS.register(0, 6, Datapoint("SECOND", default=None))
        ALARM1_EN_REG = Reg32("ALARM1_EN_REG", 0x44)
        self.block(ALARM1_EN_REG)
        ALARM1_EN_REG.register(6, 1, Datapoint("WK6_ALM1_EN", default=0))
        ALARM1_EN_REG.register(5, 1, Datapoint("WK5_ALM1_EN", default=0))
        ALARM1_EN_REG.register(4, 1, Datapoint("WK4_ALM1_EN", default=0))
        ALARM1_EN_REG.register(3, 1, Datapoint("WK3_ALM1_EN", default=0))
        ALARM1_EN_REG.register(2, 1, Datapoint("WK2_ALM1_EN", default=0))
        ALARM1_EN_REG.register(1, 1, Datapoint("WK1_ALM1_EN", default=0))
        ALARM1_EN_REG.register(0, 1, Datapoint("WK0_ALM1_EN", default=0))
        ALARM1_IRQ_EN = Reg32("ALARM1_IRQ_EN", 0x48)
        self.block(ALARM1_IRQ_EN)
        ALARM1_IRQ_EN.register(0, 1, Datapoint("ALARM1_IRQ_EN", default=0))
        ALARM1_IRQ_STA_REG = Reg32("ALARM1_IRQ_STA_REG", 0x4C)
        self.block(ALARM1_IRQ_STA_REG)
        ALARM1_IRQ_STA_REG.register(0, 1, Datapoint("ALARM1_WEEK_IRQ_PEND", default=0))
        ALARM_CONFIG_REG = Reg32("ALARM_CONFIG_REG", 0x50)
        self.block(ALARM_CONFIG_REG)
        ALARM_CONFIG_REG.register(0, 1, Datapoint("ALARM_WAKEUP", default=0))
        LOSC_OUT_GATING_REG = Reg32("LOSC_OUT_GATING_REG", 0x60)
        self.block(LOSC_OUT_GATING_REG)
        LOSC_OUT_GATING_REG.register(0, 1, Datapoint("LOSC_OUT_GATING", default=0))
        LOSC_OUT_GATING_REG.register(0, 32, Datapoint("GP_DATA", default=0))
        LOSC_OUT_GATING_REG.register(2, 1, Datapoint("valuecanbestorediftheVDD_RTCislargerthan1", default=3))
        GPL_HOLD_OUTPUT_REG = Reg32("GPL_HOLD_OUTPUT_REG", 0x180)
        self.block(GPL_HOLD_OUTPUT_REG)
        GPL_HOLD_OUTPUT_REG.register(11, 1, Datapoint("GPL11_HOLD_OUTPUT", default=0))
        GPL_HOLD_OUTPUT_REG.register(10, 1, Datapoint("GPL10_HOLD_OUTPUT", default=0))
        GPL_HOLD_OUTPUT_REG.register(9, 1, Datapoint("GPL9_HOLD_OUTPUT", default=0))
        GPL_HOLD_OUTPUT_REG.register(8, 1, Datapoint("GPL8_HOLD_OUTPUT", default=0))
        GPL_HOLD_OUTPUT_REG.register(7, 1, Datapoint("GPL7_HOLD_OUTPUT", default=0))
        GPL_HOLD_OUTPUT_REG.register(6, 1, Datapoint("GPL6_HOLD_OUTPUT", default=0))
        GPL_HOLD_OUTPUT_REG.register(5, 1, Datapoint("GPL5_HOLD_OUTPUT", default=0))
        GPL_HOLD_OUTPUT_REG.register(4, 1, Datapoint("GPL4_HOLD_OUTPUT", default=0))
        GPL_HOLD_OUTPUT_REG.register(3, 1, Datapoint("GPL3_HOLD_OUTPUT", default=0))
        GPL_HOLD_OUTPUT_REG.register(2, 1, Datapoint("GPL2_HOLD_OUTPUT", default=0))
        GPL_HOLD_OUTPUT_REG.register(1, 1, Datapoint("GPL1_HOLD_OUTPUT", default=0))
        GPL_HOLD_OUTPUT_REG.register(0, 1, Datapoint("GPL0_HOLD_OUTPUT", default=0))
        VDD_RTC_REG = Reg32("VDD_RTC_REG", 0x190)
        self.block(VDD_RTC_REG)
        VDD_RTC_REG.register(0, 3, Datapoint("VDD_RTC_REGU", default=256))
        IC_CHARA_REG = Reg32("IC_CHARA_REG", 0x1F0)
        self.block(IC_CHARA_REG)
        IC_CHARA_REG.register(0, 31, Datapoint("SRAM_C1_MAP", default=2147483647))
        SRAM_CTRL_REG1 = Reg32("SRAM_CTRL_REG1", 0x4)
        self.block(SRAM_CTRL_REG1)
        SRAM_CTRL_REG1.register(31, 1, Datapoint("BIST_DMA_CTRL_SEL", default=0))


class AC(Device):
    def __init__(self, start=0x01C22C00):
        super(AC, self).__init__("AC" , start)
        DA_CTL = Reg32("DA_CTL", 0x000)
        self.block(DA_CTL)
        DA_CTL.register(8, 1, Datapoint("SDO_EN", default=0))
        DA_CTL.register(6, 1, Datapoint("ASS", default=0))
        DA_CTL.register(5, 1, Datapoint("MS", default=0))
        DA_CTL.register(4, 1, Datapoint("PCM", default=0))
        DA_CTL.register(3, 1, Datapoint("LOOP", default=0))
        DA_CTL.register(2, 1, Datapoint("TXEN", default=0))
        DA_CTL.register(1, 1, Datapoint("RXEN", default=0))
        DA_CTL.register(0, 1, Datapoint("GEN", default=0))
        DA_FAT0 = Reg32("DA_FAT0", 0x004)
        self.block(DA_FAT0)
        DA_FAT0.register(7, 1, Datapoint("LRCP", default=0))
        DA_FAT0.register(6, 1, Datapoint("BCP", default=0))
        DA_FAT0.register(4, 2, Datapoint("SR", default=0))
        DA_FAT0.register(2, 2, Datapoint("WSS", default=3))
        DA_FAT0.register(0, 2, Datapoint("FMT", default=0))
        DA_FAT1 = Reg32("DA_FAT1", 0x008)
        self.block(DA_FAT1)
        DA_FAT1.register(12, 3, Datapoint("PCM_SYNC_PERIOD", default=4))
        DA_FAT1.register(11, 1, Datapoint("PCM_SYNC_OUT", default=0))
        DA_FAT1.register(10, 1, Datapoint("PCMOutMute", default=0))
        DA_FAT1.register(9, 1, Datapoint("MLS", default=0))
        DA_FAT1.register(8, 1, Datapoint("SEXT", default=0))
        DA_FAT1.register(6, 2, Datapoint("SI", default=0))
        DA_FAT1.register(5, 1, Datapoint("SW", default=1))
        DA_FAT1.register(4, 1, Datapoint("SSYNC", default=0))
        DA_FAT1.register(2, 2, Datapoint("RX_PDM", default=0))
        DA_FAT1.register(0, 2, Datapoint("TX_PDM", default=0))
        DA_TXFIFO = Reg32("DA_TXFIFO", 0x00C)
        self.block(DA_TXFIFO)
        DA_TXFIFO.register(0, 32, Datapoint("TX_DATA", default=0))
        DA_RXFIFO = Reg32("DA_RXFIFO", 0x010)
        self.block(DA_RXFIFO)
        DA_RXFIFO.register(0, 32, Datapoint("RX_DATA", default=0))
        DA_FCTL = Reg32("DA_FCTL", 0x014)
        self.block(DA_FCTL)
        DA_FCTL.register(31, 1, Datapoint("FIFOSRC", default=0))
        DA_FCTL.register(25, 1, Datapoint("FTX", default=0))
        DA_FCTL.register(24, 1, Datapoint("FRX", default=0))
        DA_FCTL.register(12, 7, Datapoint("TXTL", default=64))
        DA_FCTL.register(4, 6, Datapoint("RXTL", default=15))
        DA_FCTL.register(2, 1, Datapoint("TXIM", default=0))
        DA_FCTL.register(0, 2, Datapoint("RXOM", default=0))
        DA_FSTA = Reg32("DA_FSTA", 0x018)
        self.block(DA_FSTA)
        DA_FSTA.register(28, 1, Datapoint("TXE", default=1))
        DA_FSTA.register(16, 8, Datapoint("TXE_CNT", default=128))
        DA_FSTA.register(8, 1, Datapoint("RXA", default=0))
        DA_FSTA.register(0, 7, Datapoint("RXA_CNT", default=0))
        DA_INT = Reg32("DA_INT", 0x01C)
        self.block(DA_INT)
        DA_INT.register(7, 1, Datapoint("TX_DRQ", default=0))
        DA_INT.register(6, 1, Datapoint("TXUI_EN", default=0))
        DA_INT.register(5, 1, Datapoint("TXOI_EN", default=0))
        DA_INT.register(4, 1, Datapoint("TXEI_EN", default=0))
        DA_INT.register(3, 1, Datapoint("RX_DRQ", default=0))
        DA_INT.register(2, 1, Datapoint("RXUI_EN", default=0))
        DA_INT.register(1, 1, Datapoint("RXOI_EN", default=0))
        DA_INT.register(0, 1, Datapoint("RXAI_EN", default=0))
        DA_ISTA = Reg32("DA_ISTA", 0x020)
        self.block(DA_ISTA)
        DA_ISTA.register(6, 1, Datapoint("TXU_INT", default=0))
        DA_ISTA.register(5, 1, Datapoint("TXO_INT", default=0))
        DA_ISTA.register(4, 1, Datapoint("TXE_INT", default=1))
        DA_ISTA.register(2, 1, Datapoint("RXU_INT", default=0))
        DA_ISTA.register(1, 1, Datapoint("RXO_INT", default=0))
        DA_ISTA.register(0, 1, Datapoint("RXA_INT", default=0))
        DA_CLKD = Reg32("DA_CLKD", 0x024)
        self.block(DA_CLKD)
        DA_CLKD.register(7, 1, Datapoint("MCLKO_EN", default=0))
        DA_CLKD.register(4, 3, Datapoint("BCLKDIV", default=0))
        DA_CLKD.register(0, 4, Datapoint("MCLKDIV", default=0))
        DA_TXCNT = Reg32("DA_TXCNT", 0x028)
        self.block(DA_TXCNT)
        DA_TXCNT.register(0, 32, Datapoint("TX_CNT", default=0))
        DA_RXCNT = Reg32("DA_RXCNT", 0x02C)
        self.block(DA_RXCNT)
        DA_RXCNT.register(0, 32, Datapoint("RX_CNT", default=0))
        DA_TXCHSEL = Reg32("DA_TXCHSEL", 0x030)
        self.block(DA_TXCHSEL)
        DA_TXCHSEL.register(0, 3, Datapoint("TX_CHSEL", default=1))
        DA_TXCHMAP = Reg32("DA_TXCHMAP", 0x034)
        self.block(DA_TXCHMAP)
        DA_TXCHMAP.register(12, 3, Datapoint("TX_CH3_MAP", default=3))
        DA_TXCHMAP.register(8, 3, Datapoint("TX_CH2_MAP", default=2))
        DA_TXCHMAP.register(4, 3, Datapoint("TX_CH1_MAP", default=1))
        DA_TXCHMAP.register(0, 3, Datapoint("TX_CH0_MAP", default=0))
        DA_RXCHSEL = Reg32("DA_RXCHSEL", 0x038)
        self.block(DA_RXCHSEL)
        DA_RXCHSEL.register(0, 3, Datapoint("RX_CHSEL", default=1))
        DA_RXCHMAP = Reg32("DA_RXCHMAP", 0x03C)
        self.block(DA_RXCHMAP)
        DA_RXCHMAP.register(12, 3, Datapoint("RX_CH3_MAP", default=3))
        DA_RXCHMAP.register(8, 3, Datapoint("RX_CH2_MAP", default=2))
        DA_RXCHMAP.register(4, 3, Datapoint("RX_CH1_MAP", default=1))
        DA_RXCHMAP.register(0, 3, Datapoint("RX_CH0_MAP", default=0))
        CHIP_AUDIO_RST = Reg32("CHIP_AUDIO_RST", 0x200)
        self.block(CHIP_AUDIO_RST)
        CHIP_AUDIO_RST.register(0, 16, Datapoint("Reserved", default=None))
        SYSCLK_CTL = Reg32("SYSCLK_CTL", 0x20C)
        self.block(SYSCLK_CTL)
        SYSCLK_CTL.register(11, 1, Datapoint("AIF1CLK_ENA", default=0))
        SYSCLK_CTL.register(10, 1, Datapoint("Reserved", default=0))
        SYSCLK_CTL.register(8, 2, Datapoint("AIF1CLK_SRC", default=0))
        SYSCLK_CTL.register(7, 1, Datapoint("AIF2CLK_ENA", default=0))
        SYSCLK_CTL.register(6, 1, Datapoint("Reserved", default=0))
        SYSCLK_CTL.register(4, 2, Datapoint("AIF2CLK_SRC", default=0))
        SYSCLK_CTL.register(3, 1, Datapoint("SYSCLK_ENA", default=0))
        SYSCLK_CTL.register(1, 2, Datapoint("Reserved", default=0))
        SYSCLK_CTL.register(0, 1, Datapoint("SYSCLK_SRC", default=0))
        MOD_CLK_ENA = Reg32("MOD_CLK_ENA", 0x210)
        self.block(MOD_CLK_ENA)
        MOD_CLK_ENA.register(16, 16, Datapoint("Reserved", default=0))
        MOD_CLK_ENA.register(0, 16, Datapoint("Moduleclockenablecontrol", default=0))
        MOD_RST_CTL = Reg32("MOD_RST_CTL", 0x214)
        self.block(MOD_RST_CTL)
        MOD_RST_CTL.register(16, 16, Datapoint("Reserved", default=0))
        MOD_RST_CTL.register(0, 16, Datapoint("Moduleresetcontrol", default=0))
        SYS_SR_CTRL = Reg32("SYS_SR_CTRL", 0x218)
        self.block(SYS_SR_CTRL)
        SYS_SR_CTRL.register(12, 4, Datapoint("AIF1_FS", default=0))
        SYS_SR_CTRL.register(8, 4, Datapoint("AIF2_FS", default=0))
        SYS_SR_CTRL.register(3, 1, Datapoint("SRC1_ENA", default=0))
        SYS_SR_CTRL.register(2, 1, Datapoint("SRC1_SRC", default=0))
        SYS_SR_CTRL.register(1, 1, Datapoint("SRC2_ENA", default=0))
        SYS_SR_CTRL.register(0, 1, Datapoint("SRC2_SRC", default=0))
        SYS_SRC_CLK = Reg32("SYS_SRC_CLK", 0x21C)
        self.block(SYS_SRC_CLK)
        SYS_SRC_CLK.register(0, 2, Datapoint("SRC_CLK_SLT", default=0))
        AIF1CLK_CTRL = Reg32("AIF1CLK_CTRL", 0x240)
        self.block(AIF1CLK_CTRL)
        AIF1CLK_CTRL.register(15, 1, Datapoint("AIF1_MSTR_MOD", default=0))
        AIF1CLK_CTRL.register(14, 1, Datapoint("AIF1_BCLK_INV", default=0))
        AIF1CLK_CTRL.register(13, 1, Datapoint("AIF1_LRCK_INV", default=0))
        AIF1CLK_CTRL.register(9, 4, Datapoint("AIF1_BCLK_DIV", default=0))
        AIF1CLK_CTRL.register(6, 3, Datapoint("AIF1_LRCK_DIV", default=0))
        AIF1CLK_CTRL.register(4, 2, Datapoint("AIF1_WORD_SIZ", default=0))
        AIF1CLK_CTRL.register(2, 2, Datapoint("AIF1_DATA_FMT", default=0))
        AIF1CLK_CTRL.register(1, 1, Datapoint("DSP_MONO_PCM", default=0))
        AIF1CLK_CTRL.register(0, 1, Datapoint("AIF1_TDMM_ENA", default=0))
        AIF1_ADCDAT_CTRL = Reg32("AIF1_ADCDAT_CTRL", 0x244)
        self.block(AIF1_ADCDAT_CTRL)
        AIF1_ADCDAT_CTRL.register(15, 1, Datapoint("AIF1_AD0L_ENA", default=0))
        AIF1_ADCDAT_CTRL.register(14, 1, Datapoint("AIF1_AD0R_ENA", default=0))
        AIF1_ADCDAT_CTRL.register(13, 1, Datapoint("AIF1_AD1L_ENA", default=0))
        AIF1_ADCDAT_CTRL.register(12, 1, Datapoint("AIF1_AD1R_ENA", default=0))
        AIF1_ADCDAT_CTRL.register(10, 2, Datapoint("AIF1_AD0L_SRC", default=0))
        AIF1_ADCDAT_CTRL.register(8, 2, Datapoint("AIF1_AD0R_SRC", default=0))
        AIF1_ADCDAT_CTRL.register(6, 2, Datapoint("AIF1_AD1L_SRC", default=0))
        AIF1_ADCDAT_CTRL.register(4, 2, Datapoint("AIF1_AD1R_SRC", default=0))
        AIF1_ADCDAT_CTRL.register(3, 1, Datapoint("AIF1_ADCP_ENA", default=0))
        AIF1_ADCDAT_CTRL.register(2, 1, Datapoint("AIF1_ADUL_ENA", default=0))
        AIF1_ADCDAT_CTRL.register(0, 2, Datapoint("AIF1_SLOT_SIZ", default=0))
        AIF1_DACDAT_CTRL = Reg32("AIF1_DACDAT_CTRL", 0x248)
        self.block(AIF1_DACDAT_CTRL)
        AIF1_DACDAT_CTRL.register(15, 1, Datapoint("AIF1_DA0L_ENA", default=0))
        AIF1_DACDAT_CTRL.register(14, 1, Datapoint("AIF1_DA0R_ENA", default=0))
        AIF1_DACDAT_CTRL.register(13, 1, Datapoint("AIF1_DA1L_ENA", default=0))
        AIF1_DACDAT_CTRL.register(12, 1, Datapoint("AIF1_DA1R_ENA", default=0))
        AIF1_DACDAT_CTRL.register(10, 2, Datapoint("AIF1_DA0L_SRC", default=0))
        AIF1_DACDAT_CTRL.register(8, 2, Datapoint("AIF1_DA0R_SRC", default=0))
        AIF1_DACDAT_CTRL.register(6, 2, Datapoint("AIF1_DA1L_SRC", default=0))
        AIF1_DACDAT_CTRL.register(4, 2, Datapoint("AIF1_DA1R_SRC", default=0))
        AIF1_DACDAT_CTRL.register(3, 1, Datapoint("AIF1_DACP_ENA", default=0))
        AIF1_DACDAT_CTRL.register(2, 1, Datapoint("AIF1_DAUL_ENA", default=0))
        AIF1_DACDAT_CTRL.register(1, 1, Datapoint("Reserved", default=0))
        AIF1_DACDAT_CTRL.register(0, 1, Datapoint("AIF1_LOOP_ENA", default=0))
        AIF1_MXR_SRC = Reg32("AIF1_MXR_SRC", 0x24C)
        self.block(AIF1_MXR_SRC)
        AIF1_MXR_SRC.register(12, 4, Datapoint("AIF1_AD0L_MXL_SRC", default=0))
        AIF1_MXR_SRC.register(8, 4, Datapoint("AIF1_AD0R_MXR_SRC", default=0))
        AIF1_MXR_SRC.register(6, 2, Datapoint("AIF1_AD1L_MXR_SRC", default=0))
        AIF1_MXR_SRC.register(4, 2, Datapoint("Reserved", default=0))
        AIF1_MXR_SRC.register(2, 2, Datapoint("AIF1_AD1R_MXR_SRC", default=0))
        AIF1_MXR_SRC.register(0, 2, Datapoint("Reserved", default=0))
        AIF1_VOL_CTRL1 = Reg32("AIF1_VOL_CTRL1", 0x250)
        self.block(AIF1_VOL_CTRL1)
        AIF1_VOL_CTRL1.register(8, 8, Datapoint("AIF1_AD0L_VOL", default=160))
        AIF1_VOL_CTRL1.register(0, 8, Datapoint("AIF1_AD0R_VOL", default=160))
        AIF1_VOL_CTRL2 = Reg32("AIF1_VOL_CTRL2", 0x254)
        self.block(AIF1_VOL_CTRL2)
        AIF1_VOL_CTRL2.register(8, 8, Datapoint("AIF1_AD1L_VOL", default=160))
        AIF1_VOL_CTRL2.register(0, 8, Datapoint("AIF1_AD1R_VOL", default=160))
        AIF1_VOL_CTRL3 = Reg32("AIF1_VOL_CTRL3", 0x258)
        self.block(AIF1_VOL_CTRL3)
        AIF1_VOL_CTRL3.register(8, 8, Datapoint("AIF1_DA0L_VOL", default=160))
        AIF1_VOL_CTRL3.register(0, 8, Datapoint("AIF1_DA0R_VOL", default=160))
        AIF1_VOL_CTRL4 = Reg32("AIF1_VOL_CTRL4", 0x25C)
        self.block(AIF1_VOL_CTRL4)
        AIF1_VOL_CTRL4.register(8, 8, Datapoint("AIF1_DA1L_VOL", default=160))
        AIF1_VOL_CTRL4.register(0, 8, Datapoint("AIF1_DA1R_VOL", default=160))
        AIF1_MXR_GAIN = Reg32("AIF1_MXR_GAIN", 0x260)
        self.block(AIF1_MXR_GAIN)
        AIF1_MXR_GAIN.register(12, 4, Datapoint("AIF1_AD0L_MXR_GAIN", default=0))
        AIF1_MXR_GAIN.register(8, 4, Datapoint("AIF1_AD0R_MXR_GAIN", default=0))
        AIF1_MXR_GAIN.register(6, 2, Datapoint("AIF1_AD1L_MXR_GAIN", default=0))
        AIF1_MXR_GAIN.register(4, 2, Datapoint("Reserved", default=0))
        AIF1_MXR_GAIN.register(2, 2, Datapoint("AIF1_AD1R_MXR_GAIN", default=0))
        AIF1_MXR_GAIN.register(0, 2, Datapoint("Reserved", default=0))
        AIF1_RXD_CTRL = Reg32("AIF1_RXD_CTRL", 0x264)
        self.block(AIF1_RXD_CTRL)
        AIF1_RXD_CTRL.register(8, 8, Datapoint("Afterdatareceivingprogressbegins", default=0))
        AIF1_RXD_CTRL.register(0, 8, Datapoint("Reserved", default=0))
        AIF2_CLK_CTRL = Reg32("AIF2_CLK_CTRL", 0x280)
        self.block(AIF2_CLK_CTRL)
        AIF2_CLK_CTRL.register(15, 1, Datapoint("AIF2_MSTR_MOD", default=0))
        AIF2_CLK_CTRL.register(14, 1, Datapoint("AIF2_BCLK_INV", default=0))
        AIF2_CLK_CTRL.register(13, 1, Datapoint("AIF2_LRCK_INV", default=0))
        AIF2_CLK_CTRL.register(9, 4, Datapoint("AIF2_BCLK_DIV", default=0))
        AIF2_CLK_CTRL.register(6, 3, Datapoint("AIF2_LRCK_DIV", default=0))
        AIF2_CLK_CTRL.register(4, 2, Datapoint("AIF2_WORD_SIZ", default=0))
        AIF2_CLK_CTRL.register(2, 2, Datapoint("AIF2_DATA_FMT", default=0))
        AIF2_CLK_CTRL.register(1, 1, Datapoint("AIF2_MONO_PCM", default=0))
        AIF2_CLK_CTRL.register(0, 1, Datapoint("Reserved", default=0))
        AIF2_ADCDAT_CTRL = Reg32("AIF2_ADCDAT_CTRL", 0x284)
        self.block(AIF2_ADCDAT_CTRL)
        AIF2_ADCDAT_CTRL.register(15, 1, Datapoint("AIF2_ADCL_EN", default=0))
        AIF2_ADCDAT_CTRL.register(14, 1, Datapoint("AIF2_ADCR_EN", default=0))
        AIF2_ADCDAT_CTRL.register(12, 2, Datapoint("Reserved", default=0))
        AIF2_ADCDAT_CTRL.register(10, 2, Datapoint("AIF2_ADCL_SRC", default=0))
        AIF2_ADCDAT_CTRL.register(8, 2, Datapoint("AIF2_ADCR_SRC", default=0))
        AIF2_ADCDAT_CTRL.register(4, 4, Datapoint("Reserved", default=0))
        AIF2_ADCDAT_CTRL.register(3, 1, Datapoint("AIF2_ADCP_ENA", default=0))
        AIF2_ADCDAT_CTRL.register(2, 1, Datapoint("AIF2_ADUL_ENA", default=0))
        AIF2_ADCDAT_CTRL.register(0, 1, Datapoint("AIF2_LOOP_EN", default=0))
        AIF2_DACDAT_CTRL = Reg32("AIF2_DACDAT_CTRL", 0x288)
        self.block(AIF2_DACDAT_CTRL)
        AIF2_DACDAT_CTRL.register(15, 1, Datapoint("AIF2_DACL_ENA", default=0))
        AIF2_DACDAT_CTRL.register(14, 1, Datapoint("AIF2_DACR_ENA", default=0))
        AIF2_DACDAT_CTRL.register(12, 2, Datapoint("Reserved", default=0))
        AIF2_DACDAT_CTRL.register(10, 2, Datapoint("AIF2_DACL_SRC", default=0))
        AIF2_DACDAT_CTRL.register(8, 2, Datapoint("AIF2_DACR_SRC", default=0))
        AIF2_DACDAT_CTRL.register(4, 4, Datapoint("Reserved", default=0))
        AIF2_DACDAT_CTRL.register(3, 1, Datapoint("AIF2_DACP_ENA", default=0))
        AIF2_DACDAT_CTRL.register(2, 1, Datapoint("AIF2_DAUL_ENA", default=0))
        AIF2_DACDAT_CTRL.register(1, 1, Datapoint("Reserved", default=0))
        AIF2_MXR_SRC = Reg32("AIF2_MXR_SRC", 0x28C)
        self.block(AIF2_MXR_SRC)
        AIF2_MXR_SRC.register(12, 4, Datapoint("AIF2_ADCL_MXR_SRC", default=0))
        AIF2_MXR_SRC.register(8, 4, Datapoint("AIF2_ADCR_MXR_SRC", default=0))
        AIF2_MXR_SRC.register(0, 8, Datapoint("Reserved", default=0))
        AIF2_VOL_CTRL1 = Reg32("AIF2_VOL_CTRL1", 0x290)
        self.block(AIF2_VOL_CTRL1)
        AIF2_VOL_CTRL1.register(8, 8, Datapoint("AIF2_ADCL_VOL", default=160))
        AIF2_VOL_CTRL1.register(0, 8, Datapoint("AIF2_ADCR_VOL", default=160))
        AIF2_VOL_CTRL2 = Reg32("AIF2_VOL_CTRL2", 0x298)
        self.block(AIF2_VOL_CTRL2)
        AIF2_VOL_CTRL2.register(8, 8, Datapoint("AIF2_DACL_VOL", default=160))
        AIF2_VOL_CTRL2.register(0, 8, Datapoint("AIF2_DACR_VOL", default=160))
        AIF2_MXR_GAIN = Reg32("AIF2_MXR_GAIN", 0x2A0)
        self.block(AIF2_MXR_GAIN)
        AIF2_MXR_GAIN.register(12, 4, Datapoint("AIF2_ADCL_MXR_GAIN", default=0))
        AIF2_MXR_GAIN.register(8, 4, Datapoint("AIF2_ADCR_MXR_GAIN", default=0))
        AIF2_MXR_GAIN.register(0, 8, Datapoint("Reserved", default=0))
        AIF2_MXR_GAIN.register(8, 8, Datapoint("Afterdatareceivingprogressbegins", default=0))
        AIF2_MXR_GAIN.register(0, 8, Datapoint("Reserved", default=0))
        AIF3_CLK_CTRL = Reg32("AIF3_CLK_CTRL", 0x2C0)
        self.block(AIF3_CLK_CTRL)
        AIF3_CLK_CTRL.register(15, 1, Datapoint("Reserved", default=0))
        AIF3_CLK_CTRL.register(14, 1, Datapoint("AIF3_BCLK_INV", default=0))
        AIF3_CLK_CTRL.register(13, 1, Datapoint("AIF3_LRCK_INV", default=0))
        AIF3_CLK_CTRL.register(6, 7, Datapoint("Reserved", default=0))
        AIF3_CLK_CTRL.register(4, 2, Datapoint("AIF3_WORD_SIZ", default=0))
        AIF3_CLK_CTRL.register(2, 2, Datapoint("Reserved", default=0))
        AIF3_CLK_CTRL.register(0, 2, Datapoint("AIF3_CLOC_SRC", default=0))
        AIF3_ADCDAT_CTRL = Reg32("AIF3_ADCDAT_CTRL", 0x2C4)
        self.block(AIF3_ADCDAT_CTRL)
        AIF3_ADCDAT_CTRL.register(4, 12, Datapoint("Reserved", default=0))
        AIF3_ADCDAT_CTRL.register(3, 1, Datapoint("AIF3_ADCP_ENA", default=0))
        AIF3_ADCDAT_CTRL.register(2, 1, Datapoint("AIF3_ADUL_ENA", default=0))
        AIF3_ADCDAT_CTRL.register(0, 2, Datapoint("Reserved", default=0))
        AIF3_DACDAT_CTRL = Reg32("AIF3_DACDAT_CTRL", 0x2C8)
        self.block(AIF3_DACDAT_CTRL)
        AIF3_DACDAT_CTRL.register(4, 12, Datapoint("Reserved", default=0))
        AIF3_DACDAT_CTRL.register(3, 1, Datapoint("AIF3_DACP_ENA", default=0))
        AIF3_DACDAT_CTRL.register(2, 1, Datapoint("AIF3_DAUL_ENA", default=0))
        AIF3_DACDAT_CTRL.register(1, 1, Datapoint("Reserved", default=0))
        AIF3_DACDAT_CTRL.register(0, 1, Datapoint("AIF3_LOOP_ENA", default=0))
        AIF3_SGP_CTRL = Reg32("AIF3_SGP_CTRL", 0x2CC)
        self.block(AIF3_SGP_CTRL)
        AIF3_SGP_CTRL.register(12, 4, Datapoint("Reserved", default=0))
        AIF3_SGP_CTRL.register(10, 2, Datapoint("AIF3_ADC_SRC", default=0))
        AIF3_SGP_CTRL.register(8, 2, Datapoint("AIF2_DAC_SRC", default=0))
        AIF3_SGP_CTRL.register(7, 1, Datapoint("AIF3_PINS_TRI", default=0))
        AIF3_SGP_CTRL.register(4, 3, Datapoint("AIF3_ADCDAT_SRC", default=0))
        AIF3_SGP_CTRL.register(3, 1, Datapoint("AIF2_ADCDAT_SRC", default=0))
        AIF3_SGP_CTRL.register(2, 1, Datapoint("AIF2_DACDAT_SRC", default=0))
        AIF3_SGP_CTRL.register(1, 1, Datapoint("AIF1_ADCDAT_SRC", default=0))
        AIF3_SGP_CTRL.register(0, 1, Datapoint("AIF1_DACDAT_SRC", default=0))
        AIF3_RXD_CTRL = Reg32("AIF3_RXD_CTRL", 0x2E4)
        self.block(AIF3_RXD_CTRL)
        AIF3_RXD_CTRL.register(8, 8, Datapoint("Afterdatareceivingprogressbegins", default=0))
        AIF3_RXD_CTRL.register(0, 8, Datapoint("Reserved", default=0))
        ADC_DIG_CTRL = Reg32("ADC_DIG_CTRL", 0x300)
        self.block(ADC_DIG_CTRL)
        ADC_DIG_CTRL.register(15, 1, Datapoint("ENAD", default=0))
        ADC_DIG_CTRL.register(14, 1, Datapoint("ENDM", default=0))
        ADC_DIG_CTRL.register(13, 1, Datapoint("ADFIR32", default=0))
        ADC_DIG_CTRL.register(4, 9, Datapoint("Reserved", default=0))
        ADC_DIG_CTRL.register(2, 2, Datapoint("ADOUT_DTS", default=0))
        ADC_DIG_CTRL.register(1, 1, Datapoint("ADOUT_DLY", default=0))
        ADC_DIG_CTRL.register(0, 1, Datapoint("Reserved", default=0))
        ADC_VOL_CTRL = Reg32("ADC_VOL_CTRL", 0x304)
        self.block(ADC_VOL_CTRL)
        ADC_VOL_CTRL.register(8, 8, Datapoint("ADC_VOL_L", default=160))
        ADC_VOL_CTRL.register(0, 8, Datapoint("ADC_VOL_R", default=160))
        DAC_DIG_CTRL = Reg32("DAC_DIG_CTRL", 0x320)
        self.block(DAC_DIG_CTRL)
        DAC_DIG_CTRL.register(15, 1, Datapoint("ENDA", default=0))
        DAC_DIG_CTRL.register(14, 1, Datapoint("ENHPF", default=0))
        DAC_DIG_CTRL.register(13, 1, Datapoint("DAFIR32", default=0))
        DAC_DIG_CTRL.register(12, 1, Datapoint("Reserved", default=0))
        DAC_DIG_CTRL.register(8, 4, Datapoint("MODQU", default=0))
        DAC_DIG_CTRL.register(0, 8, Datapoint("Reserved", default=0))
        DAC_VOL_CTRL = Reg32("DAC_VOL_CTRL", 0x324)
        self.block(DAC_VOL_CTRL)
        DAC_VOL_CTRL.register(8, 8, Datapoint("DAC_VOL_L", default=160))
        DAC_VOL_CTRL.register(0, 8, Datapoint("DAC_VOL_R", default=160))
        DAC_DBG_CTRL = Reg32("DAC_DBG_CTRL", 0x328)
        self.block(DAC_DBG_CTRL)
        DAC_DBG_CTRL.register(15, 1, Datapoint("DASW", default=0))
        DAC_DBG_CTRL.register(14, 1, Datapoint("ENDWA_N", default=0))
        DAC_DBG_CTRL.register(13, 1, Datapoint("DAC_MOD_DBG", default=0))
        DAC_DBG_CTRL.register(8, 5, Datapoint("Reserved", default=0))
        DAC_DBG_CTRL.register(6, 2, Datapoint("DAC_PTN_SEL", default=0))
        DAC_DBG_CTRL.register(0, 6, Datapoint("DVC", default=0))
        DAC_MXR_SRC = Reg32("DAC_MXR_SRC", 0x330)
        self.block(DAC_MXR_SRC)
        DAC_MXR_SRC.register(12, 4, Datapoint("DACL_MXR_SRC", default=0))
        DAC_MXR_SRC.register(8, 4, Datapoint("DACR_MXR_SRC", default=0))
        DAC_MXR_SRC.register(0, 8, Datapoint("Reserved", default=0))
        DAC_MXR_GAIN = Reg32("DAC_MXR_GAIN", 0x334)
        self.block(DAC_MXR_GAIN)
        DAC_MXR_GAIN.register(12, 4, Datapoint("DACL_MXR_GAIN", default=0))
        DAC_MXR_GAIN.register(8, 4, Datapoint("DACR_MXR_GAIN", default=0))
        DAC_MXR_GAIN.register(0, 8, Datapoint("Reserved", default=0))
        AC_ADC_DAPLSTA = Reg32("AC_ADC_DAPLSTA", 0x400)
        self.block(AC_ADC_DAPLSTA)
        AC_ADC_DAPLSTA.register(10, 6, Datapoint("Reserved", default=0))
        AC_ADC_DAPLSTA.register(9, 1, Datapoint("LeftAGCsaturationflag", default=0))
        AC_ADC_DAPLSTA.register(8, 1, Datapoint("LeftAGCnoise", default=0))
        AC_ADC_DAPLSTA.register(0, 8, Datapoint("LeftGainappliedbyAGC", default=0))
        AC_ADC_DAPRSTA = Reg32("AC_ADC_DAPRSTA", 0x404)
        self.block(AC_ADC_DAPRSTA)
        AC_ADC_DAPRSTA.register(10, 2, Datapoint("Reserved", default=0))
        AC_ADC_DAPRSTA.register(9, 1, Datapoint("RightAGCsaturationflag", default=0))
        AC_ADC_DAPRSTA.register(8, 1, Datapoint("RightAGCnoise", default=0))
        AC_ADC_DAPRSTA.register(0, 8, Datapoint("RightGainappliedbyAGC", default=0))
        AC_ADC_DAPLCTRL = Reg32("AC_ADC_DAPLCTRL", 0x408)
        self.block(AC_ADC_DAPLCTRL)
        AC_ADC_DAPLCTRL.register(15, 1, Datapoint("Reserved", default=0))
        AC_ADC_DAPLCTRL.register(14, 1, Datapoint("LeftAGCenable", default=0))
        AC_ADC_DAPLCTRL.register(13, 1, Datapoint("LeftHPFenable", default=0))
        AC_ADC_DAPLCTRL.register(12, 1, Datapoint("LeftNoisedetectenable", default=0))
        AC_ADC_DAPLCTRL.register(10, 2, Datapoint("Reserved", default=0))
        AC_ADC_DAPLCTRL.register(8, 2, Datapoint("LeftHysteresissetting", default=0))
        AC_ADC_DAPLCTRL.register(4, 4, Datapoint("LeftNoisedebouncetime", default=0))
        AC_ADC_DAPLCTRL.register(0, 4, Datapoint("LeftSignaldebouncetime", default=0))
        AC_ADC_DAPRCTRL = Reg32("AC_ADC_DAPRCTRL", 0x40C)
        self.block(AC_ADC_DAPRCTRL)
        AC_ADC_DAPRCTRL.register(15, 1, Datapoint("Reserved", default=0))
        AC_ADC_DAPRCTRL.register(14, 1, Datapoint("RightAGCenable", default=0))
        AC_ADC_DAPRCTRL.register(13, 1, Datapoint("RightHPFenable", default=0))
        AC_ADC_DAPRCTRL.register(12, 1, Datapoint("RightNoisedetectenable", default=0))
        AC_ADC_DAPRCTRL.register(10, 2, Datapoint("Reserved", default=0))
        AC_ADC_DAPRCTRL.register(8, 1, Datapoint("RightHysteresissetting", default=0))
        AC_ADC_DAPRCTRL.register(4, 1, Datapoint("RightNoisedebouncetime", default=0))
        AC_ADC_DAPRCTRL.register(0, 1, Datapoint("RightSignaldebouncetime", default=0))
        AC_ADC_DAPLTL = Reg32("AC_ADC_DAPLTL", 0x410)
        self.block(AC_ADC_DAPLTL)
        AC_ADC_DAPLTL.register(8, 6, Datapoint("", default=44))
        AC_ADC_DAPLTL.register(0, 8, Datapoint("", default=40))
        AC_ADC_DAPRTL = Reg32("AC_ADC_DAPRTL", 0x414)
        self.block(AC_ADC_DAPRTL)
        AC_ADC_DAPRTL.register(0, 11, Datapoint("Leftchanneloutputsignalaveragelevelcoefficient", default=5))
        AC_ADC_DAPLLAC = Reg32("AC_ADC_DAPLLAC", 0x41C)
        self.block(AC_ADC_DAPLLAC)
        AC_ADC_DAPLLAC.register(0, 16, Datapoint("Leftchanneloutputsignalaveragelevelcoefficient", default=7864))
        AC_ADC_DAPRHAC = Reg32("AC_ADC_DAPRHAC", 0x420)
        self.block(AC_ADC_DAPRHAC)
        AC_ADC_DAPRHAC.register(0, 11, Datapoint("Rightchanneloutputsignalaveragelevelcoefficient", default=5))
        AC_ADC_DAPRLAC = Reg32("AC_ADC_DAPRLAC", 0x424)
        self.block(AC_ADC_DAPRLAC)
        AC_ADC_DAPRLAC.register(0, 16, Datapoint("Rightchanneloutputsignalaveragelevelcoefficient", default=7864))
        AC_ADC_DAPLDT = Reg32("AC_ADC_DAPLDT", 0x428)
        self.block(AC_ADC_DAPLDT)
        AC_ADC_DAPLDT.register(0, 15, Datapoint("", default=31))
        AC_ADC_DAPLAT = Reg32("AC_ADC_DAPLAT", 0x42C)
        self.block(AC_ADC_DAPLAT)
        AC_ADC_DAPLAT.register(0, 15, Datapoint("Leftattacktimecoefficientsetting", default=0))
        AC_ADC_DAPRDT = Reg32("AC_ADC_DAPRDT", 0x430)
        self.block(AC_ADC_DAPRDT)
        AC_ADC_DAPRDT.register(0, 15, Datapoint("", default=31))
        AC_ADC_DAPRAT = Reg32("AC_ADC_DAPRAT", 0x434)
        self.block(AC_ADC_DAPRAT)
        AC_ADC_DAPRAT.register(0, 15, Datapoint("Rightattacktimecoefficientsetting", default=0))
        AC_ADC_DAPNTH = Reg32("AC_ADC_DAPNTH", 0x438)
        self.block(AC_ADC_DAPNTH)
        AC_ADC_DAPNTH.register(8, 5, Datapoint("", default=30))
        AC_ADC_DAPLHNAC = Reg32("AC_ADC_DAPLHNAC", 0x43C)
        self.block(AC_ADC_DAPLHNAC)
        AC_ADC_DAPLHNAC.register(0, 11, Datapoint("Leftinputsignalaveragefiltercoefficienttochecknoise", default=5))
        AC_ADC_DAPLLNAC = Reg32("AC_ADC_DAPLLNAC", 0x440)
        self.block(AC_ADC_DAPLLNAC)
        AC_ADC_DAPLLNAC.register(0, 16, Datapoint("Leftinputsignalaveragefiltercoefficienttochecknoise", default=7864))
        AC_ADC_DAPRHNAC = Reg32("AC_ADC_DAPRHNAC", 0x444)
        self.block(AC_ADC_DAPRHNAC)
        AC_ADC_DAPRHNAC.register(0, 11, Datapoint("Rightinputsignalaveragefiltercoefficienttochecknoise", default=5))
        AC_ADC_DAPRLNAC = Reg32("AC_ADC_DAPRLNAC", 0x448)
        self.block(AC_ADC_DAPRLNAC)
        AC_ADC_DAPRLNAC.register(0, 16, Datapoint("Rightinputsignalaveragefiltercoefficienttochecknoise", default=7864))
        AC_DAPHHPFC = Reg32("AC_DAPHHPFC", 0x44C)
        self.block(AC_DAPHHPFC)
        AC_DAPHHPFC.register(0, 11, Datapoint("HPFcoefficientsetting", default=255))
        AC_DAPLHPFC = Reg32("AC_DAPLHPFC", 0x450)
        self.block(AC_DAPLHPFC)
        AC_DAPLHPFC.register(0, 16, Datapoint("HPFcoefficientsetting", default=64193))
        AC_DAPOPT = Reg32("AC_DAPOPT", 0x454)
        self.block(AC_DAPOPT)
        AC_DAPOPT.register(10, 1, Datapoint("Leftenergydefaultvaluesetting", default=0))
        AC_DAPOPT.register(8, 2, Datapoint("Leftchannelgainhystersissetting", default=0))
        AC_DAPOPT.register(5, 1, Datapoint("Theinputsignalaveragefiltercoefficientsetting", default=0))
        AC_DAPOPT.register(4, 1, Datapoint("AGCoutputwhenthechannelinnoisestate", default=0))
        AC_DAPOPT.register(2, 1, Datapoint("Rightenergydefaultvaluesetting", default=0))
        AC_DAPOPT.register(0, 2, Datapoint("Rightchannelgainhystersissetting", default=0))
        AC_DAC_DAPCTRL = Reg32("AC_DAC_DAPCTRL", 0x480)
        self.block(AC_DAC_DAPCTRL)
        AC_DAC_DAPCTRL.register(2, 1, Datapoint("DRCenablecontrol", default=0))
        AC_DAC_DAPCTRL.register(1, 1, Datapoint("LeftchannelHPFenablecontrol", default=0))
        AC_DAC_DAPCTRL.register(0, 1, Datapoint("RightchannelHPFenablecontrol", default=0))
        AC_DAC_DAPHHPFC = Reg32("AC_DAC_DAPHHPFC", 0x484)
        self.block(AC_DAC_DAPHHPFC)
        AC_DAC_DAPHHPFC.register(0, 11, Datapoint("HPFcoefficientsetting", default=255))
        AC_DAC_DAPLHPFC = Reg32("AC_DAC_DAPLHPFC", 0x488)
        self.block(AC_DAC_DAPLHPFC)
        AC_DAC_DAPLHPFC.register(0, 16, Datapoint("HPFcoefficientsetting", default=64193))
        AC_DAC_DAPLHAVC = Reg32("AC_DAC_DAPLHAVC", 0x48C)
        self.block(AC_DAC_DAPLHAVC)
        AC_DAC_DAPLHAVC.register(0, 11, Datapoint("Leftchannelenergyaveragefiltercoefficientsetting", default=256))
        AC_DAC_DAPLLAVC = Reg32("AC_DAC_DAPLLAVC", 0x490)
        self.block(AC_DAC_DAPLLAVC)
        AC_DAC_DAPLLAVC.register(0, 16, Datapoint("Leftchannelenergyaveragefiltercoefficientsetting", default=0))
        AC_DAC_DAPRHAVC = Reg32("AC_DAC_DAPRHAVC", 0x494)
        self.block(AC_DAC_DAPRHAVC)
        AC_DAC_DAPRHAVC.register(0, 11, Datapoint("Rightchannelenergyaveragefiltercoefficientsetting", default=256))
        AC_DAC_DAPRLAVC = Reg32("AC_DAC_DAPRLAVC", 0x498)
        self.block(AC_DAC_DAPRLAVC)
        AC_DAC_DAPRLAVC.register(0, 16, Datapoint("Rightchannelenergyaveragefiltercoefficient", default=0))
        AC_DAC_DAPHGDEC = Reg32("AC_DAC_DAPHGDEC", 0x49C)
        self.block(AC_DAC_DAPHGDEC)
        AC_DAC_DAPHGDEC.register(0, 11, Datapoint("Gainsmoothfilterdecaytimecoefficientsetting", default=256))
        AC_DAC_DAPLGDEC = Reg32("AC_DAC_DAPLGDEC", 0x4A0)
        self.block(AC_DAC_DAPLGDEC)
        AC_DAC_DAPLGDEC.register(0, 16, Datapoint("Gainsmoothfilterdecaytimecoefficientsetting", default=0))
        AC_DAC_DAPHGATC = Reg32("AC_DAC_DAPHGATC", 0x4A4)
        self.block(AC_DAC_DAPHGATC)
        AC_DAC_DAPHGATC.register(0, 11, Datapoint("Gainsmoothfilterattacktimecoefficientsetting", default=256))
        AC_DAC_DAPLGATC = Reg32("AC_DAC_DAPLGATC", 0x4A8)
        self.block(AC_DAC_DAPLGATC)
        AC_DAC_DAPLGATC.register(0, 16, Datapoint("Gainsmoothfilterattacktimecoefficientsetting", default=0))
        AC_DAC_DAPHETHD = Reg32("AC_DAC_DAPHETHD", 0x4AC)
        self.block(AC_DAC_DAPHETHD)
        AC_DAC_DAPHETHD.register(0, 16, Datapoint("TheDRCEnergycompressthresholdparameterT", default=1275))
        AC_DAC_DAPLETHD = Reg32("AC_DAC_DAPLETHD", 0x4B0)
        self.block(AC_DAC_DAPLETHD)
        AC_DAC_DAPLETHD.register(0, 16, Datapoint("TheDRCEnergycompressthresholdparameterT", default=40656))
        AC_DAC_DAPHGKPA = Reg32("AC_DAC_DAPHGKPA", 0x4B4)
        self.block(AC_DAC_DAPHGKPA)
        AC_DAC_DAPHGKPA.register(0, 16, Datapoint("TheDRCgaincurveslopekparametersetting", default=1920))
        AC_DAC_DAPLGKPA = Reg32("AC_DAC_DAPLGKPA", 0x4B8)
        self.block(AC_DAC_DAPLGKPA)
        AC_DAC_DAPLGKPA.register(0, 16, Datapoint("TheDRCgaincurveslopekparametersetting", default=0))
        AC_DAC_DAPHGOPA = Reg32("AC_DAC_DAPHGOPA", 0x4BC)
        self.block(AC_DAC_DAPHGOPA)
        AC_DAC_DAPHGOPA.register(0, 16, Datapoint("TheDRCgaincurveoffsetOparametersetting", default=256))
        AC_DAC_DAPLGOPA = Reg32("AC_DAC_DAPLGOPA", 0x4C0)
        self.block(AC_DAC_DAPLGOPA)
        AC_DAC_DAPLGOPA.register(0, 16, Datapoint("TheDRCgaincurveoffsetOparametersetting", default=0))
        AC_DAC_DAPOPT = Reg32("AC_DAC_DAPOPT", 0x4C4)
        self.block(AC_DAC_DAPOPT)
        AC_DAC_DAPOPT.register(5, 1, Datapoint("DRCgaindefautvaluesetting", default=0))
        AC_DAC_DAPOPT.register(0, 5, Datapoint("Thehysteresisofthegainsmoothfiltertousethe", default=0))
        AGC_ENA = Reg32("AGC_ENA", 0x4D0)
        self.block(AGC_ENA)
        AGC_ENA.register(15, 1, Datapoint("AIF1_AD0L_AGC_ENA", default=0))
        AGC_ENA.register(14, 1, Datapoint("AIF1_AD0R_AGC_ENA", default=0))
        AGC_ENA.register(13, 1, Datapoint("AIF1_AD1L_AGC_ENA", default=0))
        AGC_ENA.register(12, 1, Datapoint("AIF1_AD1R_AGC_ENA", default=0))
        AGC_ENA.register(11, 1, Datapoint("AIF2_ADCL_AGC_ENA", default=0))
        AGC_ENA.register(10, 1, Datapoint("AIF2_ADCR_AGC_ENA", default=0))
        AGC_ENA.register(9, 1, Datapoint("AIF2_DACL_AGC_ENA", default=0))
        AGC_ENA.register(8, 1, Datapoint("AIF2_DACR_AGC_ENA", default=0))
        AGC_ENA.register(7, 1, Datapoint("ADCL_AGC_ENA", default=0))
        AGC_ENA.register(6, 1, Datapoint("ADCR_AGC_ENA", default=0))
        AGC_ENA.register(0, 6, Datapoint("Reserved", default=0))
        DRC_ENA = Reg32("DRC_ENA", 0x4D4)
        self.block(DRC_ENA)
        DRC_ENA.register(15, 1, Datapoint("AIF1_DAC0_DRC_ENA", default=0))
        DRC_ENA.register(14, 1, Datapoint("Reserved", default=0))
        DRC_ENA.register(13, 1, Datapoint("AIF1_DAC1_DRC_ENA", default=0))
        DRC_ENA.register(12, 1, Datapoint("Reserved", default=0))
        DRC_ENA.register(11, 1, Datapoint("AIF2_DAC_DRC_ENA", default=0))
        DRC_ENA.register(8, 3, Datapoint("Reserved", default=0))
        DRC_ENA.register(7, 1, Datapoint("DAC_DRC_ENA", default=0))
        DRC_ENA.register(0, 7, Datapoint("Reserved", default=0))
        SRC1_CTRL1 = Reg32("SRC1_CTRL1", 0x4E0)
        self.block(SRC1_CTRL1)
        SRC1_CTRL1.register(15, 1, Datapoint("SRC1_RATI_ENA", default=0))
        SRC1_CTRL1.register(14, 1, Datapoint("SRC1_LOCK_STS", default=0))
        SRC1_CTRL1.register(13, 1, Datapoint("SRC1_FIFO_OVR", default=0))
        SRC1_CTRL1.register(10, 3, Datapoint("SRC1_FIFO_LEV_", default=0))
        SRC1_CTRL1.register(0, 10, Datapoint("SRC1_RATI_SET_", default=0))
        SRC1_CTROL2 = Reg32("SRC1_CTROL2", 0x4E4)
        self.block(SRC1_CTROL2)
        SRC1_CTROL2.register(0, 16, Datapoint("SRC1_RATI_StET_", default=0))
        SRC1_CTRL3 = Reg32("SRC1_CTRL3", 0x4E8)
        self.block(SRC1_CTRL3)
        SRC1_CTRL3.register(10, 6, Datapoint("SRC1_FIFO_LEV_", default=0))
        SRC1_CTRL3.register(0, 10, Datapoint("SRC1_RATI_VAL_", default=64))
        SRC1_CTRL4 = Reg32("SRC1_CTRL4", 0x4EC)
        self.block(SRC1_CTRL4)
        SRC1_CTRL4.register(0, 16, Datapoint("SRC1_RATI_VAL_", default=0))
        SRC2_CTRL1 = Reg32("SRC2_CTRL1", 0x4F0)
        self.block(SRC2_CTRL1)
        SRC2_CTRL1.register(15, 1, Datapoint("SRC2_RATI_ENA", default=0))
        SRC2_CTRL1.register(14, 1, Datapoint("SRC2_LOCK_STS", default=0))
        SRC2_CTRL1.register(13, 1, Datapoint("SRC2_FIFO_OVR", default=0))
        SRC2_CTRL1.register(10, 3, Datapoint("SRC2_FIFO_LEV_", default=0))
        SRC2_CTRL1.register(0, 10, Datapoint("SRC2_RATI_SET_", default=0))
        SRC2_CTRL2 = Reg32("SRC2_CTRL2", 0x4F4)
        self.block(SRC2_CTRL2)
        SRC2_CTRL2.register(0, 16, Datapoint("SRC2_RATI_SET_", default=0))
        SRC2_CTRL3 = Reg32("SRC2_CTRL3", 0x4F8)
        self.block(SRC2_CTRL3)
        SRC2_CTRL3.register(10, 6, Datapoint("SRC2_FIFO_LEV_", default=0))
        SRC2_CTRL3.register(0, 10, Datapoint("SRC2_RATI_VAL_", default=64))
        SRC2_CTRL4 = Reg32("SRC2_CTRL4", 0x4FC)
        self.block(SRC2_CTRL4)
        SRC2_CTRL4.register(0, 16, Datapoint("SRC2_RATI_VAL_", default=0))
        HP_VOLC = Reg32("HP_VOLC", 0x00)
        self.block(HP_VOLC)
        HP_VOLC.register(7, 1, Datapoint("PAclockgatingcontrol", default=0))
        HP_VOLC.register(0, 6, Datapoint("HPVOL", default=0))
        LOMIXSC = Reg32("LOMIXSC", 0x01)
        self.block(LOMIXSC)
        LOMIXSC.register(0, 7, Datapoint("LMIXMUTE", default=0))
        ROMIXSC = Reg32("ROMIXSC", 0x02)
        self.block(ROMIXSC)
        ROMIXSC.register(0, 7, Datapoint("RMIXMUTE", default=0))
        DAC_PA_SRC = Reg32("DAC_PA_SRC", 0x03)
        self.block(DAC_PA_SRC)
        DAC_PA_SRC.register(7, 1, Datapoint("DACAREN", default=0))
        DAC_PA_SRC.register(6, 1, Datapoint("DACALEN", default=0))
        DAC_PA_SRC.register(5, 1, Datapoint("RMIXEN", default=0))
        DAC_PA_SRC.register(4, 1, Datapoint("LMIXEN", default=0))
        DAC_PA_SRC.register(3, 1, Datapoint("RHPPAMUTE", default=0))
        DAC_PA_SRC.register(2, 1, Datapoint("LHPPAMUTE", default=0))
        DAC_PA_SRC.register(1, 1, Datapoint("RHPIS", default=0))
        DAC_PA_SRC.register(0, 1, Datapoint("LHPIS", default=0))
        PHONEIN_GCTRL = Reg32("PHONEIN_GCTRL", 0x04)
        self.block(PHONEIN_GCTRL)
        PHONEIN_GCTRL.register(4, 3, Datapoint("PHONEPG", default=3))
        PHONEIN_GCTRL.register(0, 3, Datapoint("PHONENG", default=3))
        LINEIN_GCTRL = Reg32("LINEIN_GCTRL", 0x05)
        self.block(LINEIN_GCTRL)
        LINEIN_GCTRL.register(4, 3, Datapoint("LINEING", default=3))
        LINEIN_GCTRL.register(0, 3, Datapoint("PHONEG", default=3))
        MICIN_GCTRL = Reg32("MICIN_GCTRL", 0x06)
        self.block(MICIN_GCTRL)
        MICIN_GCTRL.register(4, 3, Datapoint("MIC1G", default=3))
        MICIN_GCTRL.register(0, 3, Datapoint("MIC2G", default=3))
        PAEN_HP_CTRL = Reg32("PAEN_HP_CTRL", 0x07)
        self.block(PAEN_HP_CTRL)
        PAEN_HP_CTRL.register(7, 1, Datapoint("HPPAEN", default=0))
        PAEN_HP_CTRL.register(5, 2, Datapoint("HPCOM_FC", default=0))
        PAEN_HP_CTRL.register(4, 1, Datapoint("COMPTEN", default=1))
        PAEN_HP_CTRL.register(2, 2, Datapoint("PA_ANTI_POP_CTRL", default=1))
        PAEN_HP_CTRL.register(1, 1, Datapoint("LTRNMUTE", default=0))
        PAEN_HP_CTRL.register(0, 1, Datapoint("RTLNMUTE", default=0))
        PHONEOUT_CTRL = Reg32("PHONEOUT_CTRL", 0x08)
        self.block(PHONEOUT_CTRL)
        PHONEOUT_CTRL.register(4, 1, Datapoint("PHONEOUTenable", default=0))
        PHONEOUT_CTRL.register(3, 1, Datapoint("PHONEOUTS3", default=0))
        PHONEOUT_CTRL.register(2, 1, Datapoint("PHONEOUTS2", default=0))
        PHONEOUT_CTRL.register(1, 1, Datapoint("PHONEOUTS1", default=0))
        PHONEOUT_CTRL.register(0, 1, Datapoint("PHONEOUTS0", default=0))
        PHONEP_N_GAIN_CTR = Reg32("PHONEP_N_GAIN_CTR", 0x09)
        self.block(PHONEP_N_GAIN_CTR)
        PHONEP_N_GAIN_CTR.register(0, 3, Datapoint("PHONEPREG", default=4))
        MIC2G_LINEEN_CTRL = Reg32("MIC2G_LINEEN_CTRL", 0x0A)
        self.block(MIC2G_LINEEN_CTRL)
        MIC2G_LINEEN_CTRL.register(7, 1, Datapoint("MIC2AMPEN", default=0))
        MIC2G_LINEEN_CTRL.register(4, 3, Datapoint("MIC2BOOST", default=4))
        MIC1G_MICBIAS_CTRL = Reg32("MIC1G_MICBIAS_CTRL", 0x0B)
        self.block(MIC1G_MICBIAS_CTRL)
        MIC1G_MICBIAS_CTRL.register(7, 1, Datapoint("HMICBIASEN", default=0))
        MIC1G_MICBIAS_CTRL.register(6, 1, Datapoint("MMICBIASEN", default=0))
        MIC1G_MICBIAS_CTRL.register(5, 1, Datapoint("HMICBIASMODE", default=0))
        MIC1G_MICBIAS_CTRL.register(3, 1, Datapoint("MIC1AMPEN", default=0))
        MIC1G_MICBIAS_CTRL.register(0, 3, Datapoint("MIC1BOOST", default=4))
        LADCMIXSC = Reg32("LADCMIXSC", 0x0C)
        self.block(LADCMIXSC)
        LADCMIXSC.register(0, 7, Datapoint("LADCMIXMUTE", default=0))
        RADCMIXSC = Reg32("RADCMIXSC", 0x0D)
        self.block(RADCMIXSC)
        RADCMIXSC.register(0, 7, Datapoint("RADCMIXMUTE", default=0))
        ReservedRegister = Reg32("ReservedRegister", 0x0E)
        self.block(ReservedRegister)
        ReservedRegister.register(0, 8, Datapoint("PA_ANTI_POP_CTRL", default=0))
        ADC_AP_EN = Reg32("ADC_AP_EN", 0x0F)
        self.block(ADC_AP_EN)
        ADC_AP_EN.register(6, 1, Datapoint("ADCLEN", default=0))
        ADC_AP_EN.register(0, 3, Datapoint("ADCG", default=3))
        ADDA_APT2 = Reg32("ADDA_APT2", 0x12)
        self.block(ADDA_APT2)
        ADDA_APT2.register(7, 1, Datapoint("functionenableformastervolumechangeatzerocrossover", default=0))
        ADDA_APT2.register(6, 1, Datapoint("Timeoutcontrolformastervolumechangeatzerocrossover", default=1))
        ADDA_APT2.register(4, 2, Datapoint("PTDBS", default=0))
        ADDA_APT2.register(3, 1, Datapoint("PA_SLOPE_SELECT", default=0))
        ADDA_APT2.register(0, 3, Datapoint("USB_BIAS_CUR", default=2))
        BIASCALI = Reg32("BIASCALI", 0x17)
        self.block(BIASCALI)
        BIASCALI.register(0, 8, Datapoint("BIASCALI", default=32))
        BIASVERIFY = Reg32("BIASVERIFY", 0x18)
        self.block(BIASVERIFY)
        BIASVERIFY.register(0, 8, Datapoint("BIASVERIFY", default=32))


class KEYADC(Device):
    def __init__(self, start=0x01C22800):
        super(KEYADC, self).__init__("KEYADC" , start)
        KEYADC_CTRL = Reg32("KEYADC_CTRL", 0x000)
        self.block(KEYADC_CTRL)
        KEYADC_CTRL.register(24, 1, Datapoint("FIRST_CONCERT_DLY", default=1))
        KEYADC_CTRL.register(22, 2, Datapoint("Reservedto0", default=0))
        KEYADC_CTRL.register(16, 4, Datapoint("CONTINUE_TIME_SELECT", default=0))
        KEYADC_CTRL.register(12, 2, Datapoint("KEY_MODE_SELECT", default=0))
        KEYADC_CTRL.register(8, 4, Datapoint("LEVELA_B_CNT", default=1))
        KEYADC_CTRL.register(7, 1, Datapoint("KEY_ADC_HOLD_KEY_EN", default=0))
        KEYADC_CTRL.register(6, 1, Datapoint("KEYADC_HOLD_EN", default=1))
        KEYADC_CTRL.register(4, 1, Datapoint("LEVELB_VOL", default=2))
        KEYADC_CTRL.register(2, 1, Datapoint("KEYADC_SAMPLE_RATE", default=2))
        KEYADC_INTC = Reg32("KEYADC_INTC", 0x04)
        self.block(KEYADC_INTC)
        KEYADC_INTC.register(4, 1, Datapoint("ADC0_KEYUP_IRQ_EN", default=0))
        KEYADC_INTC.register(3, 1, Datapoint("ADC0_ALRDY_HOLD_IRQ_EN", default=0))
        KEYADC_INTC.register(2, 1, Datapoint("ADC0_HOLD_IRQ_EN", default=0))
        KEYADC_INTC.register(1, 1, Datapoint("ADC0_KEYDOWN_EN", default=0))
        KEYADC_INTC.register(0, 1, Datapoint("ADC0_DATA_IRQ_EN", default=0))
        KEYADC_INT = Reg32("KEYADC_INT", 0x08)
        self.block(KEYADC_INT)
        KEYADC_INT.register(4, 1, Datapoint("ADC0_KEYUP_PENDING", default=0))
        KEYADC_INT.register(0, 1, Datapoint("KEYADC_EN", default=0))
        KEYADC_INT.register(3, 1, Datapoint("ADC0_ALRDY_HOLD_PENDING", default=0))
        KEYADC_INT.register(2, 1, Datapoint("ADC0_HOLDKEY_PENDING", default=0))
        KEYADC_INT.register(1, 1, Datapoint("ADC0_KEYDOWN_PENDING", default=0))
        KEYADC_INT.register(0, 1, Datapoint("ADC0_DATA_PENDING", default=0))
        KEYADC_DATA = Reg32("KEYADC_DATA", 0x0c)
        self.block(KEYADC_DATA)
        KEYADC_DATA.register(0, 6, Datapoint("KEYADC_DATA", default=0))


class THS(Device):
    def __init__(self, start=0x01C25000):
        super(THS, self).__init__("THS" , start)
        THS_CTRL0 = Reg32("THS_CTRL0", 0x00)
        self.block(THS_CTRL0)
        THS_CTRL0.register(22, 10, Datapoint("", default=None))
        THS_CTRL0.register(20, 2, Datapoint("DATA_CLK_DIVIDER", default=0))
        THS_CTRL0.register(16, 4, Datapoint("", default=None))
        THS_CTRL0.register(0, 16, Datapoint("TACQ", default=0))
        THS_CTRL1 = Reg32("THS_CTRL1", 0x04)
        self.block(THS_CTRL1)
        THS_CTRL1.register(9, 23, Datapoint("", default=None))
        THS_CTRL1.register(8, 1, Datapoint("CHOP_TEMP_EN", default=1))
        THS_CTRL1.register(7, 1, Datapoint("GPADC_CALI_EN", default=0))
        THS_CTRL1.register(0, 7, Datapoint("", default=None))
        THS_INT = Reg32("THS_INT", 0x10)
        self.block(THS_INT)
        THS_INT.register(19, 13, Datapoint("", default=None))
        THS_INT.register(18, 1, Datapoint("TEMP_IRQ_EN", default=0))
        THS_INT.register(0, 18, Datapoint("", default=None))
        DATA_FIFOS = Reg32("DATA_FIFOS", 0x14)
        self.block(DATA_FIFOS)
        DATA_FIFOS.register(18, 1, Datapoint("THS_DATA_PENDING", default=0))
        DATA_FIFOS.register(0, 18, Datapoint("", default=None))
        THS_TPR = Reg32("THS_TPR", 0x18)
        self.block(THS_TPR)
        THS_TPR.register(16, 1, Datapoint("THS_EN", default=0))
        THS_TPR.register(0, 16, Datapoint("THS_PER", default=0))
        THS_DATA = Reg32("THS_DATA", 0x20)
        self.block(THS_DATA)
        THS_DATA.register(0, 12, Datapoint("THS_DATA", default=0))
        THS_TPR = Reg32("THS_TPR", 0x40)
        self.block(THS_TPR)
        THS_TPR.register(0, 12, Datapoint("TEMP_CDATA", default=2048))


class SS(Device):
    def __init__(self, start=0x01C15000):
        super(SS, self).__init__("SS" , start)
        SS_CTL = Reg32("SS_CTL", 0x00)
        self.block(SS_CTL)
        SS_CTL.register(24, 4, Datapoint("SKEY_SELECT", default=0))
        SS_CTL.register(16, 3, Datapoint("DIE_ID", default=None))
        SS_CTL.register(15, 1, Datapoint("PRNG_MODE", default=0))
        SS_CTL.register(14, 1, Datapoint("IV_MODE", default=0))
        SS_CTL.register(12, 2, Datapoint("SS_OP_MODE", default=0))
        SS_CTL.register(10, 2, Datapoint("CTR_WIDTH", default=0))
        SS_CTL.register(8, 2, Datapoint("AES_KEY_SIZE", default=0))
        SS_CTL.register(7, 1, Datapoint("SS_OP_DIR", default=0))
        SS_CTL.register(4, 3, Datapoint("SS_METHOD", default=0))
        SS_CTL.register(2, 1, Datapoint("SHA1_MD5_END_BIT", default=0))
        SS_CTL.register(1, 1, Datapoint("PRNG_START", default=0))
        SS_CTL.register(0, 1, Datapoint("SS_ENABLE", default=0))
        SS_CTL.register(0, 32, Datapoint("SS_KEY", default=0))
        SS_CTL.register(0, 32, Datapoint("SS_IV_VALUE", default=0))
        SS_CTL.register(0, 32, Datapoint("SS_CTR_VALUE", default=0))
        SS_FCSR = Reg32("SS_FCSR", 0x44)
        self.block(SS_FCSR)
        SS_FCSR.register(30, 1, Datapoint("RXFIFO_STATUS", default=1))
        SS_FCSR.register(24, 6, Datapoint("RXFIFO_EMP_CNT", default=32))
        SS_FCSR.register(22, 1, Datapoint("TXFIFO_STATUS", default=0))
        SS_FCSR.register(16, 6, Datapoint("TXFIFO_AVA_CNT", default=0))
        SS_FCSR.register(8, 5, Datapoint("RXFIFO_INT_TRIG_LEVEL", default=15))
        SS_FCSR.register(0, 5, Datapoint("TXFIFO_INT_TRIG_LEVEL", default=15))
        SS_ICSR = Reg32("SS_ICSR", 0x48)
        self.block(SS_ICSR)
        SS_ICSR.register(10, 1, Datapoint("RXFIFO_EMP_PENDING_BIT", default=0))
        SS_ICSR.register(8, 1, Datapoint("TXFIFO_AVA_PENDING_BIT", default=0))
        SS_ICSR.register(4, 1, Datapoint("DRQ_ENABLE", default=0))
        SS_ICSR.register(2, 1, Datapoint("RXFIFO_EMP_INT_ENABLE", default=0))
        SS_ICSR.register(0, 1, Datapoint("TXFIFO_AVA_INT_ENABLE", default=0))
        SS_ICSR.register(0, 32, Datapoint("SS_MID_DATA", default=0))
        SS_CTS_LEN = Reg32("SS_CTS_LEN", 0x60)
        self.block(SS_CTS_LEN)
        SS_CTS_LEN.register(0, 32, Datapoint("AES", default=0))
        SS_RX = Reg32("SS_RX", 0x200)
        self.block(SS_RX)
        SS_RX.register(0, 32, Datapoint("SS_RX_FIFO", default=0))
        SS_TX = Reg32("SS_TX", 0x204)
        self.block(SS_TX)
        SS_TX.register(0, 32, Datapoint("SS_TX_FIFO", default=0))


class PIO(Device):
    def __init__(self, start=0x01C20800):
        super(PIO, self).__init__("PIO" , start)
        PB_CFG0 = Reg32("PB_CFG0", 0x24)
        self.block(PB_CFG0)
        PB_CFG0.register(28, 3, Datapoint("PB7_SELECT", default=7))
        PB_CFG0.register(24, 3, Datapoint("PB6_SELECT", default=7))
        PB_CFG0.register(20, 3, Datapoint("PB5_SELECT", default=7))
        PB_CFG0.register(16, 3, Datapoint("PB4_SELECT", default=7))
        PB_CFG0.register(12, 3, Datapoint("PB3_SELECT", default=7))
        PB_CFG0.register(8, 3, Datapoint("PB2_SELECT", default=7))
        PB_CFG0.register(4, 3, Datapoint("PB1_SELECT", default=7))
        PB_CFG0.register(0, 3, Datapoint("PB0_SELECT", default=7))
        PB_CFG1 = Reg32("PB_CFG1", 0x28)
        self.block(PB_CFG1)
        PB_CFG1.register(0, 8, Datapoint("PB_DAT", default=0))
        PB_DRV0 = Reg32("PB_DRV0", 0x38)
        self.block(PB_DRV0)
        PB_DRV0.register(16, 16, Datapoint("Reserved", default=None))
        PB_DRV1 = Reg32("PB_DRV1", 0x3C)
        self.block(PB_DRV1)
        PB_DRV1.register(16, 1, Datapoint("Reserved", default=None))
        PB_PULL1 = Reg32("PB_PULL1", 0x44)
        self.block(PB_PULL1)
        PB_PULL1.register(28, 3, Datapoint("PC7_SELECT", default=7))
        PB_PULL1.register(24, 3, Datapoint("PC6_SELECT", default=7))
        PB_PULL1.register(20, 3, Datapoint("PC5_SELECT", default=7))
        PB_PULL1.register(16, 3, Datapoint("PC4_SELECT", default=7))
        PB_PULL1.register(12, 3, Datapoint("PC3_SELECT", default=7))
        PB_PULL1.register(8, 3, Datapoint("PC2_SELECT", default=7))
        PB_PULL1.register(4, 3, Datapoint("PC1_SELECT", default=7))
        PB_PULL1.register(0, 3, Datapoint("PC0_SELECT", default=7))
        PC_CFG1 = Reg32("PC_CFG1", 0x4C)
        self.block(PC_CFG1)
        PC_CFG1.register(28, 3, Datapoint("PC15_SELECT", default=7))
        PC_CFG1.register(24, 3, Datapoint("PC14_SELECT", default=7))
        PC_CFG1.register(20, 3, Datapoint("PC13_SELECT", default=7))
        PC_CFG1.register(16, 3, Datapoint("PC12_SELECT", default=7))
        PC_CFG1.register(12, 3, Datapoint("PC11_SELECT", default=7))
        PC_CFG1.register(8, 3, Datapoint("PC10_SELECT", default=7))
        PC_CFG1.register(4, 3, Datapoint("PC9_SELECT", default=7))
        PC_CFG1.register(0, 3, Datapoint("PC8_SELECT", default=7))
        PC_CFG2 = Reg32("PC_CFG2", 0x50)
        self.block(PC_CFG2)
        PC_CFG2.register(0, 3, Datapoint("PC16_SELECT", default=7))
        PC_CFG3 = Reg32("PC_CFG3", 0x54)
        self.block(PC_CFG3)
        PC_CFG3.register(0, 19, Datapoint("PC_DAT", default=0))
        PC_DRV0 = Reg32("PC_DRV0", 0x5C)
        self.block(PC_DRV0)
        PC_DRV0.register(28, 3, Datapoint("PD7_SELECT", default=7))
        PC_DRV0.register(27, 1, Datapoint("Reserved", default=None))
        PC_DRV0.register(24, 3, Datapoint("PD6_SELECT", default=7))
        PC_DRV0.register(20, 3, Datapoint("PD5_SELECT", default=7))
        PC_DRV0.register(16, 3, Datapoint("PD4_SELECT", default=7))
        PC_DRV0.register(12, 3, Datapoint("PD3_SELECT", default=7))
        PC_DRV0.register(8, 3, Datapoint("PD2_SELECT", default=7))
        PD_CFG1 = Reg32("PD_CFG1", 0x70)
        self.block(PD_CFG1)
        PD_CFG1.register(28, 3, Datapoint("PD15_SELECT", default=7))
        PD_CFG1.register(24, 3, Datapoint("PD14_SELECT", default=7))
        PD_CFG1.register(20, 3, Datapoint("PD13_SELECT", default=7))
        PD_CFG1.register(16, 3, Datapoint("PD12_SELECT", default=7))
        PD_CFG1.register(12, 3, Datapoint("PD11_SELECT", default=7))
        PD_CFG1.register(8, 3, Datapoint("PD10_SELECT", default=7))
        PD_CFG2 = Reg32("PD_CFG2", 0x74)
        self.block(PD_CFG2)
        PD_CFG2.register(28, 3, Datapoint("PD23_SELECT", default=7))
        PD_CFG2.register(24, 3, Datapoint("PD22_SELECT", default=7))
        PD_CFG2.register(20, 3, Datapoint("PD21_SELECT", default=7))
        PD_CFG2.register(16, 3, Datapoint("PD20_SELECT", default=7))
        PD_CFG2.register(12, 3, Datapoint("PD19_SELECT", default=7))
        PD_CFG2.register(8, 3, Datapoint("PD18_SELECT", default=7))
        PD_CFG3 = Reg32("PD_CFG3", 0x78)
        self.block(PD_CFG3)
        PD_CFG3.register(12, 3, Datapoint("PD27_SELECT", default=7))
        PD_CFG3.register(11, 1, Datapoint("Reserved", default=None))
        PD_CFG3.register(8, 3, Datapoint("PD26_SELECT", default=7))
        PD_CFG3.register(4, 3, Datapoint("PD25_SELECT", default=7))
        PD_CFG3.register(0, 3, Datapoint("PD24_SELECT", default=7))
        PD_DAT = Reg32("PD_DAT", 0x7C)
        self.block(PD_DAT)
        PD_DAT.register(0, 28, Datapoint("PD_DAT", default=0))
        PD_DRV0 = Reg32("PD_DRV0", 0x80)
        self.block(PD_DRV0)
        PD_DRV0.register(28, 3, Datapoint("PE7_SELECT", default=7))
        PD_DRV0.register(24, 3, Datapoint("PE6_SELECT", default=7))
        PD_DRV0.register(20, 3, Datapoint("PE5_SELECT", default=7))
        PD_DRV0.register(16, 3, Datapoint("PE4_SELECT", default=7))
        PD_DRV0.register(12, 3, Datapoint("PE3_SELECT", default=7))
        PD_DRV0.register(8, 3, Datapoint("PE2_SELECT", default=7))
        PD_DRV0.register(4, 3, Datapoint("PE1_SELECT", default=7))
        PD_DRV0.register(0, 3, Datapoint("PE0_SELECT", default=7))
        PE_CFG1 = Reg32("PE_CFG1", 0x94)
        self.block(PE_CFG1)
        PE_CFG1.register(28, 3, Datapoint("PE15_SELECT", default=7))
        PE_CFG1.register(24, 3, Datapoint("PE14_SELECT", default=7))
        PE_CFG1.register(20, 3, Datapoint("PE13_SELECT", default=7))
        PE_CFG1.register(16, 3, Datapoint("PE12_SELECT", default=7))
        PE_CFG1.register(12, 3, Datapoint("PE11_SELECT", default=7))
        PE_CFG1.register(8, 3, Datapoint("PE10_SELECT", default=7))
        PE_CFG1.register(4, 3, Datapoint("PE9_SELECT", default=7))
        PE_CFG1.register(0, 3, Datapoint("PE8_SELECT", default=7))
        PE_CFG2 = Reg32("PE_CFG2", 0x98)
        self.block(PE_CFG2)
        PE_CFG2.register(4, 3, Datapoint("PE17_SELECT", default=7))
        PE_CFG2.register(0, 3, Datapoint("PE16_SELECT", default=7))
        PE_CFG2 = Reg32("PE_CFG2", 0x9C)
        self.block(PE_CFG2)
        PE_CFG2.register(0, 18, Datapoint("PE_DAT", default=0))
        PE_DRV0 = Reg32("PE_DRV0", 0xA4)
        self.block(PE_DRV0)
        PE_DRV0.register(20, 3, Datapoint("PF5_SELECT", default=3))
        PE_DRV0.register(16, 3, Datapoint("PF4_SELECT", default=7))
        PE_DRV0.register(12, 3, Datapoint("PF3_SELECT", default=3))
        PE_DRV0.register(8, 3, Datapoint("PF2_SELECT", default=7))
        PE_DRV0.register(4, 3, Datapoint("PF1_SELECT", default=3))
        PE_DRV0.register(0, 3, Datapoint("PF0_SELECT", default=3))
        PF_CFG1 = Reg32("PF_CFG1", 0xB8)
        self.block(PF_CFG1)
        PF_CFG1.register(0, 6, Datapoint("PF_DAT", default=0))
        PF_DRV0 = Reg32("PF_DRV0", 0xC8)
        self.block(PF_DRV0)
        PF_DRV0.register(28, 3, Datapoint("PG7_SELECT", default=7))
        PF_DRV0.register(24, 3, Datapoint("PG6_SELECT", default=7))
        PF_DRV0.register(20, 3, Datapoint("PG5_SELECT", default=7))
        PF_DRV0.register(16, 3, Datapoint("PG4_SELECT", default=7))
        PF_DRV0.register(12, 3, Datapoint("PG3_SELECT", default=7))
        PF_DRV0.register(8, 3, Datapoint("PG2_SELECT", default=7))
        PF_DRV0.register(4, 3, Datapoint("PG1_SELECT", default=7))
        PF_DRV0.register(0, 3, Datapoint("PG0_SELECT", default=7))
        PG_CFG1 = Reg32("PG_CFG1", 0xDC)
        self.block(PG_CFG1)
        PG_CFG1.register(20, 3, Datapoint("PG13_SELECT", default=7))
        PG_CFG1.register(16, 3, Datapoint("PG12_SELECT", default=7))
        PG_CFG1.register(12, 3, Datapoint("PG11_SELECT", default=7))
        PG_CFG1.register(8, 3, Datapoint("PG10_SELECT", default=7))
        PG_CFG1.register(4, 3, Datapoint("PG9_SELECT", default=7))
        PG_CFG1.register(0, 3, Datapoint("PG8_SELECT", default=7))
        PG_CFG2 = Reg32("PG_CFG2", 0xE0)
        self.block(PG_CFG2)
        PG_CFG2.register(0, 14, Datapoint("PG_DAT", default=0))
        PG_DRV0 = Reg32("PG_DRV0", 0xEC)
        self.block(PG_DRV0)
        PG_DRV0.register(28, 3, Datapoint("PH7_SELECT", default=7))
        PG_DRV0.register(24, 3, Datapoint("PH6_SELECT", default=7))
        PG_DRV0.register(20, 3, Datapoint("PH5_SELECT", default=7))
        PG_DRV0.register(16, 3, Datapoint("PH4_SELECT", default=7))
        PG_DRV0.register(12, 3, Datapoint("PH3_SELECT", default=7))
        PG_DRV0.register(8, 3, Datapoint("PH2_SELECT", default=7))
        PG_DRV0.register(4, 3, Datapoint("PH1_SELECT", default=7))
        PG_DRV0.register(0, 3, Datapoint("PH0_SELECT", default=7))
        PH_CFG1 = Reg32("PH_CFG1", 0x100)
        self.block(PH_CFG1)
        PH_CFG1.register(4, 3, Datapoint("PH9_SELECT", default=7))
        PH_CFG1.register(0, 3, Datapoint("PH8_SELECT", default=7))
        PH_CFG2 = Reg32("PH_CFG2", 0x104)
        self.block(PH_CFG2)
        PH_CFG2.register(0, 10, Datapoint("PH_DAT", default=0))
        PH_DRV0 = Reg32("PH_DRV0", 0x110)
        self.block(PH_DRV0)
        PH_DRV0.register(4, 3, Datapoint("DEB_CLK_PRE_SCALE", default=0))
        PH_DRV0.register(0, 1, Datapoint("PIO_INT_CLK_SELECT", default=0))
        PG_EINT_CFG0 = Reg32("PG_EINT_CFG0", 0x240)
        self.block(PG_EINT_CFG0)
        PG_EINT_CFG0.register(5, 1, Datapoint("EINT_STATUS", default=0))
        PG_EINT_DEB = Reg32("PG_EINT_DEB", 0x258)
        self.block(PG_EINT_DEB)
        PG_EINT_DEB.register(4, 3, Datapoint("DEB_CLK_PRE_SCALE", default=0))
        PG_EINT_DEB.register(0, 1, Datapoint("PIO_INT_CLK_SELECT", default=0))
        PG_EINT_DEB.register(9, 1, Datapoint("bit", default=8))
        PG_EINT_DEB.register(656, 1, Datapoint("compatible", default=1537))


class TCON(Device):
    def __init__(self, start=0x01C0C000):
        super(TCON, self).__init__("TCON" , start)
        TCON_GCTL_REG = Reg32("TCON_GCTL_REG", 0x000)
        self.block(TCON_GCTL_REG)
        TCON_GCTL_REG.register(31, 1, Datapoint("TCON_En", default=0))
        TCON_GCTL_REG.register(30, 1, Datapoint("TCON_Gamma_En", default=0))
        TCON_GINT0_REG = Reg32("TCON_GINT0_REG", 0x004)
        self.block(TCON_GINT0_REG)
        TCON_GINT0_REG.register(31, 1, Datapoint("TCON0_Vb_Int_En", default=0))
        TCON_GINT0_REG.register(29, 1, Datapoint("TCON0_Line_Int_En", default=0))
        TCON_GINT0_REG.register(27, 1, Datapoint("TCON0_Tri_Finish_Int_En", default=0))
        TCON_GINT0_REG.register(26, 1, Datapoint("TCON0_Tri_Counter_Int_En", default=0))
        TCON_GINT0_REG.register(15, 1, Datapoint("TCON0_Vb_Int_Flag", default=0))
        TCON_GINT0_REG.register(13, 1, Datapoint("TCON0_Line_Int_Flag", default=0))
        TCON_GINT0_REG.register(11, 1, Datapoint("TCON0_Tri_Finish_Int_Flag", default=0))
        TCON_GINT0_REG.register(10, 1, Datapoint("TCON0_Tri_Counter_Int_Flag", default=0))
        TCON_GINT0_REG.register(9, 1, Datapoint("TCON0_Tri_Underflow_Flag", default=0))
        TCON_GINT1_REG = Reg32("TCON_GINT1_REG", 0x008)
        self.block(TCON_GINT1_REG)
        TCON_GINT1_REG.register(16, 12, Datapoint("TCON0_Line_Int_Num", default=0))
        TCON0_FRM_CTL_REG = Reg32("TCON0_FRM_CTL_REG", 0x010)
        self.block(TCON0_FRM_CTL_REG)
        TCON0_FRM_CTL_REG.register(31, 1, Datapoint("TCON0_Frm_En", default=0))
        TCON0_FRM_CTL_REG.register(6, 1, Datapoint("TCON0_Frm_Mode_R", default=0))
        TCON0_FRM_CTL_REG.register(5, 1, Datapoint("TCON0_Frm_Mode_G", default=0))
        TCON0_FRM_CTL_REG.register(4, 1, Datapoint("TCON0_Frm_Mode_B", default=0))
        TCON0_FRM_CTL_REG.register(0, 2, Datapoint("TCON0_Frm_Test", default=0))
        TCON0_CTL_REG = Reg32("TCON0_CTL_REG", 0x040)
        self.block(TCON0_CTL_REG)
        TCON0_CTL_REG.register(31, 1, Datapoint("TCON0_En", default=0))
        TCON0_CTL_REG.register(28, 1, Datapoint("TCON0_Work_Mode", default=0))
        TCON0_CTL_REG.register(24, 2, Datapoint("TCON0_IF", default=0))
        TCON0_CTL_REG.register(23, 1, Datapoint("TCON0_RB_Swap", default=0))
        TCON0_CTL_REG.register(21, 1, Datapoint("TCON0_FIFO1_Rst", default=0))
        TCON0_CTL_REG.register(4, 5, Datapoint("TCON0_Start_Delay", default=0))
        TCON0_CTL_REG.register(0, 3, Datapoint("TCON0_SRC_SEL", default=0))
        TCON0_DCLKREG = Reg32("TCON0_DCLKREG", 0x044)
        self.block(TCON0_DCLKREG)
        TCON0_DCLKREG.register(28, 4, Datapoint("TCON0_Dclk_En", default=0))
        TCON0_DCLKREG.register(0, 7, Datapoint("TCON0_Dclk_Div", default=0))
        TCON0_BASIC0_REG = Reg32("TCON0_BASIC0_REG", 0x048)
        self.block(TCON0_BASIC0_REG)
        TCON0_BASIC0_REG.register(16, 12, Datapoint("TCON0_X", default=0))
        TCON0_BASIC0_REG.register(0, 12, Datapoint("TCON0_Y", default=0))
        TCON0_BASIC1_REG = Reg32("TCON0_BASIC1_REG", 0x04C)
        self.block(TCON0_BASIC1_REG)
        TCON0_BASIC1_REG.register(31, 1, Datapoint("Reserved", default=0))
        TCON0_BASIC1_REG.register(16, 13, Datapoint("HT", default=0))
        TCON0_BASIC1_REG.register(0, 12, Datapoint("HBP", default=0))
        TCON0_BASIC2_REG = Reg32("TCON0_BASIC2_REG", 0x050)
        self.block(TCON0_BASIC2_REG)
        TCON0_BASIC2_REG.register(16, 13, Datapoint("VT", default=0))
        TCON0_BASIC2_REG.register(0, 12, Datapoint("VBP", default=0))
        TCON0_BASIC3_REG = Reg32("TCON0_BASIC3_REG", 0x054)
        self.block(TCON0_BASIC3_REG)
        TCON0_BASIC3_REG.register(16, 10, Datapoint("HSPW", default=0))
        TCON0_BASIC3_REG.register(0, 10, Datapoint("VSPW", default=0))
        TCON0_HV_IF_REG = Reg32("TCON0_HV_IF_REG", 0x058)
        self.block(TCON0_HV_IF_REG)
        TCON0_HV_IF_REG.register(28, 4, Datapoint("HV_Mode", default=0))
        TCON0_HV_IF_REG.register(26, 2, Datapoint("RGB888_SM0", default=0))
        TCON0_HV_IF_REG.register(24, 2, Datapoint("RGB888_SM1", default=0))
        TCON0_HV_IF_REG.register(22, 2, Datapoint("YUV_SM", default=0))
        TCON0_HV_IF_REG.register(1, 20, Datapoint("YUVEAV", default=0))
        TCON0_CPU_IF_REG = Reg32("TCON0_CPU_IF_REG", 0x060)
        self.block(TCON0_CPU_IF_REG)
        TCON0_CPU_IF_REG.register(28, 4, Datapoint("CPU_Mode", default=0))
        TCON0_CPU_IF_REG.register(26, 1, Datapoint("DA", default=0))
        TCON0_CPU_IF_REG.register(25, 1, Datapoint("CA", default=0))
        TCON0_CPU_IF_REG.register(23, 1, Datapoint("Wr_Flag", default=0))
        TCON0_CPU_IF_REG.register(22, 1, Datapoint("Rd_Flag", default=0))
        TCON0_CPU_IF_REG.register(17, 1, Datapoint("AUTO", default=0))
        TCON0_CPU_IF_REG.register(16, 1, Datapoint("FLUSH", default=0))
        TCON0_CPU_IF_REG.register(4, 2, Datapoint("Trigger_Sync_Mode", default=0))
        TCON0_CPU_IF_REG.register(3, 1, Datapoint("Trigger_FIFO_Bist_En", default=0))
        TCON0_CPU_IF_REG.register(2, 1, Datapoint("Trigger_FIFO_En", default=0))
        TCON0_CPU_IF_REG.register(1, 1, Datapoint("Trigger_Start", default=0))
        TCON0_CPU_IF_REG.register(0, 1, Datapoint("Trigger_En", default=0))
        TCON0_CPU_WR_REG = Reg32("TCON0_CPU_WR_REG", 0x064)
        self.block(TCON0_CPU_WR_REG)
        TCON0_CPU_WR_REG.register(0, 24, Datapoint("Data_Wr", default=0))
        TCON0_CPU_RD0_REG = Reg32("TCON0_CPU_RD0_REG", 0x068)
        self.block(TCON0_CPU_RD0_REG)
        TCON0_CPU_RD0_REG.register(0, 24, Datapoint("Data_Rd0", default=None))
        TCON0_CPU_RD1_REG = Reg32("TCON0_CPU_RD1_REG", 0x06C)
        self.block(TCON0_CPU_RD1_REG)
        TCON0_CPU_RD1_REG.register(0, 24, Datapoint("Data_Rd1", default=None))
        TCON0_LVDS_IF_REG = Reg32("TCON0_LVDS_IF_REG", 0x084)
        self.block(TCON0_LVDS_IF_REG)
        TCON0_LVDS_IF_REG.register(31, 1, Datapoint("TCON0_LVDS_En", default=0))
        TCON0_LVDS_IF_REG.register(30, 1, Datapoint("TCON0_LVDS_Link_Sel", default=0))
        TCON0_LVDS_IF_REG.register(29, 1, Datapoint("TCON0_LVDS_Even_Odd_Dir", default=0))
        TCON0_LVDS_IF_REG.register(28, 1, Datapoint("TCON0_LVDS_Dir", default=0))
        TCON0_LVDS_IF_REG.register(27, 1, Datapoint("TCON0_LVDS_Mode", default=0))
        TCON0_LVDS_IF_REG.register(26, 1, Datapoint("TCON0_LVDS_BitWidth", default=0))
        TCON0_LVDS_IF_REG.register(23, 1, Datapoint("TCON0_LVDS_Correct_Mode", default=0))
        TCON0_LVDS_IF_REG.register(20, 1, Datapoint("TCON0_LVDS_Clk_Sel", default=0))
        TCON0_IO_POL_REG = Reg32("TCON0_IO_POL_REG", 0x088)
        self.block(TCON0_IO_POL_REG)
        TCON0_IO_POL_REG.register(31, 1, Datapoint("IO_Output_Sel", default=0))
        TCON0_IO_POL_REG.register(28, 3, Datapoint("DCLK_Sel", default=0))
        TCON0_IO_POL_REG.register(1, 1, Datapoint("phaseoffset", default=3))
        TCON0_IO_POL_REG.register(2, 1, Datapoint("phaseoffset", default=3))
        TCON0_IO_POL_REG.register(0, 1, Datapoint("phase0", default=2))
        TCON0_IO_POL_REG.register(0, 1, Datapoint("phase90", default=2))
        TCON0_IO_POL_REG.register(27, 1, Datapoint("IO3_Inv", default=0))
        TCON0_IO_POL_REG.register(26, 1, Datapoint("IO2_Inv", default=0))
        TCON0_IO_POL_REG.register(25, 1, Datapoint("IO1_Inv", default=0))
        TCON0_IO_POL_REG.register(24, 1, Datapoint("IO0_Inv", default=0))
        TCON0_IO_POL_REG.register(0, 24, Datapoint("Data_Inv", default=0))
        TCON0_IO_TRI_REG = Reg32("TCON0_IO_TRI_REG", 0x08C)
        self.block(TCON0_IO_TRI_REG)
        TCON0_IO_TRI_REG.register(28, 1, Datapoint("RGB_Endian", default=None))
        TCON0_IO_TRI_REG.register(27, 1, Datapoint("IO3_Output_Tri_En", default=1))
        TCON0_IO_TRI_REG.register(26, 1, Datapoint("IO2_Output_Tri_En", default=1))
        TCON0_IO_TRI_REG.register(25, 1, Datapoint("IO1_Output_Tri_En", default=1))
        TCON0_IO_TRI_REG.register(24, 1, Datapoint("IO0_Output_Tri_En", default=1))
        TCON0_IO_TRI_REG.register(0, 24, Datapoint("Data_Output_Tri_En", default=16777215))
        TCON_ECC_FIFO_REG = Reg32("TCON_ECC_FIFO_REG", 0x0F8)
        self.block(TCON_ECC_FIFO_REG)
        TCON_ECC_FIFO_REG.register(31, 1, Datapoint("ECC_FIFO_BIST_EN", default=None))
        TCON_ECC_FIFO_REG.register(30, 1, Datapoint("ECC_FIFO_ERR_FLAG", default=None))
        TCON_ECC_FIFO_REG.register(16, 8, Datapoint("ECC_FIFO_ERR_BITS", default=None))
        TCON_ECC_FIFO_REG.register(8, 1, Datapoint("ECC_FIFO_BLANK_EN", default=None))
        TCON_ECC_FIFO_REG.register(0, 8, Datapoint("ECC_FIFO_SETTING", default=None))
        TCON_DEBUG_REG = Reg32("TCON_DEBUG_REG", 0x0FC)
        self.block(TCON_DEBUG_REG)
        TCON_DEBUG_REG.register(31, 1, Datapoint("TCON0_FIFO_Under_Flow", default=None))
        TCON_DEBUG_REG.register(29, 1, Datapoint("TCON0_Field_Polarity", default=None))
        TCON_DEBUG_REG.register(16, 12, Datapoint("TCON0_Current_Line", default=None))
        TCON_DEBUG_REG.register(13, 1, Datapoint("ECC_FIFO_Bypass", default=0))
        TCON_CEU_CTL_REG = Reg32("TCON_CEU_CTL_REG", 0x100)
        self.block(TCON_CEU_CTL_REG)
        TCON_CEU_CTL_REG.register(31, 1, Datapoint("CEU_en", default=0))
        TCON_CEU_CTL_REG.register(0, 13, Datapoint("CEU_Coef_Mul_Value", default=0))
        TCON_CEU_CTL_REG.register(0, 19, Datapoint("CEU_Coef_Add_Value", default=0))
        TCON_CEU_CTL_REG.register(16, 8, Datapoint("CEU_Coef_Range_Min", default=0))
        TCON_CEU_CTL_REG.register(0, 8, Datapoint("CEUCoef_Range_Max", default=0))
        TCON0_CPU_TRI0_REG = Reg32("TCON0_CPU_TRI0_REG", 0x160)
        self.block(TCON0_CPU_TRI0_REG)
        TCON0_CPU_TRI0_REG.register(16, 12, Datapoint("Block_Space", default=0))
        TCON0_CPU_TRI0_REG.register(0, 12, Datapoint("Block_Size", default=0))
        TCON0_CPU_TRI1_REG = Reg32("TCON0_CPU_TRI1_REG", 0x164)
        self.block(TCON0_CPU_TRI1_REG)
        TCON0_CPU_TRI1_REG.register(16, 16, Datapoint("Block_Current_Num", default=0))
        TCON0_CPU_TRI1_REG.register(0, 16, Datapoint("Block_Num", default=0))
        TCON0_CPU_TRI2_REG = Reg32("TCON0_CPU_TRI2_REG", 0x168)
        self.block(TCON0_CPU_TRI2_REG)
        TCON0_CPU_TRI2_REG.register(16, 16, Datapoint("Start_Delay", default=32))
        TCON0_CPU_TRI2_REG.register(15, 1, Datapoint("Trans_Start_Mode", default=0))
        TCON0_CPU_TRI2_REG.register(13, 2, Datapoint("Sync_Mode", default=0))
        TCON0_CPU_TRI2_REG.register(0, 13, Datapoint("Trans_Start_Set", default=0))
        TCON0_CPU_TRI2_REG.register(28, 2, Datapoint("Tri_Int_Mode", default=0))
        TCON0_CPU_TRI2_REG.register(8, 16, Datapoint("Counter_N", default=0))
        TCON0_CPU_TRI2_REG.register(0, 8, Datapoint("Counter_M", default=0))
        TCON_CMAP_CTL_REG = Reg32("TCON_CMAP_CTL_REG", 0x180)
        self.block(TCON_CMAP_CTL_REG)
        TCON_CMAP_CTL_REG.register(31, 1, Datapoint("Color_Map_En", default=0))
        TCON_CMAP_CTL_REG.register(0, 1, Datapoint("Out_Format", default=0))
        TCON_CMAP_ODD0_REG = Reg32("TCON_CMAP_ODD0_REG", 0x190)
        self.block(TCON_CMAP_ODD0_REG)
        TCON_CMAP_ODD0_REG.register(16, 16, Datapoint("Out_Odd1", default=0))
        TCON_CMAP_ODD0_REG.register(0, 16, Datapoint("Out_Odd0", default=0))
        TCON_CMAP_ODD1_REG = Reg32("TCON_CMAP_ODD1_REG", 0x194)
        self.block(TCON_CMAP_ODD1_REG)
        TCON_CMAP_ODD1_REG.register(16, 16, Datapoint("Out_Odd3", default=0))
        TCON_CMAP_ODD1_REG.register(0, 16, Datapoint("Out_Odd2", default=0))
        TCON_CMAP_EVEN0_REG = Reg32("TCON_CMAP_EVEN0_REG", 0x198)
        self.block(TCON_CMAP_EVEN0_REG)
        TCON_CMAP_EVEN0_REG.register(16, 16, Datapoint("Out_Even1", default=0))
        TCON_CMAP_EVEN0_REG.register(0, 16, Datapoint("Out_Even0", default=0))
        TCON_CMAP_EVEN1_REG = Reg32("TCON_CMAP_EVEN1_REG", 0x19C)
        self.block(TCON_CMAP_EVEN1_REG)
        TCON_CMAP_EVEN1_REG.register(16, 16, Datapoint("Out_Even3", default=0))
        TCON_CMAP_EVEN1_REG.register(0, 16, Datapoint("Out_Even2", default=0))
        TCON_SAFE_PERIOD_REG = Reg32("TCON_SAFE_PERIOD_REG", 0x1F0)
        self.block(TCON_SAFE_PERIOD_REG)
        TCON_SAFE_PERIOD_REG.register(16, 13, Datapoint("Safe_Period_FIFO_Num", default=0))
        TCON_SAFE_PERIOD_REG.register(0, 2, Datapoint("Safe_Period_Mode", default=0))
        TCON0_LVDS_ANA0_REG = Reg32("TCON0_LVDS_ANA0_REG", 0x220)
        self.block(TCON0_LVDS_ANA0_REG)
        TCON0_LVDS_ANA0_REG.register(31, 1, Datapoint("lvds0_en_mb", default=0))
        TCON0_LVDS_ANA0_REG.register(30, 1, Datapoint("lvds0_en_ldo", default=0))
        TCON0_LVDS_ANA0_REG.register(24, 1, Datapoint("lvds0_en_drvc", default=0))
        TCON0_LVDS_ANA0_REG.register(20, 4, Datapoint("lvds0_en_drv", default=0))
        TCON0_LVDS_ANA0_REG.register(17, 2, Datapoint("lvds0_reg_c", default=0))
        TCON0_LVDS_ANA0_REG.register(16, 1, Datapoint("lvds0_reg_denc", default=0))
        TCON0_LVDS_ANA0_REG.register(12, 4, Datapoint("lvds0_reg_den", default=0))
        TCON0_LVDS_ANA0_REG.register(8, 2, Datapoint("lvds0_reg_v", default=0))
        TCON0_LVDS_ANA0_REG.register(4, 2, Datapoint("lvds0_reg_pd", default=0))
        TCON0_LVDS_ANA0_REG.register(1, 1, Datapoint("lvds0_reg_pwslv", default=0))
        TCON0_LVDS_ANA0_REG.register(0, 1, Datapoint("lvds0_reg_pwsmb", default=0))


class DEFE(Device):
    def __init__(self, start=0x01e00000):
        super(DEFE, self).__init__("DEFE" , start)
        DEFE_EN_REG = Reg32("DEFE_EN_REG", 0x0)
        self.block(DEFE_EN_REG)
        DEFE_EN_REG.register(0, 1, Datapoint("EN", default=0))
        DEFE_FRM_CTRL_REG = Reg32("DEFE_FRM_CTRL_REG", 0x4)
        self.block(DEFE_FRM_CTRL_REG)
        DEFE_FRM_CTRL_REG.register(23, 1, Datapoint("COEF_ACCESS_CTRL", default=0))
        DEFE_FRM_CTRL_REG.register(16, 1, Datapoint("FRM_START", default=0))
        DEFE_FRM_CTRL_REG.register(11, 1, Datapoint("OUT_CTRL", default=0))
        DEFE_FRM_CTRL_REG.register(2, 1, Datapoint("WB_EN", default=0))
        DEFE_FRM_CTRL_REG.register(1, 1, Datapoint("", default=None))
        DEFE_FRM_CTRL_REG.register(0, 1, Datapoint("REG_RDY_EN", default=0))
        DEFE_BYPASS_REG = Reg32("DEFE_BYPASS_REG", 0x8)
        self.block(DEFE_BYPASS_REG)
        DEFE_BYPASS_REG.register(1, 1, Datapoint("CSC_BYPASS_EN", default=0))
        DEFE_AGTH_SEL_REG = Reg32("DEFE_AGTH_SEL_REG", 0xC)
        self.block(DEFE_AGTH_SEL_REG)
        DEFE_AGTH_SEL_REG.register(8, 1, Datapoint("LINEBUF_AGTH", default=0))
        DEFE_LINT_CTRL_REG = Reg32("DEFE_LINT_CTRL_REG", 0x10)
        self.block(DEFE_LINT_CTRL_REG)
        DEFE_LINT_CTRL_REG.register(16, 12, Datapoint("CURRENT_LINE", default=0))
        DEFE_LINT_CTRL_REG.register(15, 1, Datapoint("FIELD_SEL", default=0))
        DEFE_LINT_CTRL_REG.register(0, 13, Datapoint("TRIG_LINE", default=0))
        DEFE_LINT_CTRL_REG.register(0, 32, Datapoint("BUF_ADDR", default=0))
        DEFE_BUF_ADDR1_REG = Reg32("DEFE_BUF_ADDR1_REG", 0x24)
        self.block(DEFE_BUF_ADDR1_REG)
        DEFE_BUF_ADDR1_REG.register(0, 32, Datapoint("BUF_ADDR", default=0))
        DEFE_BUF_ADDR2_REG = Reg32("DEFE_BUF_ADDR2_REG", 0x28)
        self.block(DEFE_BUF_ADDR2_REG)
        DEFE_BUF_ADDR2_REG.register(0, 32, Datapoint("BUF_ADDR", default=0))
        DEFE_FIELD_CTRL_REG = Reg32("DEFE_FIELD_CTRL_REG", 0x2C)
        self.block(DEFE_FIELD_CTRL_REG)
        DEFE_FIELD_CTRL_REG.register(24, 6, Datapoint("FIR_OFFSET", default=32))
        DEFE_FIELD_CTRL_REG.register(12, 1, Datapoint("FIELD_LOOP_MOD", default=0))
        DEFE_FIELD_CTRL_REG.register(8, 3, Datapoint("VALID_FIELD_CNT", default=0))
        DEFE_FIELD_CTRL_REG.register(0, 8, Datapoint("FIELD_CNT", default=0))
        DEFE_TB_OFF0_REG = Reg32("DEFE_TB_OFF0_REG", 0x30)
        self.block(DEFE_TB_OFF0_REG)
        DEFE_TB_OFF0_REG.register(16, 5, Datapoint("X_OFFSET1", default=0))
        DEFE_TB_OFF0_REG.register(8, 5, Datapoint("Y_OFFSET0", default=0))
        DEFE_TB_OFF0_REG.register(0, 5, Datapoint("X_OFFSET0", default=0))
        DEFE_TB_OFF1_REG = Reg32("DEFE_TB_OFF1_REG", 0x34)
        self.block(DEFE_TB_OFF1_REG)
        DEFE_TB_OFF1_REG.register(16, 5, Datapoint("X_OFFSET1", default=0))
        DEFE_TB_OFF1_REG.register(8, 5, Datapoint("Y_OFFSET0", default=0))
        DEFE_TB_OFF1_REG.register(0, 5, Datapoint("X_OFFSET0", default=0))
        DEFE_TB_OFF2_REG = Reg32("DEFE_TB_OFF2_REG", 0x38)
        self.block(DEFE_TB_OFF2_REG)
        DEFE_TB_OFF2_REG.register(16, 5, Datapoint("X_OFFSET1", default=0))
        DEFE_TB_OFF2_REG.register(8, 5, Datapoint("Y_OFFSET0", default=0))
        DEFE_TB_OFF2_REG.register(0, 5, Datapoint("X_OFFSET0", default=0))
        DEFE_LINESTRD0_REG = Reg32("DEFE_LINESTRD0_REG", 0x40)
        self.block(DEFE_LINESTRD0_REG)
        DEFE_LINESTRD0_REG.register(0, 32, Datapoint("LINE_STRIDE", default=0))
        DEFE_LINESTRD1_REG = Reg32("DEFE_LINESTRD1_REG", 0x44)
        self.block(DEFE_LINESTRD1_REG)
        DEFE_LINESTRD1_REG.register(0, 32, Datapoint("LINE_STRIDE", default=0))
        DEFE_LINESTRD2_REG = Reg32("DEFE_LINESTRD2_REG", 0x48)
        self.block(DEFE_LINESTRD2_REG)
        DEFE_LINESTRD2_REG.register(0, 32, Datapoint("LINE_STRIDE", default=0))
        DEFE_INPUT_FMT_REG = Reg32("DEFE_INPUT_FMT_REG", 0x4C)
        self.block(DEFE_INPUT_FMT_REG)
        DEFE_INPUT_FMT_REG.register(16, 1, Datapoint("BYTE_SEQ", default=0))
        DEFE_INPUT_FMT_REG.register(12, 1, Datapoint("SCAN_MOD", default=0))
        DEFE_INPUT_FMT_REG.register(8, 3, Datapoint("DATA_MOD", default=0))
        DEFE_INPUT_FMT_REG.register(4, 3, Datapoint("DATA_FMT", default=0))
        DEFE_INPUT_FMT_REG.register(0, 2, Datapoint("DATA_PS", default=0))
        DEFE_WB_ADDR_REG = Reg32("DEFE_WB_ADDR_REG", 0x50)
        self.block(DEFE_WB_ADDR_REG)
        DEFE_WB_ADDR_REG.register(0, 32, Datapoint("WB_ADDR", default=0))
        DEFE_OUTPUT_FMT_REG = Reg32("DEFE_OUTPUT_FMT_REG", 0x5C)
        self.block(DEFE_OUTPUT_FMT_REG)
        DEFE_OUTPUT_FMT_REG.register(16, 2, Datapoint("WB_Ch_Sel", default=0))
        DEFE_OUTPUT_FMT_REG.register(8, 1, Datapoint("BYTE_SEQ", default=0))
        DEFE_OUTPUT_FMT_REG.register(4, 1, Datapoint("SCAN_MOD", default=0))
        DEFE_OUTPUT_FMT_REG.register(0, 3, Datapoint("DATA_FMT", default=0))
        DEFE_INT_EN_REG = Reg32("DEFE_INT_EN_REG", 0x60)
        self.block(DEFE_INT_EN_REG)
        DEFE_INT_EN_REG.register(10, 1, Datapoint("REG_LOAD_EN", default=0))
        DEFE_INT_EN_REG.register(9, 1, Datapoint("LINE_EN", default=0))
        DEFE_INT_EN_REG.register(7, 1, Datapoint("WB_EN", default=0))
        DEFE_INT_STATUS_REG = Reg32("DEFE_INT_STATUS_REG", 0x64)
        self.block(DEFE_INT_STATUS_REG)
        DEFE_INT_STATUS_REG.register(10, 1, Datapoint("REG_LOAD_STATUS", default=0))
        DEFE_INT_STATUS_REG.register(9, 1, Datapoint("LINE_STATUS", default=0))
        DEFE_INT_STATUS_REG.register(7, 1, Datapoint("WB_STATUS", default=0))
        DEFE_STATUS_REG = Reg32("DEFE_STATUS_REG", 0x68)
        self.block(DEFE_STATUS_REG)
        DEFE_STATUS_REG.register(16, 13, Datapoint("LINE_ON_SYNC", default=0))
        DEFE_STATUS_REG.register(15, 1, Datapoint("WB_ERR_SYNC", default=0))
        DEFE_STATUS_REG.register(14, 1, Datapoint("WB_ERR_LOSEDATA", default=0))
        DEFE_STATUS_REG.register(12, 1, Datapoint("WB_ERR_STATUS", default=0))
        DEFE_STATUS_REG.register(11, 1, Datapoint("COEF_ACCESS_STATUS", default=0))
        DEFE_STATUS_REG.register(5, 1, Datapoint("LCD_FIELD", default=0))
        DEFE_STATUS_REG.register(4, 1, Datapoint("DRAM_STATUS", default=0))
        DEFE_STATUS_REG.register(2, 1, Datapoint("CFG_PENDING", default=0))
        DEFE_STATUS_REG.register(1, 1, Datapoint("WB_STATUS", default=0))
        DEFE_STATUS_REG.register(0, 1, Datapoint("FRM_BUSY", default=0))
        DEFE_CSC_COEF00_REG = Reg32("DEFE_CSC_COEF00_REG", 0x70)
        self.block(DEFE_CSC_COEF00_REG)
        DEFE_CSC_COEF00_REG.register(0, 13, Datapoint("COEF", default=0))
        DEFE_CSC_COEF01_REG = Reg32("DEFE_CSC_COEF01_REG", 0x74)
        self.block(DEFE_CSC_COEF01_REG)
        DEFE_CSC_COEF01_REG.register(0, 13, Datapoint("COEF", default=0))
        DEFE_CSC_COEF02_REG = Reg32("DEFE_CSC_COEF02_REG", 0x78)
        self.block(DEFE_CSC_COEF02_REG)
        DEFE_CSC_COEF02_REG.register(0, 13, Datapoint("COEF", default=0))
        DEFE_CSC_COEF02_REG.register(0, 14, Datapoint("CONT", default=0))
        DEFE_CSC_COEF10_REG = Reg32("DEFE_CSC_COEF10_REG", 0x80)
        self.block(DEFE_CSC_COEF10_REG)
        DEFE_CSC_COEF10_REG.register(0, 13, Datapoint("COEF", default=0))
        DEFE_CSC_COEF11_REG = Reg32("DEFE_CSC_COEF11_REG", 0x84)
        self.block(DEFE_CSC_COEF11_REG)
        DEFE_CSC_COEF11_REG.register(0, 13, Datapoint("COEF", default=0))
        DEFE_CSC_COEF12_REG = Reg32("DEFE_CSC_COEF12_REG", 0x88)
        self.block(DEFE_CSC_COEF12_REG)
        DEFE_CSC_COEF12_REG.register(0, 13, Datapoint("COEF", default=0))
        DEFE_CSC_COEF13_REG = Reg32("DEFE_CSC_COEF13_REG", 0x8C)
        self.block(DEFE_CSC_COEF13_REG)
        DEFE_CSC_COEF13_REG.register(0, 14, Datapoint("CONT", default=0))
        DEFE_CSC_COEF20_REG = Reg32("DEFE_CSC_COEF20_REG", 0x90)
        self.block(DEFE_CSC_COEF20_REG)
        DEFE_CSC_COEF20_REG.register(0, 13, Datapoint("COEF", default=0))
        DEFE_CSC_COEF21_REG = Reg32("DEFE_CSC_COEF21_REG", 0x94)
        self.block(DEFE_CSC_COEF21_REG)
        DEFE_CSC_COEF21_REG.register(0, 13, Datapoint("COEF", default=0))
        DEFE_CSC_COEF22_REG = Reg32("DEFE_CSC_COEF22_REG", 0x98)
        self.block(DEFE_CSC_COEF22_REG)
        DEFE_CSC_COEF22_REG.register(0, 13, Datapoint("COEF", default=0))
        DEFE_CSC_COEF23_REG = Reg32("DEFE_CSC_COEF23_REG", 0x9C)
        self.block(DEFE_CSC_COEF23_REG)
        DEFE_CSC_COEF23_REG.register(0, 14, Datapoint("CONT", default=0))
        DEFE_WB_LINESTRD_EN_REG = Reg32("DEFE_WB_LINESTRD_EN_REG", 0xD0)
        self.block(DEFE_WB_LINESTRD_EN_REG)
        DEFE_WB_LINESTRD_EN_REG.register(0, 1, Datapoint("EN", default=0))
        DEFE_WB_LINESTRD_REG = Reg32("DEFE_WB_LINESTRD_REG", 0xD4)
        self.block(DEFE_WB_LINESTRD_REG)
        DEFE_WB_LINESTRD_REG.register(0, 1, Datapoint("LINE_STRD", default=0))
        DEFE_CH0_INSIZE_REG = Reg32("DEFE_CH0_INSIZE_REG", 0x100)
        self.block(DEFE_CH0_INSIZE_REG)
        DEFE_CH0_INSIZE_REG.register(16, 13, Datapoint("IN_HEIGHT", default=0))
        DEFE_CH0_INSIZE_REG.register(0, 13, Datapoint("IN_WIDTH", default=0))
        DEFE_CH0_OUTSIZE_REG = Reg32("DEFE_CH0_OUTSIZE_REG", 0x104)
        self.block(DEFE_CH0_OUTSIZE_REG)
        DEFE_CH0_OUTSIZE_REG.register(16, 13, Datapoint("OUT_HEIGHT", default=0))
        DEFE_CH0_OUTSIZE_REG.register(0, 13, Datapoint("OUT_WIDTH", default=0))
        DEFE_CH0_HORZFACT_REG = Reg32("DEFE_CH0_HORZFACT_REG", 0x108)
        self.block(DEFE_CH0_HORZFACT_REG)
        DEFE_CH0_HORZFACT_REG.register(16, 8, Datapoint("FACTOR_INT", default=0))
        DEFE_CH0_HORZFACT_REG.register(0, 16, Datapoint("FACTOR_FRAC", default=0))
        DEFE_CH0_VERTFACT_REG = Reg32("DEFE_CH0_VERTFACT_REG", 0x10C)
        self.block(DEFE_CH0_VERTFACT_REG)
        DEFE_CH0_VERTFACT_REG.register(16, 8, Datapoint("FACTOR_INT", default=0))
        DEFE_CH0_VERTFACT_REG.register(0, 16, Datapoint("FACTOR_FRAC", default=0))
        DEFE_CH0_HORZPHASE_REG = Reg32("DEFE_CH0_HORZPHASE_REG", 0x110)
        self.block(DEFE_CH0_HORZPHASE_REG)
        DEFE_CH0_HORZPHASE_REG.register(0, 20, Datapoint("PHASE", default=0))
        DEFE_CH0_VERTPHASE0_REG = Reg32("DEFE_CH0_VERTPHASE0_REG", 0x114)
        self.block(DEFE_CH0_VERTPHASE0_REG)
        DEFE_CH0_VERTPHASE0_REG.register(0, 20, Datapoint("PHASE", default=0))
        DEFE_CH0_VERTPHASE1_REG = Reg32("DEFE_CH0_VERTPHASE1_REG", 0x118)
        self.block(DEFE_CH0_VERTPHASE1_REG)
        DEFE_CH0_VERTPHASE1_REG.register(0, 20, Datapoint("PHASE", default=0))
        DEFE_CH0_HORZTAP_REG = Reg32("DEFE_CH0_HORZTAP_REG", 0x120)
        self.block(DEFE_CH0_HORZTAP_REG)
        DEFE_CH0_HORZTAP_REG.register(24, 7, Datapoint("TAP3", default=1))
        DEFE_CH0_HORZTAP_REG.register(16, 7, Datapoint("TAP2", default=1))
        DEFE_CH0_HORZTAP_REG.register(8, 7, Datapoint("TAP1", default=1))
        DEFE_CH0_HORZTAP_REG.register(0, 7, Datapoint("TAP0", default=125))
        DEFE_CH0_VERTTAP_REG = Reg32("DEFE_CH0_VERTTAP_REG", 0x128)
        self.block(DEFE_CH0_VERTTAP_REG)
        DEFE_CH0_VERTTAP_REG.register(24, 7, Datapoint("TAP3", default=1))
        DEFE_CH0_VERTTAP_REG.register(16, 7, Datapoint("TAP2", default=1))
        DEFE_CH0_VERTTAP_REG.register(8, 7, Datapoint("TAP1", default=1))
        DEFE_CH0_VERTTAP_REG.register(0, 7, Datapoint("TAP0", default=127))
        DEFE_CH1_INSIZE_REG = Reg32("DEFE_CH1_INSIZE_REG", 0x200)
        self.block(DEFE_CH1_INSIZE_REG)
        DEFE_CH1_INSIZE_REG.register(16, 13, Datapoint("IN_HEIGHT", default=0))
        DEFE_CH1_INSIZE_REG.register(0, 13, Datapoint("IN_WIDTH", default=0))
        DEFE_CH1_OUTSIZE_REG = Reg32("DEFE_CH1_OUTSIZE_REG", 0x204)
        self.block(DEFE_CH1_OUTSIZE_REG)
        DEFE_CH1_OUTSIZE_REG.register(16, 13, Datapoint("OUT_HEIGHT", default=0))
        DEFE_CH1_OUTSIZE_REG.register(0, 13, Datapoint("OUT_WIDTH", default=0))
        DEFE_CH1_HORZFACT_REG = Reg32("DEFE_CH1_HORZFACT_REG", 0x208)
        self.block(DEFE_CH1_HORZFACT_REG)
        DEFE_CH1_HORZFACT_REG.register(16, 8, Datapoint("FACTOR_INT", default=0))
        DEFE_CH1_HORZFACT_REG.register(0, 16, Datapoint("FACTOR_FRAC", default=0))
        DEFE_CH1_VERTFACT_REG = Reg32("DEFE_CH1_VERTFACT_REG", 0x20C)
        self.block(DEFE_CH1_VERTFACT_REG)
        DEFE_CH1_VERTFACT_REG.register(16, 8, Datapoint("FACTOR_INT", default=0))
        DEFE_CH1_VERTFACT_REG.register(0, 16, Datapoint("FACTOR_FRAC", default=0))
        DEFE_CH1_HORZPHASE_REG = Reg32("DEFE_CH1_HORZPHASE_REG", 0x210)
        self.block(DEFE_CH1_HORZPHASE_REG)
        DEFE_CH1_HORZPHASE_REG.register(0, 20, Datapoint("PHASE", default=0))
        DEFE_CH1_VERTPHASE0_REG = Reg32("DEFE_CH1_VERTPHASE0_REG", 0x214)
        self.block(DEFE_CH1_VERTPHASE0_REG)
        DEFE_CH1_VERTPHASE0_REG.register(0, 20, Datapoint("PHASE", default=0))
        DEFE_CH1_VERTPHASE1_REG = Reg32("DEFE_CH1_VERTPHASE1_REG", 0x218)
        self.block(DEFE_CH1_VERTPHASE1_REG)
        DEFE_CH1_VERTPHASE1_REG.register(0, 20, Datapoint("PHASE", default=0))
        DEFE_CH1_HORZTAP_REG = Reg32("DEFE_CH1_HORZTAP_REG", 0x220)
        self.block(DEFE_CH1_HORZTAP_REG)
        DEFE_CH1_HORZTAP_REG.register(24, 7, Datapoint("TAP3", default=1))
        DEFE_CH1_HORZTAP_REG.register(16, 7, Datapoint("TAP2", default=1))
        DEFE_CH1_HORZTAP_REG.register(8, 7, Datapoint("TAP1", default=1))
        DEFE_CH1_HORZTAP_REG.register(0, 7, Datapoint("TAP0", default=125))
        DEFE_CH1_VERTTAP_REG = Reg32("DEFE_CH1_VERTTAP_REG", 0x228)
        self.block(DEFE_CH1_VERTTAP_REG)
        DEFE_CH1_VERTTAP_REG.register(24, 7, Datapoint("TAP3", default=1))
        DEFE_CH1_VERTTAP_REG.register(16, 7, Datapoint("TAP2", default=1))
        DEFE_CH1_VERTTAP_REG.register(8, 7, Datapoint("TAP1", default=1))
        DEFE_CH1_VERTTAP_REG.register(0, 7, Datapoint("TAP0", default=127))
        DEFE_CH1_VERTTAP_REG.register(24, 8, Datapoint("TAP3", default=0))
        DEFE_CH1_VERTTAP_REG.register(16, 8, Datapoint("TAP2", default=0))
        DEFE_CH1_VERTTAP_REG.register(8, 8, Datapoint("TAP1", default=0))
        DEFE_CH1_VERTTAP_REG.register(0, 8, Datapoint("TAP0", default=0))
        DEFE_CH1_VERTTAP_REG.register(24, 8, Datapoint("TAP3", default=0))
        DEFE_CH1_VERTTAP_REG.register(16, 8, Datapoint("TAP2", default=0))
        DEFE_CH1_VERTTAP_REG.register(8, 8, Datapoint("TAP1", default=0))
        DEFE_CH1_VERTTAP_REG.register(0, 8, Datapoint("TAP0", default=0))
        DEFE_CH1_VERTTAP_REG.register(24, 8, Datapoint("TAP3", default=0))
        DEFE_CH1_VERTTAP_REG.register(16, 8, Datapoint("TAP2", default=0))
        DEFE_CH1_VERTTAP_REG.register(8, 8, Datapoint("TAP1", default=0))
        DEFE_CH1_VERTTAP_REG.register(0, 8, Datapoint("TAP0", default=0))
        DEFE_CH1_VERTTAP_REG.register(24, 8, Datapoint("TAP3", default=0))
        DEFE_CH1_VERTTAP_REG.register(16, 8, Datapoint("TAP2", default=0))
        DEFE_CH1_VERTTAP_REG.register(8, 8, Datapoint("TAP1", default=0))
        DEFE_CH1_VERTTAP_REG.register(0, 8, Datapoint("TAP0", default=0))
        DEBE_MODCTL_REG = Reg32("DEBE_MODCTL_REG", 0x800)
        self.block(DEBE_MODCTL_REG)
        DEBE_MODCTL_REG.register(29, 1, Datapoint("LINE_SEL", default=0))
        DEBE_MODCTL_REG.register(28, 1, Datapoint("ITLMOD_EN", default=0))
        DEBE_MODCTL_REG.register(20, 3, Datapoint("OUT_SEL", default=0))
        DEBE_MODCTL_REG.register(17, 1, Datapoint("OSCA_EN", default=0))
        DEBE_MODCTL_REG.register(11, 1, Datapoint("LAY3_EN", default=0))
        DEBE_MODCTL_REG.register(10, 1, Datapoint("LAY2_EN", default=0))
        DEBE_MODCTL_REG.register(9, 1, Datapoint("LAY1_EN", default=0))
        DEBE_MODCTL_REG.register(8, 1, Datapoint("LAY0_EN", default=0))
        DEBE_MODCTL_REG.register(1, 1, Datapoint("START_CTL", default=0))
        DEBE_MODCTL_REG.register(0, 1, Datapoint("DEBE_EN", default=0))
        DEBE_BACKCOLOR_REG = Reg32("DEBE_BACKCOLOR_REG", 0x804)
        self.block(DEBE_BACKCOLOR_REG)
        DEBE_BACKCOLOR_REG.register(3, 1, Datapoint("datalaneconfigurationandupto700Mbpsperlane", default=4))


class DSI(Device):
    def __init__(self, start=0x01CA0000):
        super(DSI, self).__init__("DSI" , start)
        DSI_CTL_REG = Reg32("DSI_CTL_REG", 0x000)
        self.block(DSI_CTL_REG)
        DSI_CTL_REG.register(0, 1, Datapoint("DSI_EN", default=0))
        DSI_GINT0_REG = Reg32("DSI_GINT0_REG", 0x004)
        self.block(DSI_GINT0_REG)
        DSI_GINT0_REG.register(19, 1, Datapoint("Video_Line_Int_Flag", default=0))
        DSI_GINT0_REG.register(18, 1, Datapoint("Video_Vb_Int_Flag", default=0))
        DSI_GINT0_REG.register(17, 1, Datapoint("Instru_Step_Flag", default=0))
        DSI_GINT0_REG.register(16, 1, Datapoint("Instru_End_Flag", default=0))
        DSI_GINT0_REG.register(3, 1, Datapoint("Video_Line_Int_En", default=0))
        DSI_GINT0_REG.register(2, 1, Datapoint("Video_Vb_Int_En", default=0))
        DSI_GINT0_REG.register(1, 1, Datapoint("Instru_Step_En", default=0))
        DSI_GINT0_REG.register(0, 1, Datapoint("Instru_End_En", default=0))
        DSI_GINT1_REG = Reg32("DSI_GINT1_REG", 0x008)
        self.block(DSI_GINT1_REG)
        DSI_GINT1_REG.register(0, 13, Datapoint("Video_Line_Int_Num", default=0))
        DSI_GINT1_REG = Reg32("DSI_GINT1_REG", 0x00C)
        self.block(DSI_GINT1_REG)
        DSI_GINT1_REG.register(24, 3, Datapoint("brdy_l_sel", default=0))
        DSI_GINT1_REG.register(16, 8, Datapoint("brdy_set", default=0))
        DSI_GINT1_REG.register(4, 4, Datapoint("Trail_inv", default=0))
        DSI_GINT1_REG.register(3, 1, Datapoint("Trail_fill", default=0))
        DSI_GINT1_REG.register(2, 1, Datapoint("HBP_dis", default=0))
        DSI_GINT1_REG.register(1, 1, Datapoint("HSA_HSE_dis", default=0))
        DSI_GINT1_REG.register(0, 1, Datapoint("Video_Mode_Burst", default=0))
        DSI_BASIC_CTL0_REG = Reg32("DSI_BASIC_CTL0_REG", 0x010)
        self.block(DSI_BASIC_CTL0_REG)
        DSI_BASIC_CTL0_REG.register(28, 1, Datapoint("Vsync_Existence", default=0))
        DSI_BASIC_CTL0_REG.register(18, 1, Datapoint("HS_Eotp_En", default=0))
        DSI_BASIC_CTL0_REG.register(17, 1, Datapoint("CRC_En", default=0))
        DSI_BASIC_CTL0_REG.register(16, 1, Datapoint("ECC_En", default=0))
        DSI_BASIC_CTL0_REG.register(12, 1, Datapoint("FIFO_Gating", default=0))
        DSI_BASIC_CTL0_REG.register(10, 1, Datapoint("FIFO_Manual_Reset", default=0))
        DSI_BASIC_CTL0_REG.register(4, 2, Datapoint("Src_Sel", default=0))
        DSI_BASIC_CTL0_REG.register(0, 1, Datapoint("Instru_En", default=0))
        DSI_BASIC_CTL1_REG = Reg32("DSI_BASIC_CTL1_REG", 0x014)
        self.block(DSI_BASIC_CTL1_REG)
        DSI_BASIC_CTL1_REG.register(12, 20, Datapoint("reserved", default=0))
        DSI_BASIC_CTL1_REG.register(4, 8, Datapoint("Video_Start_Delay", default=0))
        DSI_BASIC_CTL1_REG.register(2, 1, Datapoint("Video_Precision_Mode_Align", default=0))
        DSI_BASIC_CTL1_REG.register(1, 1, Datapoint("Video_Frame_Start", default=0))
        DSI_BASIC_CTL1_REG.register(0, 1, Datapoint("DSI_Mode", default=0))
        DSI_BASIC_SIZE0_REG = Reg32("DSI_BASIC_SIZE0_REG", 0x018)
        self.block(DSI_BASIC_SIZE0_REG)
        DSI_BASIC_SIZE0_REG.register(16, 12, Datapoint("Video_VBP", default=0))
        DSI_BASIC_SIZE0_REG.register(0, 12, Datapoint("Video_VSA", default=0))
        DSI_BASIC_SIZE1_REG = Reg32("DSI_BASIC_SIZE1_REG", 0x01C)
        self.block(DSI_BASIC_SIZE1_REG)
        DSI_BASIC_SIZE1_REG.register(16, 13, Datapoint("Video_VT", default=0))
        DSI_BASIC_SIZE1_REG.register(0, 12, Datapoint("Video_VACT", default=0))
        DSI_PIXEL_CTL0_REG = Reg32("DSI_PIXEL_CTL0_REG", 0x080)
        self.block(DSI_PIXEL_CTL0_REG)
        DSI_PIXEL_CTL0_REG.register(16, 1, Datapoint("PD_Plug_Dis", default=0))
        DSI_PIXEL_CTL0_REG.register(4, 1, Datapoint("Pixel_Endian", default=0))
        DSI_PIXEL_CTL0_REG.register(0, 4, Datapoint("Pixel_Format", default=0))
        DSI_PIXEL_CTL1_REG = Reg32("DSI_PIXEL_CTL1_REG", 0x084)
        self.block(DSI_PIXEL_CTL1_REG)
        DSI_PIXEL_CTL1_REG.register(24, 8, Datapoint("ECC", default=0))
        DSI_PIXEL_CTL1_REG.register(8, 16, Datapoint("WC", default=0))
        DSI_PIXEL_CTL1_REG.register(6, 2, Datapoint("VC", default=0))
        DSI_PIXEL_CTL1_REG.register(0, 6, Datapoint("DT", default=0))
        DSI_PIXEL_PD_REG = Reg32("DSI_PIXEL_PD_REG", 0x094)
        self.block(DSI_PIXEL_PD_REG)
        DSI_PIXEL_PD_REG.register(16, 8, Datapoint("PD_TranN", default=0))
        DSI_PIXEL_PD_REG.register(0, 8, Datapoint("PD_Tran0", default=0))
        DSI_PIXEL_PF0_REG = Reg32("DSI_PIXEL_PF0_REG", 0x098)
        self.block(DSI_PIXEL_PF0_REG)
        DSI_PIXEL_PF0_REG.register(0, 16, Datapoint("CRC_Force", default=0))
        DSI_PIXEL_PF1_REG = Reg32("DSI_PIXEL_PF1_REG", 0x09C)
        self.block(DSI_PIXEL_PF1_REG)
        DSI_PIXEL_PF1_REG.register(16, 16, Datapoint("CRC_Init_LineN", default=65535))
        DSI_PIXEL_PF1_REG.register(0, 16, Datapoint("CRC_Init_Line0", default=65535))
        DSI_SYNC_HSS_REG = Reg32("DSI_SYNC_HSS_REG", 0x0B0)
        self.block(DSI_SYNC_HSS_REG)
        DSI_SYNC_HSS_REG.register(24, 8, Datapoint("ECC", default=0))
        DSI_SYNC_HSS_REG.register(16, 8, Datapoint("D1", default=0))
        DSI_SYNC_HSS_REG.register(8, 8, Datapoint("D0", default=0))
        DSI_SYNC_HSS_REG.register(6, 2, Datapoint("VC", default=0))
        DSI_SYNC_HSS_REG.register(0, 6, Datapoint("DT", default=0))
        DSI_SYNC_HSE_REG = Reg32("DSI_SYNC_HSE_REG", 0x0B4)
        self.block(DSI_SYNC_HSE_REG)
        DSI_SYNC_HSE_REG.register(24, 8, Datapoint("ECC", default=0))
        DSI_SYNC_HSE_REG.register(16, 8, Datapoint("D1", default=0))
        DSI_SYNC_HSE_REG.register(8, 8, Datapoint("D0", default=0))
        DSI_SYNC_HSE_REG.register(6, 2, Datapoint("VC", default=0))
        DSI_SYNC_HSE_REG.register(0, 6, Datapoint("DT", default=0))
        DSI_SYNC_VSS_REG = Reg32("DSI_SYNC_VSS_REG", 0x0B8)
        self.block(DSI_SYNC_VSS_REG)
        DSI_SYNC_VSS_REG.register(24, 8, Datapoint("ECC", default=0))
        DSI_SYNC_VSS_REG.register(16, 8, Datapoint("D1", default=0))
        DSI_SYNC_VSS_REG.register(8, 8, Datapoint("D0", default=0))
        DSI_SYNC_VSS_REG.register(6, 2, Datapoint("VC", default=0))
        DSI_SYNC_VSS_REG.register(0, 6, Datapoint("DT", default=0))
        DSI_SYNC_VSE_REG = Reg32("DSI_SYNC_VSE_REG", 0x0BC)
        self.block(DSI_SYNC_VSE_REG)
        DSI_SYNC_VSE_REG.register(24, 8, Datapoint("ECC", default=0))
        DSI_SYNC_VSE_REG.register(16, 8, Datapoint("D1", default=0))
        DSI_SYNC_VSE_REG.register(8, 8, Datapoint("D0", default=0))
        DSI_SYNC_VSE_REG.register(6, 2, Datapoint("VC", default=0))
        DSI_SYNC_VSE_REG.register(0, 6, Datapoint("DT", default=0))
        DSI_BLK_HSA0_REG = Reg32("DSI_BLK_HSA0_REG", 0x0C0)
        self.block(DSI_BLK_HSA0_REG)
        DSI_BLK_HSA0_REG.register(0, 32, Datapoint("HSA_PH", default=0))
        DSI_BLK_HSA1_REG = Reg32("DSI_BLK_HSA1_REG", 0x0C4)
        self.block(DSI_BLK_HSA1_REG)
        DSI_BLK_HSA1_REG.register(16, 16, Datapoint("HSA_PF", default=0))
        DSI_BLK_HSA1_REG.register(0, 8, Datapoint("HSA_PD", default=0))
        DSI_BLK_HBP0_REG = Reg32("DSI_BLK_HBP0_REG", 0x0C8)
        self.block(DSI_BLK_HBP0_REG)
        DSI_BLK_HBP0_REG.register(0, 32, Datapoint("HBP_PH", default=0))
        DSI_BLK_HBP1_REG = Reg32("DSI_BLK_HBP1_REG", 0x0CC)
        self.block(DSI_BLK_HBP1_REG)
        DSI_BLK_HBP1_REG.register(16, 16, Datapoint("HBP_PF", default=0))
        DSI_BLK_HBP1_REG.register(0, 8, Datapoint("HBP_PD", default=0))
        DSI_BLK_HFP0_REG = Reg32("DSI_BLK_HFP0_REG", 0x0D0)
        self.block(DSI_BLK_HFP0_REG)
        DSI_BLK_HFP0_REG.register(0, 32, Datapoint("HFP_PH", default=0))
        DSI_BLK_HFP1_REG = Reg32("DSI_BLK_HFP1_REG", 0x0D4)
        self.block(DSI_BLK_HFP1_REG)
        DSI_BLK_HFP1_REG.register(16, 16, Datapoint("HFP_PF", default=0))
        DSI_BLK_HFP1_REG.register(0, 8, Datapoint("HFP_PD", default=0))
        DSI_BLK_HBLK0_REG = Reg32("DSI_BLK_HBLK0_REG", 0x0E0)
        self.block(DSI_BLK_HBLK0_REG)
        DSI_BLK_HBLK0_REG.register(0, 32, Datapoint("HBLK_PH", default=0))
        DSI_HBLK_BLK1_REG = Reg32("DSI_HBLK_BLK1_REG", 0x0E4)
        self.block(DSI_HBLK_BLK1_REG)
        DSI_HBLK_BLK1_REG.register(16, 16, Datapoint("HBLK_PF", default=0))
        DSI_HBLK_BLK1_REG.register(0, 8, Datapoint("HBLK_PD", default=0))
        DSI_BLK_VBLK0_REG = Reg32("DSI_BLK_VBLK0_REG", 0x0E8)
        self.block(DSI_BLK_VBLK0_REG)
        DSI_BLK_VBLK0_REG.register(0, 32, Datapoint("VBLK_PH", default=0))
        DSI_BLK_VBLK1_REG = Reg32("DSI_BLK_VBLK1_REG", 0x0EC)
        self.block(DSI_BLK_VBLK1_REG)
        DSI_BLK_VBLK1_REG.register(16, 16, Datapoint("VBLK_PF", default=0))
        DSI_BLK_VBLK1_REG.register(0, 8, Datapoint("VBLK_PD", default=0))
        DSI_CMD_CTL_REG = Reg32("DSI_CMD_CTL_REG", 0x200)
        self.block(DSI_CMD_CTL_REG)
        DSI_CMD_CTL_REG.register(26, 1, Datapoint("RX_Overflow", default=0))
        DSI_CMD_CTL_REG.register(25, 1, Datapoint("RX_Flag", default=0))
        DSI_CMD_CTL_REG.register(24, 1, Datapoint("RX_Status", default=0))
        DSI_CMD_CTL_REG.register(16, 5, Datapoint("RX_Size", default=0))
        DSI_CMD_CTL_REG.register(9, 1, Datapoint("TX_Flag", default=0))
        DSI_CMD_CTL_REG.register(8, 1, Datapoint("TX_Status", default=0))
        DSI_CMD_CTL_REG.register(0, 8, Datapoint("TX_Size", default=0))
        DSI_CMD_CTL_REG.register(0, 32, Datapoint("Data", default=0))
        DSI_CMD_CTL_REG.register(0, 32, Datapoint("Data", default=0))
        DSI_CMD_CTL_REG.register(31, 1, Datapoint("BIST_EN", default=0))
        DSI_CMD_CTL_REG.register(20, 1, Datapoint("WB_STOP_TIMING", default=0))
        DSI_CMD_CTL_REG.register(16, 1, Datapoint("WB_EN", default=0))
        DSI_CMD_CTL_REG.register(12, 1, Datapoint("IN_PORT_SEL", default=0))
        DSI_CMD_CTL_REG.register(8, 1, Datapoint("WB_MODE", default=0))
        DSI_CMD_CTL_REG.register(4, 1, Datapoint("REG_RDY_EN", default=0))
        DSI_CMD_CTL_REG.register(0, 1, Datapoint("EN", default=0))
        DSI_CMD_CTL_REG.register(16, 11, Datapoint("HEIGHT", default=0))
        DSI_CMD_CTL_REG.register(0, 11, Datapoint("WIDTH", default=0))
        DSI_CMD_CTL_REG.register(16, 11, Datapoint("CROP_TOP", default=0))
        DSI_CMD_CTL_REG.register(0, 11, Datapoint("CROP_LEFT", default=0))
        DSI_CMD_CTL_REG.register(16, 11, Datapoint("CROP_HEIGHT", default=0))
        DSI_CMD_CTL_REG.register(0, 11, Datapoint("CROP_WIDTH", default=0))
        DSI_CMD_CTL_REG.register(0, 32, Datapoint("ADDR", default=0))
        DSI_CMD_CTL_REG.register(0, 32, Datapoint("ADDR", default=0))
        DSI_CMD_CTL_REG.register(0, 32, Datapoint("LSTRD", default=0))
        DSI_CMD_CTL_REG.register(0, 32, Datapoint("LSTRD", default=0))
        DSI_CMD_CTL_REG.register(0, 2, Datapoint("FACTOR", default=0))
        DSI_CMD_CTL_REG.register(4, 1, Datapoint("PS", default=0))
        DSI_CMD_CTL_REG.register(0, 1, Datapoint("FORMAT", default=0))
        DSI_CMD_CTL_REG.register(16, 1, Datapoint("WB_END_INT_TIMING", default=0))
        DSI_CMD_CTL_REG.register(6, 1, Datapoint("WB_UNFINISH_INT_EN", default=0))
        DSI_CMD_CTL_REG.register(5, 1, Datapoint("WB_FIFO_OVF_INT_EN", default=0))
        DSI_CMD_CTL_REG.register(4, 1, Datapoint("WB_FIFO_EMPTY_INT_EN", default=0))
        DSI_CMD_CTL_REG.register(0, 1, Datapoint("WB_END_INT_EN", default=0))
        DSI_CMD_CTL_REG.register(8, 1, Datapoint("WB_BUSY", default=0))
        DSI_CMD_CTL_REG.register(6, 1, Datapoint("WB_UNFINISH_ERR", default=0))
        DSI_CMD_CTL_REG.register(5, 1, Datapoint("WB_FIFO_OVF_ERR", default=0))
        DSI_CMD_CTL_REG.register(4, 1, Datapoint("WB_FIFO_EMPTY_ERR", default=0))
        DSI_CMD_CTL_REG.register(0, 1, Datapoint("WB_END_FLAG", default=0))
        DSI_CMD_CTL_REG.register(0, 2, Datapoint("BURST_LEN", default=0))
        DSI_CMD_CTL_REG.register(0, 13, Datapoint("COEF", default=0))
        DSI_CMD_CTL_REG.register(0, 13, Datapoint("COEF", default=0))
        WBC_CSC_COEF02_REG = Reg32("WBC_CSC_COEF02_REG", 0x058)
        self.block(WBC_CSC_COEF02_REG)
        WBC_CSC_COEF02_REG.register(0, 13, Datapoint("COEF", default=0))
        WBC_CSC_COEF03_REG = Reg32("WBC_CSC_COEF03_REG", 0x05c)
        self.block(WBC_CSC_COEF03_REG)
        WBC_CSC_COEF03_REG.register(0, 14, Datapoint("CONT", default=0))
        WBC_CSC_COEF10_REG = Reg32("WBC_CSC_COEF10_REG", 0x060)
        self.block(WBC_CSC_COEF10_REG)
        WBC_CSC_COEF10_REG.register(0, 13, Datapoint("COEF", default=0))
        WBC_CSC_COEF11_REG = Reg32("WBC_CSC_COEF11_REG", 0x064)
        self.block(WBC_CSC_COEF11_REG)
        WBC_CSC_COEF11_REG.register(0, 13, Datapoint("COEF", default=0))
        WBC_CSC_COEF12_REG = Reg32("WBC_CSC_COEF12_REG", 0x068)
        self.block(WBC_CSC_COEF12_REG)
        WBC_CSC_COEF12_REG.register(0, 13, Datapoint("COEF", default=0))
        WBC_CSC_COEF13_REG = Reg32("WBC_CSC_COEF13_REG", 0x06c)
        self.block(WBC_CSC_COEF13_REG)
        WBC_CSC_COEF13_REG.register(0, 14, Datapoint("CONT", default=0))
        WBC_CSC_COEF20_REG = Reg32("WBC_CSC_COEF20_REG", 0x070)
        self.block(WBC_CSC_COEF20_REG)
        WBC_CSC_COEF20_REG.register(0, 13, Datapoint("COEF", default=0))
        WBC_CSC_COEF20_REG.register(0, 13, Datapoint("COEF", default=0))
        WBC_CSC_COEF22_REG = Reg32("WBC_CSC_COEF22_REG", 0x078)
        self.block(WBC_CSC_COEF22_REG)
        WBC_CSC_COEF22_REG.register(0, 13, Datapoint("COEF", default=0))
        WBC_CSC_COEF23_REG = Reg32("WBC_CSC_COEF23_REG", 0x07c)
        self.block(WBC_CSC_COEF23_REG)
        WBC_CSC_COEF23_REG.register(0, 14, Datapoint("CONT", default=0))


class CSI(Device):
    def __init__(self, start=0x01CB0000):
        super(CSI, self).__init__("CSI" , start)
        CSI0_EN_REG = Reg32("CSI0_EN_REG", 0x0000)
        self.block(CSI0_EN_REG)
        CSI0_EN_REG.register(30, 1, Datapoint("VER_EN", default=0))
        CSI0_EN_REG.register(16, 8, Datapoint("PTN_CYCLE", default=0))
        CSI0_EN_REG.register(4, 1, Datapoint("PTN_START", default=0))
        CSI0_EN_REG.register(3, 1, Datapoint("CLK_CNT_SPL", default=0))
        CSI0_EN_REG.register(2, 1, Datapoint("CLK_CNT", default=0))
        CSI0_EN_REG.register(1, 1, Datapoint("PTN_GEN_EN", default=0))
        CSI0_EN_REG.register(0, 1, Datapoint("CSI_EN", default=0))
        CSI0_IF_CFG_REG = Reg32("CSI0_IF_CFG_REG", 0x0004)
        self.block(CSI0_IF_CFG_REG)
        CSI0_IF_CFG_REG.register(23, 1, Datapoint("CSI_SRC_SWAP", default=0))
        CSI0_IF_CFG_REG.register(1, 1, Datapoint("parserto", default=0))
        CSI0_IF_CFG_REG.register(21, 1, Datapoint("SRC_TYPE", default=0))
        CSI0_IF_CFG_REG.register(20, 1, Datapoint("FPS_DS", default=0))
        CSI0_IF_CFG_REG.register(1, 1, Datapoint("fps", default=2))
        CSI0_IF_CFG_REG.register(19, 1, Datapoint("FIELD", default=0))
        CSI0_IF_CFG_REG.register(18, 1, Datapoint("VREF_POL", default=1))
        CSI0_IF_CFG_REG.register(17, 1, Datapoint("HERF_POL", default=0))
        CSI0_IF_CFG_REG.register(16, 1, Datapoint("CLK_POL", default=1))
        CSI0_IF_CFG_REG.register(10, 2, Datapoint("SEQ_8PLUS2", default=0))
        CSI0_IF_CFG_REG.register(8, 2, Datapoint("IF_DATA_WIDTH", default=0))
        CSI0_IF_CFG_REG.register(7, 1, Datapoint("MIPI_IF", default=0))
        CSI0_IF_CFG_REG.register(0, 5, Datapoint("CSI_IF", default=0))
        CSI0_CAP_REG = Reg32("CSI0_CAP_REG", 0x0008)
        self.block(CSI0_CAP_REG)
        CSI0_CAP_REG.register(26, 4, Datapoint("CH3_CAP_MASK", default=0))
        CSI0_CAP_REG.register(25, 1, Datapoint("CH3_VCAP_ON", default=0))
        CSI0_CAP_REG.register(24, 1, Datapoint("CH3_SCAP_ON", default=0))
        CSI0_CAP_REG.register(18, 4, Datapoint("CH2_CAP_MASK", default=0))
        CSI0_CAP_REG.register(17, 1, Datapoint("CH2_VCAP_ON", default=0))
        CSI0_CAP_REG.register(16, 1, Datapoint("CH2_SCAP_ON", default=0))
        CSI0_CAP_REG.register(10, 4, Datapoint("CH1_CAP_MASK", default=0))
        CSI0_CAP_REG.register(9, 1, Datapoint("CH1_VCAP_ON", default=0))
        CSI0_CAP_REG.register(8, 1, Datapoint("CH1_SCAP_ON", default=0))
        CSI0_CAP_REG.register(2, 4, Datapoint("CH0_CAP_MASK", default=0))
        CSI0_CAP_REG.register(1, 1, Datapoint("CH0_VCAP_ON", default=0))
        CSI0_CAP_REG.register(0, 1, Datapoint("CH0_SCAP_ON", default=0))
        CSI0_SYNC_CNT_REG = Reg32("CSI0_SYNC_CNT_REG", 0x000c)
        self.block(CSI0_SYNC_CNT_REG)
        CSI0_SYNC_CNT_REG.register(0, 24, Datapoint("SYNC_CNT", default=0))
        CSI0_FIFO_THRS_REG = Reg32("CSI0_FIFO_THRS_REG", 0x0010)
        self.block(CSI0_FIFO_THRS_REG)
        CSI0_FIFO_THRS_REG.register(16, 8, Datapoint("PTN_GEN_DLY", default=15))
        CSI0_FIFO_THRS_REG.register(0, 12, Datapoint("FIFO_THRS", default=1024))
        CSI0_FIFO_STAT_REG = Reg32("CSI0_FIFO_STAT_REG", 0x0014)
        self.block(CSI0_FIFO_STAT_REG)
        CSI0_FIFO_STAT_REG.register(0, 12, Datapoint("FIFO_FRM_MAX", default=None))
        CSI0_PCLK_STAT_REG = Reg32("CSI0_PCLK_STAT_REG", 0x0018)
        self.block(CSI0_PCLK_STAT_REG)
        CSI0_PCLK_STAT_REG.register(16, 15, Datapoint("PCLK_CNT_LINE_MAX", default=None))
        CSI0_PCLK_STAT_REG.register(0, 15, Datapoint("PCLK_CNT_LINE_MIN", default=None))
        CSI0_PTN_LEN_REG = Reg32("CSI0_PTN_LEN_REG", 0x0030)
        self.block(CSI0_PTN_LEN_REG)
        CSI0_PTN_LEN_REG.register(0, 32, Datapoint("PTN_LEN", default=0))
        CSI0_PTN_ADDR_REG = Reg32("CSI0_PTN_ADDR_REG", 0x0034)
        self.block(CSI0_PTN_ADDR_REG)
        CSI0_PTN_ADDR_REG.register(0, 32, Datapoint("PTN_ADDR", default=0))
        CSI0_VER_REG = Reg32("CSI0_VER_REG", 0x003C)
        self.block(CSI0_VER_REG)
        CSI0_VER_REG.register(0, 32, Datapoint("VER", default=None))
        CSI0_C0_CFG_REG = Reg32("CSI0_C0_CFG_REG", 0X0044)
        self.block(CSI0_C0_CFG_REG)
        CSI0_C0_CFG_REG.register(24, 8, Datapoint("PAD_VAL", default=0))
        CSI0_C0_CFG_REG.register(20, 4, Datapoint("INPUT_FMT", default=3))
        CSI0_C0_CFG_REG.register(16, 4, Datapoint("OUTPUT_FMT", default=0))
        CSI0_C0_CFG_REG.register(13, 1, Datapoint("VFLIP_EN", default=0))
        CSI0_C0_CFG_REG.register(12, 1, Datapoint("HFLIP_EN", default=0))
        CSI0_C0_CFG_REG.register(10, 2, Datapoint("FIELD_SEL", default=0))
        CSI0_C0_CFG_REG.register(8, 2, Datapoint("INPUT_SEQ", default=2))
        CSI0_C0_SCALE_REG = Reg32("CSI0_C0_SCALE_REG", 0X004C)
        self.block(CSI0_C0_SCALE_REG)
        CSI0_C0_SCALE_REG.register(0, 1, Datapoint("QUART_EN", default=0))
        CSI0_C0_F0_BUFA_REG = Reg32("CSI0_C0_F0_BUFA_REG", 0X0050)
        self.block(CSI0_C0_F0_BUFA_REG)
        CSI0_C0_F0_BUFA_REG.register(0, 32, Datapoint("C0F0_BUFA", default=0))
        CSI0_C0_F1_BUFA_REG = Reg32("CSI0_C0_F1_BUFA_REG", 0X0058)
        self.block(CSI0_C0_F1_BUFA_REG)
        CSI0_C0_F1_BUFA_REG.register(0, 32, Datapoint("C0F1_BUFA", default=0))
        CSI0_C0_F2_BUFA_REG = Reg32("CSI0_C0_F2_BUFA_REG", 0X0060)
        self.block(CSI0_C0_F2_BUFA_REG)
        CSI0_C0_F2_BUFA_REG.register(0, 32, Datapoint("C0F2_BUFA", default=0))
        CSI0_C0_CAP_STA_REG = Reg32("CSI0_C0_CAP_STA_REG", 0X006C)
        self.block(CSI0_C0_CAP_STA_REG)
        CSI0_C0_CAP_STA_REG.register(2, 1, Datapoint("FIELD_STA", default=0))
        CSI0_C0_CAP_STA_REG.register(1, 1, Datapoint("VCAP_STA", default=0))
        CSI0_C0_CAP_STA_REG.register(0, 1, Datapoint("SCAP_STA", default=0))
        CSI0_C0_INT_EN_REG = Reg32("CSI0_C0_INT_EN_REG", 0X0070)
        self.block(CSI0_C0_INT_EN_REG)
        CSI0_C0_INT_EN_REG.register(7, 1, Datapoint("VS_INT_EN", default=0))
        CSI0_C0_INT_EN_REG.register(6, 1, Datapoint("HB_OF_INT_EN", default=0))
        CSI0_C0_INT_EN_REG.register(5, 1, Datapoint("MUL_ERR_INT_EN", default=0))
        CSI0_C0_INT_EN_REG.register(4, 1, Datapoint("FIFO2_OF_INT_EN", default=0))
        CSI0_C0_INT_EN_REG.register(3, 1, Datapoint("FIFO1_OF_INT_EN", default=0))
        CSI0_C0_INT_EN_REG.register(2, 1, Datapoint("FIFO0_OF_INT_EN", default=0))
        CSI0_C0_INT_EN_REG.register(1, 1, Datapoint("FD_INT_EN", default=0))
        CSI0_C0_INT_EN_REG.register(0, 1, Datapoint("CD_INT_EN", default=0))
        CSI0_C0_INT_STA_REG = Reg32("CSI0_C0_INT_STA_REG", 0X0074)
        self.block(CSI0_C0_INT_STA_REG)
        CSI0_C0_INT_STA_REG.register(7, 1, Datapoint("VS_PD", default=0))
        CSI0_C0_INT_STA_REG.register(6, 1, Datapoint("HB_OF_PD", default=0))
        CSI0_C0_INT_STA_REG.register(5, 1, Datapoint("MUL_ERR_PD", default=0))
        CSI0_C0_INT_STA_REG.register(4, 1, Datapoint("FIFO2_OF_PD", default=0))
        CSI0_C0_INT_STA_REG.register(3, 1, Datapoint("FIFO1_OF_PD", default=0))
        CSI0_C0_INT_STA_REG.register(2, 1, Datapoint("FIFO0_OF_PD", default=0))
        CSI0_C0_INT_STA_REG.register(1, 1, Datapoint("FD_PD", default=0))
        CSI0_C0_INT_STA_REG.register(0, 1, Datapoint("CD_PD", default=0))
        CSI0_C0_HSIZE_REG = Reg32("CSI0_C0_HSIZE_REG", 0X0080)
        self.block(CSI0_C0_HSIZE_REG)
        CSI0_C0_HSIZE_REG.register(16, 13, Datapoint("HOR_LEN", default=1280))
        CSI0_C0_HSIZE_REG.register(0, 13, Datapoint("HOR_START", default=0))
        CSI0_C0_VSIZE_REG = Reg32("CSI0_C0_VSIZE_REG", 0X0084)
        self.block(CSI0_C0_VSIZE_REG)
        CSI0_C0_VSIZE_REG.register(16, 13, Datapoint("VER_LEN", default=480))
        CSI0_C0_VSIZE_REG.register(0, 13, Datapoint("VER_START", default=0))
        CSI0_C0_BUF_LEN_REG = Reg32("CSI0_C0_BUF_LEN_REG", 0X0088)
        self.block(CSI0_C0_BUF_LEN_REG)
        CSI0_C0_BUF_LEN_REG.register(16, 13, Datapoint("BUF_LEN_C", default=320))
        CSI0_C0_BUF_LEN_REG.register(0, 13, Datapoint("BUF_LEN", default=640))
        CSI0_C0_FLIP_SIZE_REG = Reg32("CSI0_C0_FLIP_SIZE_REG", 0X008C)
        self.block(CSI0_C0_FLIP_SIZE_REG)
        CSI0_C0_FLIP_SIZE_REG.register(16, 13, Datapoint("VER_LEN", default=480))
        CSI0_C0_FLIP_SIZE_REG.register(0, 13, Datapoint("VALID_LEN", default=640))
        CSI0_C0_FRM_CLK_CNT_REG = Reg32("CSI0_C0_FRM_CLK_CNT_REG", 0x0090)
        self.block(CSI0_C0_FRM_CLK_CNT_REG)
        CSI0_C0_FRM_CLK_CNT_REG.register(0, 24, Datapoint("FRM_CLK_CNT", default=0))
        CSI0_C0_ACC_ITNL_CLK_CNT_REG = Reg32("CSI0_C0_ACC_ITNL_CLK_CNT_REG", 0x0094)
        self.block(CSI0_C0_ACC_ITNL_CLK_CNT_REG)
        CSI0_C0_ACC_ITNL_CLK_CNT_REG.register(24, 8, Datapoint("ACC_CLK_CNT", default=0))
        CSI0_C0_ACC_ITNL_CLK_CNT_REG.register(0, 24, Datapoint("ITNL_CLK_CNT", default=0))
        CSI0_C1_CFG_REG = Reg32("CSI0_C1_CFG_REG", 0X0144)
        self.block(CSI0_C1_CFG_REG)
        CSI0_C1_CFG_REG.register(24, 8, Datapoint("PAD_VAL", default=0))
        CSI0_C1_CFG_REG.register(20, 4, Datapoint("INPUT_FMT", default=3))
        CSI0_C1_CFG_REG.register(16, 4, Datapoint("OUTPUT_FMT", default=0))
        CSI0_C1_CFG_REG.register(13, 1, Datapoint("VFLIP_EN", default=0))
        CSI0_C1_CFG_REG.register(12, 1, Datapoint("HFLIP_EN", default=0))
        CSI0_C1_CFG_REG.register(10, 2, Datapoint("FIELD_SEL", default=0))
        CSI0_C1_CFG_REG.register(8, 2, Datapoint("INPUT_SEQ", default=2))
        CSI0_C1_SCALE_REG = Reg32("CSI0_C1_SCALE_REG", 0X014C)
        self.block(CSI0_C1_SCALE_REG)
        CSI0_C1_SCALE_REG.register(0, 1, Datapoint("QUART_EN", default=0))
        CSI0_C1_F0_BUFA_REG = Reg32("CSI0_C1_F0_BUFA_REG", 0X0150)
        self.block(CSI0_C1_F0_BUFA_REG)
        CSI0_C1_F0_BUFA_REG.register(0, 32, Datapoint("C1F0_BUFA", default=0))
        CSI0_C1_F1_BUFA_REG = Reg32("CSI0_C1_F1_BUFA_REG", 0X0158)
        self.block(CSI0_C1_F1_BUFA_REG)
        CSI0_C1_F1_BUFA_REG.register(0, 32, Datapoint("C1F1_BUFA", default=0))
        CSI0_C1_F2_BUFA_REG = Reg32("CSI0_C1_F2_BUFA_REG", 0X0160)
        self.block(CSI0_C1_F2_BUFA_REG)
        CSI0_C1_F2_BUFA_REG.register(0, 32, Datapoint("C1F2_BUFA", default=0))
        CSI0_C1_CAP_STA_REG = Reg32("CSI0_C1_CAP_STA_REG", 0X016C)
        self.block(CSI0_C1_CAP_STA_REG)
        CSI0_C1_CAP_STA_REG.register(2, 1, Datapoint("FIELD_STA", default=0))
        CSI0_C1_CAP_STA_REG.register(1, 1, Datapoint("VCAP_STA", default=0))
        CSI0_C1_CAP_STA_REG.register(0, 1, Datapoint("SCAP_STA", default=0))
        CSI0_C1_INT_EN_REG = Reg32("CSI0_C1_INT_EN_REG", 0X0170)
        self.block(CSI0_C1_INT_EN_REG)
        CSI0_C1_INT_EN_REG.register(7, 1, Datapoint("VS_INT_EN", default=0))
        CSI0_C1_INT_EN_REG.register(6, 1, Datapoint("HB_OF_INT_EN", default=0))
        CSI0_C1_INT_EN_REG.register(5, 1, Datapoint("MUL_ERR_INT_EN", default=0))
        CSI0_C1_INT_EN_REG.register(4, 1, Datapoint("FIFO2_OF_INT_EN", default=0))
        CSI0_C1_INT_EN_REG.register(3, 1, Datapoint("FIFO1_OF_INT_EN", default=0))
        CSI0_C1_INT_EN_REG.register(2, 1, Datapoint("FIFO0_OF_INT_EN", default=0))
        CSI0_C1_INT_EN_REG.register(1, 1, Datapoint("FD_INT_EN", default=0))
        CSI0_C1_INT_EN_REG.register(0, 1, Datapoint("CD_INT_EN", default=0))
        CSI0_C1_INT_STA_REG = Reg32("CSI0_C1_INT_STA_REG", 0X0174)
        self.block(CSI0_C1_INT_STA_REG)
        CSI0_C1_INT_STA_REG.register(7, 1, Datapoint("VS_PD", default=0))
        CSI0_C1_INT_STA_REG.register(6, 1, Datapoint("HB_OF_PD", default=0))
        CSI0_C1_INT_STA_REG.register(5, 1, Datapoint("MUL_ERR_PD", default=0))
        CSI0_C1_INT_STA_REG.register(4, 1, Datapoint("FIFO2_OF_PD", default=0))
        CSI0_C1_INT_STA_REG.register(3, 1, Datapoint("FIFO1_OF_PD", default=0))
        CSI0_C1_INT_STA_REG.register(2, 1, Datapoint("FIFO0_OF_PD", default=0))
        CSI0_C1_INT_STA_REG.register(1, 1, Datapoint("FD_PD", default=0))
        CSI0_C1_INT_STA_REG.register(0, 1, Datapoint("CD_PD", default=0))
        CSI0_C1_HSIZE_REG = Reg32("CSI0_C1_HSIZE_REG", 0X0180)
        self.block(CSI0_C1_HSIZE_REG)
        CSI0_C1_HSIZE_REG.register(16, 13, Datapoint("HOR_LEN", default=1280))
        CSI0_C1_HSIZE_REG.register(0, 13, Datapoint("HOR_START", default=0))
        CSI0_C1_VSIZE_REG = Reg32("CSI0_C1_VSIZE_REG", 0X0184)
        self.block(CSI0_C1_VSIZE_REG)
        CSI0_C1_VSIZE_REG.register(16, 13, Datapoint("VER_LEN", default=480))
        CSI0_C1_VSIZE_REG.register(0, 13, Datapoint("VER_START", default=0))
        CSI0_C1_BUF_LEN_REG = Reg32("CSI0_C1_BUF_LEN_REG", 0X0188)
        self.block(CSI0_C1_BUF_LEN_REG)
        CSI0_C1_BUF_LEN_REG.register(16, 13, Datapoint("BUF_LEN_C", default=320))
        CSI0_C1_BUF_LEN_REG.register(0, 13, Datapoint("BUF_LEN", default=640))
        CSI0_C1_FLIP_SIZE_REG = Reg32("CSI0_C1_FLIP_SIZE_REG", 0X018C)
        self.block(CSI0_C1_FLIP_SIZE_REG)
        CSI0_C1_FLIP_SIZE_REG.register(16, 13, Datapoint("VER_LEN", default=480))
        CSI0_C1_FLIP_SIZE_REG.register(0, 13, Datapoint("VALID_LEN", default=640))
        CSI0_C1_FRM_CLK_CNT_REG = Reg32("CSI0_C1_FRM_CLK_CNT_REG", 0x0190)
        self.block(CSI0_C1_FRM_CLK_CNT_REG)
        CSI0_C1_FRM_CLK_CNT_REG.register(0, 24, Datapoint("FRM_CLK_CNT", default=0))
        CSI0_C1_ACC_ITNL_CLK_CNT_REG = Reg32("CSI0_C1_ACC_ITNL_CLK_CNT_REG", 0x0194)
        self.block(CSI0_C1_ACC_ITNL_CLK_CNT_REG)
        CSI0_C1_ACC_ITNL_CLK_CNT_REG.register(24, 8, Datapoint("ACC_CLK_CNT", default=0))
        CSI0_C1_ACC_ITNL_CLK_CNT_REG.register(0, 24, Datapoint("ITNL_CLK_CNT", default=0))
        CSI0_C2_CFG_REG = Reg32("CSI0_C2_CFG_REG", 0X0244)
        self.block(CSI0_C2_CFG_REG)
        CSI0_C2_CFG_REG.register(24, 8, Datapoint("PAD_VAL", default=0))
        CSI0_C2_CFG_REG.register(20, 4, Datapoint("INPUT_FMT", default=3))
        CSI0_C2_CFG_REG.register(16, 4, Datapoint("OUTPUT_FMT", default=0))
        CSI0_C2_CFG_REG.register(13, 1, Datapoint("VFLIP_EN", default=0))
        CSI0_C2_CFG_REG.register(12, 1, Datapoint("HFLIP_EN", default=0))
        CSI0_C2_CFG_REG.register(10, 2, Datapoint("FIELD_SEL", default=0))
        CSI0_C2_CFG_REG.register(8, 2, Datapoint("INPUT_SEQ", default=2))
        CSI0_C2_SCALE_REG = Reg32("CSI0_C2_SCALE_REG", 0X024C)
        self.block(CSI0_C2_SCALE_REG)
        CSI0_C2_SCALE_REG.register(0, 1, Datapoint("QUART_EN", default=0))
        CSI0_C2_F0_BUFA_REG = Reg32("CSI0_C2_F0_BUFA_REG", 0X0250)
        self.block(CSI0_C2_F0_BUFA_REG)
        CSI0_C2_F0_BUFA_REG.register(0, 32, Datapoint("C2F0_BUFA", default=0))
        CSI0_C2_F1_BUFA_REG = Reg32("CSI0_C2_F1_BUFA_REG", 0X0258)
        self.block(CSI0_C2_F1_BUFA_REG)
        CSI0_C2_F1_BUFA_REG.register(0, 32, Datapoint("C2F1_BUFA", default=0))
        CSI0_C2_F2_BUFA_REG = Reg32("CSI0_C2_F2_BUFA_REG", 0X0260)
        self.block(CSI0_C2_F2_BUFA_REG)
        CSI0_C2_F2_BUFA_REG.register(0, 32, Datapoint("C2F2_BUFA", default=0))
        CSI0_C2_CAP_STA_REG = Reg32("CSI0_C2_CAP_STA_REG", 0X026C)
        self.block(CSI0_C2_CAP_STA_REG)
        CSI0_C2_CAP_STA_REG.register(2, 1, Datapoint("FIELD_STA", default=0))
        CSI0_C2_CAP_STA_REG.register(1, 1, Datapoint("VCAP_STA", default=0))
        CSI0_C2_CAP_STA_REG.register(0, 1, Datapoint("SCAP_STA", default=0))
        CSI0_C2_INT_EN_REG = Reg32("CSI0_C2_INT_EN_REG", 0X0270)
        self.block(CSI0_C2_INT_EN_REG)
        CSI0_C2_INT_EN_REG.register(7, 1, Datapoint("VS_INT_EN", default=0))
        CSI0_C2_INT_EN_REG.register(6, 1, Datapoint("HB_OF_INT_EN", default=0))
        CSI0_C2_INT_EN_REG.register(5, 1, Datapoint("MUL_ERR_INT_EN", default=0))
        CSI0_C2_INT_EN_REG.register(4, 1, Datapoint("FIFO2_OF_INT_EN", default=0))
        CSI0_C2_INT_EN_REG.register(3, 1, Datapoint("FIFO1_OF_INT_EN", default=0))
        CSI0_C2_INT_EN_REG.register(2, 1, Datapoint("FIFO0_OF_INT_EN", default=0))
        CSI0_C2_INT_EN_REG.register(1, 1, Datapoint("FD_INT_EN", default=0))
        CSI0_C2_INT_EN_REG.register(0, 1, Datapoint("CD_INT_EN", default=0))
        CSI0_C2_INT_STA_REG = Reg32("CSI0_C2_INT_STA_REG", 0X0274)
        self.block(CSI0_C2_INT_STA_REG)
        CSI0_C2_INT_STA_REG.register(7, 1, Datapoint("VS_PD", default=0))
        CSI0_C2_INT_STA_REG.register(6, 1, Datapoint("HB_OF_PD", default=0))
        CSI0_C2_INT_STA_REG.register(5, 1, Datapoint("MUL_ERR_PD", default=0))
        CSI0_C2_INT_STA_REG.register(4, 1, Datapoint("FIFO2_OF_PD", default=0))
        CSI0_C2_INT_STA_REG.register(3, 1, Datapoint("FIFO1_OF_PD", default=0))
        CSI0_C2_INT_STA_REG.register(2, 1, Datapoint("FIFO0_OF_PD", default=0))
        CSI0_C2_INT_STA_REG.register(1, 1, Datapoint("FD_PD", default=0))
        CSI0_C2_INT_STA_REG.register(0, 1, Datapoint("CD_PD", default=0))
        CSI0_C2_HSIZE_REG = Reg32("CSI0_C2_HSIZE_REG", 0X0280)
        self.block(CSI0_C2_HSIZE_REG)
        CSI0_C2_HSIZE_REG.register(16, 13, Datapoint("HOR_LEN", default=1280))
        CSI0_C2_HSIZE_REG.register(0, 13, Datapoint("HOR_START", default=0))
        CSI0_C2_VSIZE_REG = Reg32("CSI0_C2_VSIZE_REG", 0X0284)
        self.block(CSI0_C2_VSIZE_REG)
        CSI0_C2_VSIZE_REG.register(16, 13, Datapoint("VER_LEN", default=480))
        CSI0_C2_VSIZE_REG.register(0, 13, Datapoint("VER_START", default=0))
        CSI0_C2_BUF_LEN_REG = Reg32("CSI0_C2_BUF_LEN_REG", 0X0288)
        self.block(CSI0_C2_BUF_LEN_REG)
        CSI0_C2_BUF_LEN_REG.register(16, 13, Datapoint("BUF_LEN_C", default=320))
        CSI0_C2_BUF_LEN_REG.register(0, 13, Datapoint("BUF_LEN", default=640))
        CSI0_C2_FLIP_SIZE_REG = Reg32("CSI0_C2_FLIP_SIZE_REG", 0X028C)
        self.block(CSI0_C2_FLIP_SIZE_REG)
        CSI0_C2_FLIP_SIZE_REG.register(16, 13, Datapoint("VER_LEN", default=480))
        CSI0_C2_FLIP_SIZE_REG.register(0, 13, Datapoint("VALID_LEN", default=640))
        CSI0_C2_FRM_CLK_CNT_REG = Reg32("CSI0_C2_FRM_CLK_CNT_REG", 0x0290)
        self.block(CSI0_C2_FRM_CLK_CNT_REG)
        CSI0_C2_FRM_CLK_CNT_REG.register(0, 24, Datapoint("FRM_CLK_CNT", default=0))
        CSI0_C2_ACC_ITNL_CLK_CNT_REG = Reg32("CSI0_C2_ACC_ITNL_CLK_CNT_REG", 0x0294)
        self.block(CSI0_C2_ACC_ITNL_CLK_CNT_REG)
        CSI0_C2_ACC_ITNL_CLK_CNT_REG.register(24, 8, Datapoint("ACC_CLK_CNT", default=0))
        CSI0_C2_ACC_ITNL_CLK_CNT_REG.register(0, 24, Datapoint("ITNL_CLK_CNT", default=0))
        CSI0_C3_CFG_REG = Reg32("CSI0_C3_CFG_REG", 0X0344)
        self.block(CSI0_C3_CFG_REG)
        CSI0_C3_CFG_REG.register(24, 8, Datapoint("PAD_VAL", default=0))
        CSI0_C3_CFG_REG.register(20, 4, Datapoint("INPUT_FMT", default=3))
        CSI0_C3_CFG_REG.register(16, 4, Datapoint("OUTPUT_FMT", default=0))
        CSI0_C3_CFG_REG.register(13, 1, Datapoint("VFLIP_EN", default=0))
        CSI0_C3_CFG_REG.register(12, 1, Datapoint("HFLIP_EN", default=0))
        CSI0_C3_CFG_REG.register(10, 2, Datapoint("FIELD_SEL", default=0))
        CSI0_C3_CFG_REG.register(8, 2, Datapoint("INPUT_SEQ", default=2))
        CSI0_C3_SCALE_REG = Reg32("CSI0_C3_SCALE_REG", 0X034C)
        self.block(CSI0_C3_SCALE_REG)
        CSI0_C3_SCALE_REG.register(0, 1, Datapoint("QUART_EN", default=0))
        CSI0_C3_F0_BUFA_REG = Reg32("CSI0_C3_F0_BUFA_REG", 0X0350)
        self.block(CSI0_C3_F0_BUFA_REG)
        CSI0_C3_F0_BUFA_REG.register(0, 32, Datapoint("C3F0_BUFA", default=0))
        CSI0_C3_F1_BUFA_REG = Reg32("CSI0_C3_F1_BUFA_REG", 0X0358)
        self.block(CSI0_C3_F1_BUFA_REG)
        CSI0_C3_F1_BUFA_REG.register(0, 32, Datapoint("C3F1_BUFA", default=0))
        CSI0_C3_F2_BUFA_REG = Reg32("CSI0_C3_F2_BUFA_REG", 0X0360)
        self.block(CSI0_C3_F2_BUFA_REG)
        CSI0_C3_F2_BUFA_REG.register(0, 32, Datapoint("C3F2_BUFA", default=0))
        CSI0_C3_CAP_STA_REG = Reg32("CSI0_C3_CAP_STA_REG", 0X036C)
        self.block(CSI0_C3_CAP_STA_REG)
        CSI0_C3_CAP_STA_REG.register(2, 1, Datapoint("FIELD_STA", default=0))
        CSI0_C3_CAP_STA_REG.register(1, 1, Datapoint("VCAP_STA", default=0))
        CSI0_C3_CAP_STA_REG.register(0, 1, Datapoint("SCAP_STA", default=0))
        CSI0_C3_INT_EN_REG = Reg32("CSI0_C3_INT_EN_REG", 0X0370)
        self.block(CSI0_C3_INT_EN_REG)
        CSI0_C3_INT_EN_REG.register(7, 1, Datapoint("VS_INT_EN", default=0))
        CSI0_C3_INT_EN_REG.register(6, 1, Datapoint("HB_OF_INT_EN", default=0))
        CSI0_C3_INT_EN_REG.register(5, 1, Datapoint("MUL_ERR_INT_EN", default=0))
        CSI0_C3_INT_EN_REG.register(4, 1, Datapoint("FIFO2_OF_INT_EN", default=0))
        CSI0_C3_INT_EN_REG.register(3, 1, Datapoint("FIFO1_OF_INT_EN", default=0))
        CSI0_C3_INT_EN_REG.register(2, 1, Datapoint("FIFO0_OF_INT_EN", default=0))
        CSI0_C3_INT_EN_REG.register(1, 1, Datapoint("FD_INT_EN", default=0))
        CSI0_C3_INT_EN_REG.register(0, 1, Datapoint("CD_INT_EN", default=0))
        CSI0_C3_INT_STA_REG = Reg32("CSI0_C3_INT_STA_REG", 0X0374)
        self.block(CSI0_C3_INT_STA_REG)
        CSI0_C3_INT_STA_REG.register(7, 1, Datapoint("VS_PD", default=0))
        CSI0_C3_INT_STA_REG.register(6, 1, Datapoint("HB_OF_PD", default=0))
        CSI0_C3_INT_STA_REG.register(5, 1, Datapoint("MUL_ERR_PD", default=0))
        CSI0_C3_INT_STA_REG.register(4, 1, Datapoint("FIFO2_OF_PD", default=0))
        CSI0_C3_INT_STA_REG.register(3, 1, Datapoint("FIFO1_OF_PD", default=0))
        CSI0_C3_INT_STA_REG.register(2, 1, Datapoint("FIFO0_OF_PD", default=0))
        CSI0_C3_INT_STA_REG.register(1, 1, Datapoint("FD_PD", default=0))
        CSI0_C3_INT_STA_REG.register(0, 1, Datapoint("CD_PD", default=0))
        CSI0_C3_HSIZE_REG = Reg32("CSI0_C3_HSIZE_REG", 0X0380)
        self.block(CSI0_C3_HSIZE_REG)
        CSI0_C3_HSIZE_REG.register(16, 13, Datapoint("HOR_LEN", default=1280))
        CSI0_C3_HSIZE_REG.register(0, 13, Datapoint("HOR_START", default=0))
        CSI0_C3_VSIZE_REG = Reg32("CSI0_C3_VSIZE_REG", 0X0384)
        self.block(CSI0_C3_VSIZE_REG)
        CSI0_C3_VSIZE_REG.register(16, 13, Datapoint("VER_LEN", default=480))
        CSI0_C3_VSIZE_REG.register(0, 13, Datapoint("VER_START", default=0))
        CSI0_C3_BUF_LEN_REG = Reg32("CSI0_C3_BUF_LEN_REG", 0X0388)
        self.block(CSI0_C3_BUF_LEN_REG)
        CSI0_C3_BUF_LEN_REG.register(16, 13, Datapoint("BUF_LEN_C", default=320))
        CSI0_C3_BUF_LEN_REG.register(0, 13, Datapoint("BUF_LEN", default=640))
        CSI0_C3_FLIP_SIZE_REG = Reg32("CSI0_C3_FLIP_SIZE_REG", 0X038C)
        self.block(CSI0_C3_FLIP_SIZE_REG)
        CSI0_C3_FLIP_SIZE_REG.register(16, 13, Datapoint("VER_LEN", default=480))
        CSI0_C3_FLIP_SIZE_REG.register(0, 13, Datapoint("VALID_LEN", default=640))
        CSI0_C3_FRM_CLK_CNT_REG = Reg32("CSI0_C3_FRM_CLK_CNT_REG", 0x0390)
        self.block(CSI0_C3_FRM_CLK_CNT_REG)
        CSI0_C3_FRM_CLK_CNT_REG.register(0, 24, Datapoint("FRM_CLK_CNT", default=0))
        CSI0_C3_ACC_ITNL_CLK_CNT_REG = Reg32("CSI0_C3_ACC_ITNL_CLK_CNT_REG", 0x0394)
        self.block(CSI0_C3_ACC_ITNL_CLK_CNT_REG)
        CSI0_C3_ACC_ITNL_CLK_CNT_REG.register(24, 8, Datapoint("ACC_CLK_CNT", default=0))
        CSI0_C3_ACC_ITNL_CLK_CNT_REG.register(0, 24, Datapoint("ITNL_CLK_CNT", default=0))
        CCI_CTRL = Reg32("CCI_CTRL", 0x000)
        self.block(CCI_CTRL)
        CCI_CTRL.register(31, 1, Datapoint("SINGLE_TRAN", default=0))
        CCI_CTRL.register(30, 1, Datapoint("REPEAT_TRAN", default=0))
        CCI_CTRL.register(29, 1, Datapoint("RESTART_MODE", default=0))
        CCI_CTRL.register(28, 1, Datapoint("READ_TRAN_MODE", default=0))
        CCI_CTRL.register(24, 4, Datapoint("TRAN_RESULT", default=0))
        CCI_CTRL.register(16, 8, Datapoint("CCI_STA", default=None))
        CCI_CTRL.register(1, 1, Datapoint("SOFT_RESET", default=0))
        CCI_CTRL.register(0, 1, Datapoint("CCI_EN", default=0))
        CCI_CFG = Reg32("CCI_CFG", 0x004)
        self.block(CCI_CFG)
        CCI_CFG.register(24, 8, Datapoint("TIMEOUT_N", default=16))
        CCI_CFG.register(16, 8, Datapoint("INTERVAL", default=0))
        CCI_CFG.register(15, 1, Datapoint("PACKET_MODE", default=0))
        CCI_CFG.register(7, 1, Datapoint("SRC_SEL", default=0))
        CCI_CFG.register(4, 3, Datapoint("TRIG_MODE", default=0))
        CCI_CFG.register(0, 4, Datapoint("CSI_TRIG", default=0))
        CCI_FMT = Reg32("CCI_FMT", 0x008)
        self.block(CCI_FMT)
        CCI_FMT.register(25, 7, Datapoint("SLV_ID", default=0))
        CCI_FMT.register(24, 1, Datapoint("CMD", default=0))
        CCI_FMT.register(20, 4, Datapoint("ADDR_BYTE", default=1))
        CCI_FMT.register(16, 4, Datapoint("DATA_BYTE", default=1))
        CCI_FMT.register(0, 16, Datapoint("PACKET_CNT", default=1))
        CCI_BUS_CTRL = Reg32("CCI_BUS_CTRL", 0x00C)
        self.block(CCI_BUS_CTRL)
        CCI_BUS_CTRL.register(16, 16, Datapoint("DLY_CYC", default=0))
        CCI_BUS_CTRL.register(15, 1, Datapoint("DLY_TRIG", default=0))
        CCI_BUS_CTRL.register(12, 3, Datapoint("CLK_N", default=2))
        CCI_BUS_CTRL.register(8, 4, Datapoint("CLK_M", default=5))
        CCI_BUS_CTRL.register(7, 1, Datapoint("SCL_STA", default=None))
        CCI_BUS_CTRL.register(6, 1, Datapoint("SDA_STA", default=None))
        CCI_BUS_CTRL.register(5, 1, Datapoint("SCL_PEN", default=0))
        CCI_BUS_CTRL.register(4, 1, Datapoint("SDA_PEN", default=0))
        CCI_BUS_CTRL.register(3, 1, Datapoint("SCL_MOV", default=0))
        CCI_BUS_CTRL.register(2, 1, Datapoint("SDA_MOV", default=0))
        CCI_BUS_CTRL.register(1, 1, Datapoint("SCL_MOE", default=0))
        CCI_BUS_CTRL.register(0, 1, Datapoint("SDA_MOE", default=0))
        CCI_PARA_BASE = Reg32("CCI_PARA_BASE", 0x010)
        self.block(CCI_PARA_BASE)
        CCI_PARA_BASE.register(0, 32, Datapoint("DRAM_BASE", default=0))
        CCI_INT_CTRL = Reg32("CCI_INT_CTRL", 0x014)
        self.block(CCI_INT_CTRL)
        CCI_INT_CTRL.register(17, 1, Datapoint("S_TRAN_ERR_INT_EN", default=0))
        CCI_INT_CTRL.register(16, 1, Datapoint("S_TRAN_COM_INT_EN", default=0))
        CCI_INT_CTRL.register(1, 1, Datapoint("S_TRAN_ERR_PD", default=0))
        CCI_INT_CTRL.register(0, 1, Datapoint("S_TRAN_COM_PD", default=0))
        CCI_LC_TRIG = Reg32("CCI_LC_TRIG", 0x018)
        self.block(CCI_LC_TRIG)
        CCI_LC_TRIG.register(0, 13, Datapoint("LN_CNT", default=0))
        CCI_LC_TRIG.register(0, 32, Datapoint("DATA_FIFO", default=0))
        CCI_LC_TRIG.register(0, 32, Datapoint("From0x200to0x220address", default=None))


class TWI0(Device):
    def __init__(self, start=0x01C2AC00):
        super(TWI0, self).__init__("TWI0" , start)
        TWI_ADDR = Reg32("TWI_ADDR", 0x00)
        self.block(TWI_ADDR)
        TWI_ADDR.register(1, 7, Datapoint("SLA", default=0))
        TWI_ADDR.register(0, 1, Datapoint("GCE", default=0))
        TWI_XADDR = Reg32("TWI_XADDR", 0x04)
        self.block(TWI_XADDR)
        TWI_XADDR.register(0, 8, Datapoint("SLAX", default=0))
        TWI_DATA = Reg32("TWI_DATA", 0x08)
        self.block(TWI_DATA)
        TWI_DATA.register(0, 8, Datapoint("TWI_DATA", default=0))
        TWI_CNTR = Reg32("TWI_CNTR", 0x0C)
        self.block(TWI_CNTR)
        TWI_CNTR.register(7, 1, Datapoint("INT_EN", default=0))
        TWI_CNTR.register(6, 1, Datapoint("BUS_EN", default=0))
        TWI_CNTR.register(5, 1, Datapoint("M_STA", default=0))
        TWI_CNTR.register(4, 1, Datapoint("M_STP", default=0))
        TWI_CNTR.register(3, 1, Datapoint("INT_FLAG", default=0))
        TWI_CNTR.register(2, 1, Datapoint("A_ACK", default=0))
        TWI_STAT = Reg32("TWI_STAT", 0x10)
        self.block(TWI_STAT)
        TWI_STAT.register(0, 8, Datapoint("STA", default=248))
        TWI_CCR = Reg32("TWI_CCR", 0x14)
        self.block(TWI_CCR)
        TWI_CCR.register(3, 4, Datapoint("CLK_M", default=0))
        TWI_CCR.register(0, 3, Datapoint("CLK_N", default=0))
        TWI_SRST = Reg32("TWI_SRST", 0x18)
        self.block(TWI_SRST)
        TWI_SRST.register(0, 1, Datapoint("SOFT_RST", default=0))
        TWI_EFR = Reg32("TWI_EFR", 0x1C)
        self.block(TWI_EFR)
        TWI_EFR.register(0, 2, Datapoint("DBN", default=0))
        TWI_LCR = Reg32("TWI_LCR", 0x20)
        self.block(TWI_LCR)
        TWI_LCR.register(5, 1, Datapoint("SCL_STATE", default=1))
        TWI_LCR.register(4, 1, Datapoint("SDA_STATE", default=1))
        TWI_LCR.register(3, 1, Datapoint("SCL_CTL", default=1))
        TWI_LCR.register(2, 1, Datapoint("SCL_CTL_EN", default=0))
        TWI_LCR.register(1, 1, Datapoint("SDA_CTL", default=1))
        TWI_LCR.register(0, 1, Datapoint("SDA_CTL_EN", default=0))
        TWI_DVFSCR = Reg32("TWI_DVFSCR", 0x24)
        self.block(TWI_DVFSCR)
        TWI_DVFSCR.register(2, 1, Datapoint("MS_PRIORITY", default=0))
        TWI_DVFSCR.register(1, 1, Datapoint("CPU_BUSY_SET", default=0))
        TWI_DVFSCR.register(0, 1, Datapoint("DVFC_BUSY_SET", default=0))


class SPI0(Device):
    def __init__(self, start=0x01C68000):
        super(SPI0, self).__init__("SPI0" , start)
        SPI_CTL = Reg32("SPI_CTL", 0x04)
        self.block(SPI_CTL)
        SPI_CTL.register(31, 1, Datapoint("SRST", default=0))
        SPI_CTL.register(7, 1, Datapoint("TP_EN", default=1))
        SPI_CTL.register(1, 1, Datapoint("MODE", default=0))
        SPI_CTL.register(0, 1, Datapoint("EN", default=0))
        SPI_INTCTL = Reg32("SPI_INTCTL", 0x08)
        self.block(SPI_INTCTL)
        SPI_INTCTL.register(31, 1, Datapoint("XCH", default=0))
        SPI_INTCTL.register(14, 17, Datapoint("Reserved", default=0))
        SPI_INTCTL.register(13, 1, Datapoint("SDM", default=0))
        SPI_INTCTL.register(12, 1, Datapoint("FBS", default=0))
        SPI_INTCTL.register(11, 1, Datapoint("SDC", default=0))
        SPI_INTCTL.register(10, 1, Datapoint("RPSM", default=0))
        SPI_INTCTL.register(9, 1, Datapoint("DDB", default=0))
        SPI_INTCTL.register(8, 1, Datapoint("DHB", default=0))
        SPI_INTCTL.register(7, 1, Datapoint("SS_LEVEL", default=1))
        SPI_INTCTL.register(6, 1, Datapoint("SS_OWNER", default=0))
        SPI_INTCTL.register(4, 2, Datapoint("SS_SEL", default=0))
        SPI_INTCTL.register(3, 1, Datapoint("SSCTL", default=0))
        SPI_INTCTL.register(2, 1, Datapoint("SPOL", default=1))
        SPI_INTCTL.register(1, 1, Datapoint("CPOL", default=1))
        SPI_INTCTL.register(0, 1, Datapoint("CPHA", default=1))
        SPI_IER = Reg32("SPI_IER", 0x010)
        self.block(SPI_IER)
        SPI_IER.register(14, 18, Datapoint("Reserved", default=0))
        SPI_IER.register(13, 1, Datapoint("SS_INT_EN", default=0))
        SPI_IER.register(12, 1, Datapoint("TC_INT_EN", default=0))
        SPI_IER.register(11, 1, Datapoint("TF_UDR_INT_EN", default=0))
        SPI_IER.register(10, 1, Datapoint("TF_OVF_INT_EN", default=0))
        SPI_IER.register(9, 1, Datapoint("RF_UDR_INT_EN", default=0))
        SPI_IER.register(8, 1, Datapoint("RF_OVF_INT_EN", default=0))
        SPI_IER.register(7, 1, Datapoint("Reserved", default=0))
        SPI_IER.register(6, 1, Datapoint("TF_FUL_INT_EN", default=0))
        SPI_IER.register(5, 1, Datapoint("TX_EMP_INT_EN", default=0))
        SPI_IER.register(4, 1, Datapoint("TX_ERQ_INT_EN", default=0))
        SPI_IER.register(3, 1, Datapoint("Reserved", default=0))
        SPI_IER.register(2, 1, Datapoint("RF_FUL_INT_EN", default=0))
        SPI_IER.register(1, 1, Datapoint("RX_EMP_INT_EN", default=0))
        SPI_IER.register(0, 1, Datapoint("RF_RDY_INT_EN", default=0))
        SPI_INT_STA = Reg32("SPI_INT_STA", 0x14)
        self.block(SPI_INT_STA)
        SPI_INT_STA.register(13, 1, Datapoint("SSI", default=0))
        SPI_INT_STA.register(12, 1, Datapoint("TC", default=0))
        SPI_INT_STA.register(11, 1, Datapoint("TF_UDF", default=0))
        SPI_INT_STA.register(10, 1, Datapoint("TF_OVF", default=0))
        SPI_INT_STA.register(9, 1, Datapoint("RX_UDF", default=0))
        SPI_INT_STA.register(8, 1, Datapoint("RX_OVF", default=0))
        SPI_INT_STA.register(6, 1, Datapoint("TX_FULL", default=0))
        SPI_INT_STA.register(5, 1, Datapoint("TX_EMP", default=1))
        SPI_INT_STA.register(4, 1, Datapoint("TX_READY", default=1))
        SPI_INT_STA.register(3, 1, Datapoint("reserved", default=None))
        SPI_INT_STA.register(2, 1, Datapoint("RX_FULL", default=0))
        SPI_INT_STA.register(1, 1, Datapoint("RX_EMP", default=1))
        SPI_INT_STA.register(0, 1, Datapoint("RX_RDY", default=0))
        SPI_DMACTL = Reg32("SPI_DMACTL", 0x18)
        self.block(SPI_DMACTL)
        SPI_DMACTL.register(31, 1, Datapoint("TX_FIFO_RST", default=0))
        SPI_DMACTL.register(30, 1, Datapoint("TF_TEST_ENB", default=0))
        SPI_DMACTL.register(24, 1, Datapoint("TF_DRQ_EN", default=0))
        SPI_DMACTL.register(16, 8, Datapoint("TX_TRIG_LEVEL", default=64))
        SPI_DMACTL.register(15, 1, Datapoint("RF_RST", default=0))
        SPI_DMACTL.register(14, 1, Datapoint("RF_TEST", default=0))
        SPI_DMACTL.register(10, 4, Datapoint("Reserved", default=0))
        SPI_DMACTL.register(9, 1, Datapoint("RX_DMA_MODE", default=0))
        SPI_DMACTL.register(8, 1, Datapoint("RF_DRQ_EN", default=0))
        SPI_DMACTL.register(0, 8, Datapoint("RX_TRIG_LEVEL", default=1))
        SPI_FSR = Reg32("SPI_FSR", 0x1c)
        self.block(SPI_FSR)
        SPI_FSR.register(31, 1, Datapoint("TB_WR", default=0))
        SPI_FSR.register(28, 3, Datapoint("TB_CNT", default=0))
        SPI_FSR.register(24, 4, Datapoint("Reserved", default=0))
        SPI_FSR.register(16, 8, Datapoint("TF_CNT", default=0))
        SPI_FSR.register(15, 1, Datapoint("RB_WR", default=0))
        SPI_FSR.register(12, 3, Datapoint("RB_CNT", default=0))
        SPI_FSR.register(8, 4, Datapoint("Reserved", default=0))
        SPI_FSR.register(0, 8, Datapoint("RF_CNT", default=0))
        SPI_WAIT = Reg32("SPI_WAIT", 0x20)
        self.block(SPI_WAIT)
        SPI_WAIT.register(16, 4, Datapoint("SWC", default=0))
        SPI_WAIT.register(0, 16, Datapoint("WCC", default=0))
        SPI_CCTL = Reg32("SPI_CCTL", 0x24)
        self.block(SPI_CCTL)
        SPI_CCTL.register(12, 1, Datapoint("DRS", default=0))
        SPI_CCTL.register(8, 4, Datapoint("CDR1", default=0))
        SPI_CCTL.register(0, 8, Datapoint("CDR2", default=2))
        SPI_BC = Reg32("SPI_BC", 0x30)
        self.block(SPI_BC)
        SPI_BC.register(0, 24, Datapoint("MBC", default=0))
        SPI_TC = Reg32("SPI_TC", 0x34)
        self.block(SPI_TC)
        SPI_TC.register(0, 24, Datapoint("MWTC", default=0))
        SPI_BCC = Reg32("SPI_BCC", 0x38)
        self.block(SPI_BCC)
        SPI_BCC.register(29, 3, Datapoint("Reserved", default=0))
        SPI_BCC.register(28, 1, Datapoint("DRM", default=0))
        SPI_BCC.register(24, 4, Datapoint("DBC", default=0))
        SPI_BCC.register(0, 24, Datapoint("STC", default=0))
        SPI_TXD = Reg32("SPI_TXD", 0x200)
        self.block(SPI_TXD)
        SPI_TXD.register(0, 32, Datapoint("TDATA", default=0))
        SPI_RXD = Reg32("SPI_RXD", 0x300)
        self.block(SPI_RXD)
        SPI_RXD.register(0, 32, Datapoint("RDATA", default=0))
        UART_RBR = Reg32("UART_RBR", 0x00)
        self.block(UART_RBR)
        UART_RBR.register(0, 8, Datapoint("RBR", default=0))
        UART_THR = Reg32("UART_THR", 0x00)
        self.block(UART_THR)
        UART_THR.register(0, 8, Datapoint("THR", default=0))
        UART_DLL = Reg32("UART_DLL", 0x00)
        self.block(UART_DLL)
        UART_DLL.register(0, 8, Datapoint("DLL", default=0))
        UART_DLH = Reg32("UART_DLH", 0x04)
        self.block(UART_DLH)
        UART_DLH.register(0, 8, Datapoint("DLH", default=0))
        UART_IER = Reg32("UART_IER", 0x04)
        self.block(UART_IER)
        UART_IER.register(7, 1, Datapoint("PTIME", default=None))
        UART_IER.register(3, 1, Datapoint("EDSSI", default=0))
        UART_IER.register(2, 1, Datapoint("ELSI", default=0))
        UART_IER.register(1, 1, Datapoint("ETBEI", default=0))
        UART_IER.register(0, 1, Datapoint("ERBFI", default=0))
        UART_IIR = Reg32("UART_IIR", 0x08)
        self.block(UART_IIR)
        UART_IIR.register(6, 2, Datapoint("FEFLAG", default=0))
        UART_IIR.register(0, 4, Datapoint("IID", default=1))
        UART_FCR = Reg32("UART_FCR", 0x08)
        self.block(UART_FCR)
        UART_FCR.register(6, 2, Datapoint("RT", default=0))
        UART_FCR.register(4, 2, Datapoint("TFT", default=0))
        UART_FCR.register(3, 1, Datapoint("DMAM", default=0))
        UART_FCR.register(2, 1, Datapoint("XFIFOR", default=0))
        UART_FCR.register(1, 1, Datapoint("RFIFOR", default=0))
        UART_FCR.register(0, 1, Datapoint("FIFOE", default=0))
        UART_LCR = Reg32("UART_LCR", 0x0C)
        self.block(UART_LCR)
        UART_LCR.register(7, 1, Datapoint("DLAB", default=0))
        UART_LCR.register(6, 1, Datapoint("BC", default=0))
        UART_LCR.register(4, 2, Datapoint("EPS", default=0))
        UART_LCR.register(3, 1, Datapoint("PEN", default=0))
        UART_LCR.register(2, 1, Datapoint("STOP", default=0))
        UART_LCR.register(0, 2, Datapoint("DLS", default=0))
        UART_MCR = Reg32("UART_MCR", 0x10)
        self.block(UART_MCR)
        UART_MCR.register(6, 1, Datapoint("SIRE", default=0))
        UART_MCR.register(5, 1, Datapoint("AFCE", default=0))
        UART_MCR.register(4, 1, Datapoint("LOOP", default=0))
        UART_MCR.register(1, 1, Datapoint("RTS", default=0))
        UART_MCR.register(0, 1, Datapoint("DTR", default=0))
        UART_LSR = Reg32("UART_LSR", 0x14)
        self.block(UART_LSR)
        UART_LSR.register(7, 1, Datapoint("FIFOERR", default=0))
        UART_LSR.register(6, 1, Datapoint("TEMT", default=1))
        UART_LSR.register(5, 1, Datapoint("THRE", default=1))
        UART_LSR.register(4, 1, Datapoint("BI", default=0))
        UART_LSR.register(3, 1, Datapoint("FE", default=0))
        UART_LSR.register(2, 1, Datapoint("PE", default=0))
        UART_LSR.register(1, 1, Datapoint("OE", default=0))
        UART_LSR.register(0, 1, Datapoint("DR", default=0))
        UART_MSR = Reg32("UART_MSR", 0x18)
        self.block(UART_MSR)
        UART_MSR.register(7, 1, Datapoint("DCD", default=0))
        UART_MSR.register(6, 1, Datapoint("RI", default=0))
        UART_MSR.register(5, 1, Datapoint("DSR", default=0))
        UART_MSR.register(4, 1, Datapoint("CTS", default=0))
        UART_MSR.register(3, 1, Datapoint("DDCD", default=0))
        UART_MSR.register(2, 1, Datapoint("TERI", default=0))
        UART_MSR.register(1, 1, Datapoint("DDSR", default=0))
        UART_MSR.register(0, 1, Datapoint("DCTS", default=0))
        UART_SCH = Reg32("UART_SCH", 0x1C)
        self.block(UART_SCH)
        UART_SCH.register(0, 8, Datapoint("SCRATCH_REG", default=0))
        UART_USR = Reg32("UART_USR", 0x7C)
        self.block(UART_USR)
        UART_USR.register(4, 1, Datapoint("RFF", default=0))
        UART_USR.register(3, 1, Datapoint("RFNE", default=0))
        UART_USR.register(2, 1, Datapoint("TFE", default=1))
        UART_USR.register(1, 1, Datapoint("TFNF", default=1))
        UART_USR.register(0, 1, Datapoint("BUSY", default=0))
        UART_TFL = Reg32("UART_TFL", 0x80)
        self.block(UART_TFL)
        UART_TFL.register(0, 7, Datapoint("TFL", default=0))
        UART_RFL = Reg32("UART_RFL", 0x84)
        self.block(UART_RFL)
        UART_RFL.register(0, 7, Datapoint("RFL", default=0))
        UART_HALT = Reg32("UART_HALT", 0xA4)
        self.block(UART_HALT)
        UART_HALT.register(5, 1, Datapoint("SIR_RX_INVERT", default=0))
        UART_HALT.register(4, 1, Datapoint("SIR_TX_INVERT", default=0))
        UART_HALT.register(2, 1, Datapoint("CHANGE_UPDATE", default=0))
        UART_HALT.register(1, 1, Datapoint("CHCFG_AT_BUSY", default=0))
        UART_HALT.register(0, 1, Datapoint("HALT_TX", default=0))


class USB_HCI0(Device):
    def __init__(self, start=0x01C1A000):
        super(USB_HCI0, self).__init__("USB_HCI0" , start)
        CAPLENGTH = Reg32("CAPLENGTH", 0x00)
        self.block(CAPLENGTH)
        CAPLENGTH.register(0, 8, Datapoint("CAPLENGTH", default=16))
        HCIVERSION = Reg32("HCIVERSION", 0x02)
        self.block(HCIVERSION)
        HCIVERSION.register(0, 16, Datapoint("HCIVERSION", default=256))
        HCSPARAMS = Reg32("HCSPARAMS", 0x04)
        self.block(HCSPARAMS)
        HCSPARAMS.register(24, 8, Datapoint("Reserved", default=0))
        HCSPARAMS.register(16, 4, Datapoint("Reserved", default=0))
        HCSPARAMS.register(12, 4, Datapoint("NumberofCompanionController", default=0))
        HCSPARAMS.register(8, 4, Datapoint("NumberofPortperCompanionController", default=0))
        HCSPARAMS.register(7, 1, Datapoint("PortRoutingRules", default=0))
        HCSPARAMS.register(4, 3, Datapoint("Reserved", default=0))
        HCCPARAMS = Reg32("HCCPARAMS", 0x08)
        self.block(HCCPARAMS)
        HCCPARAMS.register(16, 16, Datapoint("Reserved", default=0))
        HCCPARAMS.register(15, 4, Datapoint("EHCIExtendedCapabilitiesPointer", default=0))
        HCCPARAMS.register(3, 1, Datapoint("Reserved", default=0))
        HCCPARAMS.register(0, 1, Datapoint("Reserved", default=0))
        HCSP_PORTROUTE = Reg32("HCSP_PORTROUTE", 0x0C)
        self.block(HCSP_PORTROUTE)
        HCSP_PORTROUTE.register(24, 8, Datapoint("Reserved", default=0))
        HCSP_PORTROUTE.register(16, 8, Datapoint("InterruptThresholdControl", default=8))
        HCSP_PORTROUTE.register(12, 4, Datapoint("Reserved", default=0))
        HCSP_PORTROUTE.register(10, 1, Datapoint("Reserved", default=0))
        HCSP_PORTROUTE.register(7, 1, Datapoint("LightHostControllerReset", default=0))
        HCSP_PORTROUTE.register(6, 1, Datapoint("InterruptonAsyncAdvanceDoorbell", default=0))
        HCSP_PORTROUTE.register(5, 1, Datapoint("AsynchronousScheduleEnable", default=0))
        HCSP_PORTROUTE.register(4, 1, Datapoint("PeriodicScheduleEnable", default=0))
        HCSP_PORTROUTE.register(1, 1, Datapoint("HostControllerReset", default=0))
        HCSP_PORTROUTE.register(0, 1, Datapoint("Run", default=0))
        USBSTS = Reg32("USBSTS", 0x14)
        self.block(USBSTS)
        USBSTS.register(16, 16, Datapoint("Reserved", default=0))
        USBSTS.register(15, 1, Datapoint("AsynchronousScheduleStatus", default=0))
        USBSTS.register(14, 1, Datapoint("PeriodicScheduleStatus", default=0))
        USBSTS.register(13, 1, Datapoint("Reclamation", default=0))
        USBSTS.register(12, 1, Datapoint("HCHalted", default=1))
        USBSTS.register(6, 6, Datapoint("Reserved", default=0))
        USBINTR = Reg32("USBINTR", 0x18)
        self.block(USBINTR)
        USBINTR.register(6, 26, Datapoint("Reserved", default=0))
        USBINTR.register(5, 1, Datapoint("InterruptonAsyncAdvanceEnable", default=0))
        USBINTR.register(4, 1, Datapoint("HostSystemErrorEnable", default=0))
        USBINTR.register(3, 1, Datapoint("FrameListRolloverEnable", default=0))
        USBINTR.register(2, 1, Datapoint("PortChangeInterruptEnable", default=0))
        USBINTR.register(1, 1, Datapoint("USBErrorInterruptEnable", default=0))
        USBINTR.register(0, 1, Datapoint("USBInterruptEnable", default=0))
        FRINDEX = Reg32("FRINDEX", 0x1c)
        self.block(FRINDEX)
        FRINDEX.register(14, 18, Datapoint("Reserved", default=0))
        FRINDEX.register(0, 14, Datapoint("FrameIndex", default=0))
        PERIODICLISTBASE = Reg32("PERIODICLISTBASE", 0x24)
        self.block(PERIODICLISTBASE)
        PERIODICLISTBASE.register(12, 20, Datapoint("BaseAddress", default=None))
        ASYNCLISTADDR = Reg32("ASYNCLISTADDR", 0x28)
        self.block(ASYNCLISTADDR)
        ASYNCLISTADDR.register(5, 27, Datapoint("LinkPointer", default=None))
        ASYNCLISTADDR.register(0, 5, Datapoint("Reserved", default=None))
        CONFIGFLAG = Reg32("CONFIGFLAG", 0x50)
        self.block(CONFIGFLAG)
        CONFIGFLAG.register(1, 31, Datapoint("Reserved", default=0))
        CONFIGFLAG.register(0, 1, Datapoint("ConfigureFlag", default=0))
        PORTSC = Reg32("PORTSC", 0x54)
        self.block(PORTSC)
        PORTSC.register(22, 10, Datapoint("Reserved", default=0))
        PORTSC.register(21, 1, Datapoint("WakeonDisconnectEnable", default=0))
        PORTSC.register(20, 1, Datapoint("WakeonConnectEnable", default=0))
        PORTSC.register(16, 4, Datapoint("PortTestControl", default=0))
        PORTSC.register(14, 2, Datapoint("Reserved", default=0))
        PORTSC.register(13, 1, Datapoint("PortOwner", default=1))
        PORTSC.register(12, 1, Datapoint("Reserved", default=0))
        PORTSC.register(10, 2, Datapoint("LineStatus", default=0))
        PORTSC.register(9, 1, Datapoint("Reserved", default=0))
        PORTSC.register(8, 1, Datapoint("PortReset", default=0))
        PORTSC.register(7, 1, Datapoint("Suspend", default=0))
        PORTSC.register(6, 1, Datapoint("ForcePortResume", default=0))
        PORTSC.register(4, 1, Datapoint("Over", default=0))
        PORTSC.register(2, 1, Datapoint("PortEnabled", default=0))
        PORTSC.register(0, 1, Datapoint("CurrentConnectStatus", default=0))
        HcRevision = Reg32("HcRevision", 0x400)
        self.block(HcRevision)
        HcRevision.register(8, 24, Datapoint("0x00Reserved", default=None))
        HcRevision = Reg32("HcRevision", 0x404)
        self.block(HcRevision)
        HcRevision.register(11, 21, Datapoint("0x00Reserved", default=None))
        HcCommandStatus = Reg32("HcCommandStatus", 0x408)
        self.block(HcCommandStatus)
        HcCommandStatus.register(18, 14, Datapoint("0x0Reserved", default=None))
        HcCommandStatus.register(4, 12, Datapoint("0x0Reserved", default=None))
        HcInterruptStatus = Reg32("HcInterruptStatus", 0x40c)
        self.block(HcInterruptStatus)
        HcInterruptStatus.register(7, 25, Datapoint("0x0Reserved", default=None))
        HcInterruptEnableRegister = Reg32("HcInterruptEnableRegister", 0x410)
        self.block(HcInterruptEnableRegister)
        HcInterruptEnableRegister.register(7, 24, Datapoint("0x0Reserved", default=None))
        HcInterruptDisableRegister = Reg32("HcInterruptDisableRegister", 0x414)
        self.block(HcInterruptDisableRegister)
        HcInterruptDisableRegister.register(7, 24, Datapoint("0x00Reserved", default=None))
        HcHCCA = Reg32("HcHCCA", 0x418)
        self.block(HcHCCA)
        HcHCCA.register(14, 2, Datapoint("0x0Reserved", default=None))
        HcFmRemaining = Reg32("HcFmRemaining", 0x438)
        self.block(HcFmRemaining)
        HcFmRemaining.register(14, 17, Datapoint("0x0Reserved", default=None))
        HcFmNumber = Reg32("HcFmNumber", 0x43c)
        self.block(HcFmNumber)
        HcFmNumber.register(18, 13, Datapoint("0x0Reserved", default=None))
        HcRhPortStatus = Reg32("HcRhPortStatus", 0x454)
        self.block(HcRhPortStatus)
        HcRhPortStatus.register(21, 11, Datapoint("0x0Reserved", default=None))
        HcRhPortStatus.register(10, 6, Datapoint("0x0Reserved", default=None))
        HcRhPortStatus.register(5, 3, Datapoint("0x0Reserved", default=None))


class DA0(Device):
    def __init__(self, start=0x01C22000):
        super(DA0, self).__init__("DA0" , start)
        DA_CTL = Reg32("DA_CTL", 0x00)
        self.block(DA_CTL)
        DA_CTL.register(8, 1, Datapoint("SDO_EN", default=0))
        DA_CTL.register(7, 1, Datapoint("", default=None))
        DA_CTL.register(6, 1, Datapoint("ASS", default=0))
        DA_CTL.register(5, 1, Datapoint("MS", default=0))
        DA_CTL.register(4, 1, Datapoint("PCM", default=0))
        DA_CTL.register(3, 1, Datapoint("LOOP", default=0))
        DA_CTL.register(2, 1, Datapoint("TXEN", default=0))
        DA_CTL.register(1, 1, Datapoint("RXEN", default=0))
        DA_CTL.register(0, 1, Datapoint("GEN", default=0))
        DA_FAT0 = Reg32("DA_FAT0", 0x04)
        self.block(DA_FAT0)
        DA_FAT0.register(7, 1, Datapoint("LRCP", default=0))
        DA_FAT0.register(6, 1, Datapoint("BCP", default=0))
        DA_FAT0.register(4, 2, Datapoint("SR", default=0))
        DA_FAT0.register(2, 2, Datapoint("WSS", default=3))
        DA_FAT0.register(0, 2, Datapoint("FMT", default=0))
        DA_FAT1 = Reg32("DA_FAT1", 0x08)
        self.block(DA_FAT1)
        DA_FAT1.register(12, 3, Datapoint("PCM_SYNC_PERIOD", default=4))
        DA_FAT1.register(11, 1, Datapoint("PCM_SYNC_OUT", default=0))
        DA_FAT1.register(10, 1, Datapoint("PCMOutMute", default=0))
        DA_FAT1.register(9, 1, Datapoint("MLS", default=0))
        DA_FAT1.register(8, 1, Datapoint("SEXT", default=0))
        DA_FAT1.register(6, 2, Datapoint("SI", default=0))
        DA_FAT1.register(5, 1, Datapoint("SW", default=1))
        DA_FAT1.register(4, 1, Datapoint("SSYNC", default=0))
        DA_FAT1.register(2, 2, Datapoint("RX_PDM", default=0))
        DA_FAT1.register(0, 2, Datapoint("TX_PDM", default=0))
        DA_TXFIFO = Reg32("DA_TXFIFO", 0x0C)
        self.block(DA_TXFIFO)
        DA_TXFIFO.register(0, 32, Datapoint("TX_DATA", default=0))
        DA_RXFIFO = Reg32("DA_RXFIFO", 0x10)
        self.block(DA_RXFIFO)
        DA_RXFIFO.register(0, 32, Datapoint("RX_DATA", default=0))
        DA_FCTL = Reg32("DA_FCTL", 0x14)
        self.block(DA_FCTL)
        DA_FCTL.register(31, 1, Datapoint("FIFOSRC", default=0))
        DA_FCTL.register(25, 1, Datapoint("FTX", default=0))
        DA_FCTL.register(24, 1, Datapoint("FRX", default=0))
        DA_FCTL.register(12, 7, Datapoint("TXTL", default=64))
        DA_FCTL.register(4, 6, Datapoint("RXTL", default=15))
        DA_FCTL.register(2, 1, Datapoint("TXIM", default=0))
        DA_FCTL.register(0, 2, Datapoint("RXOM", default=0))
        DA_FSTA = Reg32("DA_FSTA", 0x18)
        self.block(DA_FSTA)
        DA_FSTA.register(28, 1, Datapoint("TXE", default=1))
        DA_FSTA.register(16, 8, Datapoint("TXE_CNT", default=128))
        DA_FSTA.register(8, 1, Datapoint("RXA", default=0))
        DA_FSTA.register(0, 7, Datapoint("RXA_CNT", default=0))
        DA_INT = Reg32("DA_INT", 0x1C)
        self.block(DA_INT)
        DA_INT.register(7, 1, Datapoint("TX_DRQ", default=0))
        DA_INT.register(6, 1, Datapoint("TXUI_EN", default=0))
        DA_INT.register(5, 1, Datapoint("TXOI_EN", default=0))
        DA_INT.register(4, 1, Datapoint("TXEI_EN", default=0))
        DA_INT.register(3, 1, Datapoint("RX_DRQ", default=0))
        DA_INT.register(2, 1, Datapoint("RXUI_EN", default=0))
        DA_INT.register(1, 1, Datapoint("RXOI_EN", default=0))
        DA_INT.register(0, 1, Datapoint("RXAI_EN", default=0))
        DA_ISTA = Reg32("DA_ISTA", 0x20)
        self.block(DA_ISTA)
        DA_ISTA.register(6, 1, Datapoint("TXU_INT", default=0))
        DA_ISTA.register(5, 1, Datapoint("TXO_INT", default=0))
        DA_ISTA.register(4, 1, Datapoint("TXE_INT", default=1))
        DA_ISTA.register(2, 1, Datapoint("RXU_INT", default=0))
        DA_ISTA.register(1, 1, Datapoint("RXO_INT", default=0))
        DA_ISTA.register(0, 1, Datapoint("RXA_INT", default=0))
        DA_CLKD = Reg32("DA_CLKD", 0x24)
        self.block(DA_CLKD)
        DA_CLKD.register(7, 1, Datapoint("MCLKO_EN", default=0))
        DA_CLKD.register(4, 3, Datapoint("BCLKDIV", default=0))
        DA_CLKD.register(0, 4, Datapoint("MCLKDIV", default=0))
        DA_TXCNT = Reg32("DA_TXCNT", 0x28)
        self.block(DA_TXCNT)
        DA_TXCNT.register(0, 32, Datapoint("TX_CNT", default=0))
        DA_RXCNT = Reg32("DA_RXCNT", 0x2C)
        self.block(DA_RXCNT)
        DA_RXCNT.register(0, 32, Datapoint("RX_CNT", default=0))
        DA_TXCHSEL = Reg32("DA_TXCHSEL", 0x30)
        self.block(DA_TXCHSEL)
        DA_TXCHSEL.register(0, 3, Datapoint("TX_CHSEL", default=1))
        DA_TXCHMAP = Reg32("DA_TXCHMAP", 0x34)
        self.block(DA_TXCHMAP)
        DA_TXCHMAP.register(12, 3, Datapoint("TX_CH3_MAP", default=3))
        DA_TXCHMAP.register(8, 3, Datapoint("TX_CH2_MAP", default=2))
        DA_TXCHMAP.register(4, 3, Datapoint("TX_CH1_MAP", default=1))
        DA_TXCHMAP.register(0, 3, Datapoint("TX_CH0_MAP", default=0))
        DA_RXCHSEL = Reg32("DA_RXCHSEL", 0x38)
        self.block(DA_RXCHSEL)
        DA_RXCHSEL.register(0, 3, Datapoint("RX_CHSEL", default=1))
        DA_RXCHMAP = Reg32("DA_RXCHMAP", 0x3C)
        self.block(DA_RXCHMAP)
        DA_RXCHMAP.register(12, 3, Datapoint("RX_CH3_MAP", default=3))
        DA_RXCHMAP.register(8, 3, Datapoint("RX_CH2_MAP", default=2))
        DA_RXCHMAP.register(4, 3, Datapoint("RX_CH1_MAP", default=1))
        DA_RXCHMAP.register(0, 3, Datapoint("RX_CH0_MAP", default=0))
