from libmmm.model import Device, Reg32, Datapoint, Block


class NDFC(Device):
    def __init__(self, start=0x01C03000):
        super(NDFC, self).__init__("NDFC" , start)
        NDFC_CTL = Reg32("NDFC_CTL", 0x00)
        self.block(NDFC_CTL)
        NDFC_CTL.register(24, 4, Datapoint("NDFC_CE_SEL", default=0))
        NDFC_CTL.register(21, 1, Datapoint("NDFC_DDR_RM", default=0))
        NDFC_CTL.register(20, 1, Datapoint("NDFC_DDR_REN", default=0))
        NDFC_CTL.register(18, 2, Datapoint("NF_TYPE", default=0))
        NDFC_CTL.register(17, 1, Datapoint("NDFC_CLE_POL", default=0))
        NDFC_CTL.register(16, 1, Datapoint("NDFC_ALE_POL", default=0))
        NDFC_CTL.register(15, 1, Datapoint("NDFC_DMA_TYPE", default=0))
        NDFC_CTL.register(14, 1, Datapoint("NDFC_RAM_METHOD", default=0))
        NDFC_CTL.register(8, 4, Datapoint("NDFC_PAGE_SIZE", default=0))
        NDFC_CTL.register(6, 1, Datapoint("NDFC_CE_ACT", default=0))
        NDFC_CTL.register(3, 2, Datapoint("NDFC_RB_SEL", default=0))
        NDFC_CTL.register(2, 1, Datapoint("NDFC_BUS_WIDTH", default=0))
        NDFC_CTL.register(1, 1, Datapoint("NDFC_RESET", default=0))
        NDFC_CTL.register(0, 1, Datapoint("NDFC_EN", default=0))
        NDFC_ST = Reg32("NDFC_ST", 0x04)
        self.block(NDFC_ST)
        NDFC_ST.register(13, 1, Datapoint("NDFC_RDATA_STA_0", default=None))
        NDFC_ST.register(12, 1, Datapoint("NDFC_RDATA_STA_1", default=None))
        NDFC_ST.register(11, 1, Datapoint("NDFC_RB_STATE3", default=None))
        NDFC_ST.register(10, 1, Datapoint("NDFC_RB_STATE2", default=None))
        NDFC_ST.register(9, 1, Datapoint("NDFC_RB_STATE1", default=None))
        NDFC_ST.register(8, 1, Datapoint("NDFC_RB_STATE0", default=None))
        NDFC_ST.register(4, 1, Datapoint("NDFC_STA", default=0))
        NDFC_ST.register(3, 1, Datapoint("NDFC_CMD_FIFO_STATUS", default=0))
        NDFC_ST.register(2, 1, Datapoint("NDFC_DMA_INT_FLAG", default=0))
        NDFC_ST.register(1, 1, Datapoint("NDFC_CMD_INT_FLAG", default=0))
        NDFC_ST.register(0, 1, Datapoint("NDFC_RB_B2R", default=0))
        NDFC_INT = Reg32("NDFC_INT", 0x08)
        self.block(NDFC_INT)
        NDFC_INT.register(2, 1, Datapoint("NDFC_DMA_INT_ENABLE", default=0))
        NDFC_INT.register(1, 1, Datapoint("NDFC_CMD_INT_ENABLE", default=0))
        NDFC_INT.register(0, 1, Datapoint("NDFC_B2R_INT_ENABLE", default=0))
        NDFC_TIMING_CTL = Reg32("NDFC_TIMING_CTL", 0x0C)
        self.block(NDFC_TIMING_CTL)
        NDFC_TIMING_CTL.register(8, 4, Datapoint("NDFC_READ_PIPE", default=0))
        NDFC_TIMING_CTL.register(0, 6, Datapoint("NDFC_DC_CTL", default=0))
        NDFC_TIMING_CFG = Reg32("NDFC_TIMING_CFG", 0x10)
        self.block(NDFC_TIMING_CFG)
        NDFC_TIMING_CFG.register(18, 2, Datapoint("tWC", default=0))
        NDFC_TIMING_CFG.register(16, 2, Datapoint("tCCS", default=0))
        NDFC_TIMING_CFG.register(14, 2, Datapoint("tCLHZ", default=0))
        NDFC_TIMING_CFG.register(12, 2, Datapoint("tCS", default=0))
        NDFC_TIMING_CFG.register(11, 1, Datapoint("T_CDQSS", default=0))
        NDFC_TIMING_CFG.register(8, 3, Datapoint("T_CAD", default=0))
        NDFC_TIMING_CFG.register(6, 2, Datapoint("T_RHW", default=2))
        NDFC_TIMING_CFG.register(4, 2, Datapoint("T_WHR", default=1))
        NDFC_TIMING_CFG.register(2, 2, Datapoint("T_ADL", default=1))
        NDFC_TIMING_CFG.register(0, 2, Datapoint("T_WB", default=1))
        NDFC_ADDR_LOW = Reg32("NDFC_ADDR_LOW", 0x14)
        self.block(NDFC_ADDR_LOW)
        NDFC_ADDR_LOW.register(24, 8, Datapoint("ADDR_DATA4", default=0))
        NDFC_ADDR_LOW.register(16, 8, Datapoint("ADDR_DATA3", default=0))
        NDFC_ADDR_LOW.register(8, 8, Datapoint("ADDR_DATA2", default=0))
        NDFC_ADDR_LOW.register(0, 8, Datapoint("ADDR_DATA1", default=0))
        NDFC_ADDR_HIGH = Reg32("NDFC_ADDR_HIGH", 0x18)
        self.block(NDFC_ADDR_HIGH)
        NDFC_ADDR_HIGH.register(24, 8, Datapoint("ADDR_DATA8", default=0))
        NDFC_ADDR_HIGH.register(16, 8, Datapoint("ADDR_DATA7", default=0))
        NDFC_ADDR_HIGH.register(8, 8, Datapoint("ADDR_DATA6", default=0))
        NDFC_ADDR_HIGH.register(0, 8, Datapoint("ADDR_DATA5", default=0))
        NDFC_DATA_BLOCK_NUM = Reg32("NDFC_DATA_BLOCK_NUM", 0x1C)
        self.block(NDFC_DATA_BLOCK_NUM)
        NDFC_DATA_BLOCK_NUM.register(0, 5, Datapoint("NDFC_DATA_BLOCK_NUM", default=0))
        NDFC_CNT = Reg32("NDFC_CNT", 0x20)
        self.block(NDFC_CNT)
        NDFC_CNT.register(0, 10, Datapoint("NDFC_DATA_CNT", default=0))
        NDFC_CMD = Reg32("NDFC_CMD", 0x24)
        self.block(NDFC_CMD)
        NDFC_CMD.register(30, 2, Datapoint("NDFC_CMD_TYPE", default=0))
        NDFC_CMD.register(29, 1, Datapoint("NDFC_SEND_FOURTH_CMD", default=0))
        NDFC_CMD.register(28, 1, Datapoint("NDFC_SEND_THIRD_CMD", default=0))
        NDFC_CMD.register(27, 1, Datapoint("NDFC_ROW_ADDR_AUTO", default=0))
        NDFC_CMD.register(26, 1, Datapoint("NDFC_DATA_METHOD", default=0))
        NDFC_CMD.register(25, 1, Datapoint("NDFC_SEQ", default=0))
        NDFC_CMD.register(24, 1, Datapoint("NDFC_SEND_SECOND_CMD", default=0))
        NDFC_CMD.register(23, 1, Datapoint("NDFC_WAIT_FLAG", default=0))
        NDFC_CMD.register(22, 1, Datapoint("NDFC_SEND_FIRST_CMD", default=0))
        NDFC_CMD.register(21, 1, Datapoint("NDFC_DATA_TRANS", default=0))
        NDFC_CMD.register(20, 1, Datapoint("NDFC_ACCESS_DIR", default=0))
        NDFC_CMD.register(19, 1, Datapoint("NDFC_SEND_ADR", default=0))
        NDFC_CMD.register(16, 3, Datapoint("NDFC_ADR_NUM", default=0))
        NDFC_CMD.register(8, 8, Datapoint("NDFC_CMD_HIGH_BYTE", default=0))
        NDFC_CMD.register(0, 8, Datapoint("NDFC_CMD_LOW_BYTE", default=0))
        NDFC_CMD_SET0 = Reg32("NDFC_CMD_SET0", 0x28)
        self.block(NDFC_CMD_SET0)
        NDFC_CMD_SET0.register(16, 8, Datapoint("NDFC_RANDOM_READ_CMD1", default=224))
        NDFC_CMD_SET0.register(8, 8, Datapoint("NDFC_RANDOM_READ_CMD0", default=5))
        NDFC_CMD_SET0.register(0, 8, Datapoint("NDFC_READ_CMD", default=48))
        NDFC_CMD_SET1 = Reg32("NDFC_CMD_SET1", 0x2C)
        self.block(NDFC_CMD_SET1)
        NDFC_CMD_SET1.register(16, 16, Datapoint("NDFC_READ_CMD0", default=112))
        NDFC_CMD_SET1.register(16, 8, Datapoint("NDFC_READ_CMD1", default=0))
        NDFC_CMD_SET1.register(8, 8, Datapoint("NDFC_RANDOM_WRITE_CMD", default=133))
        NDFC_CMD_SET1.register(0, 8, Datapoint("NDFC_PROGRAM_CMD", default=16))
        NDFC_IO_DATA = Reg32("NDFC_IO_DATA", 0x30)
        self.block(NDFC_IO_DATA)
        NDFC_IO_DATA.register(0, 32, Datapoint("NDFC_IO_DATA", default=0))
        NDFC_ECC_CTL = Reg32("NDFC_ECC_CTL", 0x34)
        self.block(NDFC_ECC_CTL)
        NDFC_ECC_CTL.register(16, 15, Datapoint("NDFC_RANDOM_SEED", default=19072))
        NDFC_ECC_CTL.register(12, 4, Datapoint("NDFC_ECC_MODE", default=0))
        NDFC_ECC_CTL.register(11, 1, Datapoint("NDFC_RANDOM_SIZE", default=0))
        NDFC_ECC_CTL.register(10, 1, Datapoint("NDFC_RANDOM_DIRECTION", default=0))
        NDFC_ECC_CTL.register(9, 1, Datapoint("NDFC_RANDOM_EN", default=0))
        NDFC_ECC_CTL.register(5, 1, Datapoint("NDFC_ECC_BLOCK_SIZE", default=0))
        NDFC_ECC_CTL.register(4, 1, Datapoint("NDFC_ECC_EXCEPTION", default=0))
        NDFC_ECC_CTL.register(3, 1, Datapoint("NDFC_ECC_PIPELINE", default=1))
        NDFC_ECC_CTL.register(0, 1, Datapoint("NDFC_ECC_EN", default=0))
        NDFC_ECC_ST = Reg32("NDFC_ECC_ST", 0x38)
        self.block(NDFC_ECC_ST)
        NDFC_ECC_ST.register(16, 16, Datapoint("NDFC_PAT_FOUND", default=0))
        NDFC_ECC_ST.register(0, 16, Datapoint("NDFC_ECC_ERR", default=0))
        NDFC_EFR = Reg32("NDFC_EFR", 0x3C)
        self.block(NDFC_EFR)
        NDFC_EFR.register(8, 1, Datapoint("NDFC_WP_CTRL", default=0))
        NDFC_EFR.register(0, 7, Datapoint("NDFC_ECC_DEBUG", default=0))
        NDFC_ERR_CNT0 = Reg32("NDFC_ERR_CNT0", 0x40)
        self.block(NDFC_ERR_CNT0)
        NDFC_ERR_CNT0.register(0, 32, Datapoint("USER_DATA", default=4294967295))
        NDFC_EFNAND_STATUS = Reg32("NDFC_EFNAND_STATUS", 0x90)
        self.block(NDFC_EFNAND_STATUS)
        NDFC_EFNAND_STATUS.register(0, 8, Datapoint("EF_NAND_STATUS", default=0))
        NDFC_SPARE_AREA = Reg32("NDFC_SPARE_AREA", 0xA0)
        self.block(NDFC_SPARE_AREA)
        NDFC_SPARE_AREA.register(0, 16, Datapoint("NDFC_SPARE_ADR", default=1024))
        NDFC_PAT_ID = Reg32("NDFC_PAT_ID", 0xA4)
        self.block(NDFC_PAT_ID)
        NDFC_PAT_ID.register(24, 1, Datapoint("NDFC_RDATA_STA_EN", default=1))
        NDFC_PAT_ID.register(0, 18, Datapoint("NDFC_RDATA_STA_TH", default=0))
        NDFC_RDATA_STA_0 = Reg32("NDFC_RDATA_STA_0", 0xAC)
        self.block(NDFC_RDATA_STA_0)
        NDFC_RDATA_STA_0.register(0, 32, Datapoint("BIT_CNT_1", default=0))
        NDFC_RDATA_STA_1 = Reg32("NDFC_RDATA_STA_1", 0xB0)
        self.block(NDFC_RDATA_STA_1)
        NDFC_RDATA_STA_1.register(0, 32, Datapoint("BIT_CNT_0", default=0))
        NDFC_MDMA_ADDR = Reg32("NDFC_MDMA_ADDR", 0xC0)
        self.block(NDFC_MDMA_ADDR)
        NDFC_MDMA_ADDR.register(0, 32, Datapoint("MDMA_ADDR", default=0))
        NDFC_MDMA_CNT = Reg32("NDFC_MDMA_CNT", 0xC4)
        self.block(NDFC_MDMA_CNT)
        NDFC_MDMA_CNT.register(0, 15, Datapoint("MDMA_CNT", default=0))
        self.block(Block("RAM0_BASE", 0x400, 1024))
        self.block(Block("RAM1_BASE", 0x800, 1024))
